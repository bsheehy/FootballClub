@using System.IO;
@using System.Web.UI;
@using Club.Services.Utils;
@using Mallon.Core.Artifacts;
@model Mallon.Core.Web.Models.ModelProperty

@{
  bool outputHTML = false;
  bool lblExclude = false;
  bool lblSecond = true;
  MvcHtmlString sLabel = new MvcHtmlString("");
  MvcHtmlString sControl = new MvcHtmlString("");
  MvcHtmlString sValidation = Html.ValidationMessage(Model.Path);
  
  //Workflow Views - can change from Readonly to Edit without going back to Controller
  bool wfCtrlEditable = true;
  //-1 == control in normal View
  //0 == control in ReadOnly Workflow View
  //1 == control in Edit Workflow  View
  int wfView = -1;
  if (ViewBag.wfView != null)
  {
    wfView = Convert.ToInt32(ViewData["wfView"]);
    if (wfView == 0)
    {
      wfCtrlEditable = false;
    }
  }
  
  var metadata = ModelMetadataProviders.Current.GetMetadataForProperty(null, Model.ParentType, Model.Name);
  if (Model.Access.Allows(Mallon.Core.Artifacts.FieldAccessOptionality.Mandatory)) //Property is mandatory if its int value is greater or equal to 4 e.g. Read = 1, Mandatory = 4 so Read | Mandatory permissions = 5
  {
    metadata.IsRequired = true;
  }
  else
  {
    metadata.IsRequired = false;
  }


  IDictionary<string, object> ctrlDataAnnotations = Html.GetUnobtrusiveValidationAttributes(Model.Name, metadata);
  //ctrlDataAnnotations.Add("class", "k-checkbox k-checkbox-label");
  //IDictionary<string, object> ctrlDataAnnotations = Html.GetUnobtrusiveValidationAttributes(Model.Name);
  //Merge the validation attributes with the Model.ControlHtmlAttributes attributes passed from the View.
  IDictionary<string, object> ctrlAttributes = Utility.MergeDictionaries(Model.ControlHtmlAttributes, ctrlDataAnnotations);

  if (ctrlAttributes.ContainsKey("lblExclude"))
  {
    //lblExclude = true;
    lblExclude = Convert.ToBoolean(ctrlAttributes["lblExclude"]);
    ctrlAttributes.Remove("lblExclude");
  }
  if (ctrlAttributes.ContainsKey("lblSecond"))
  {
    //lblSecond = true;
    lblSecond = Convert.ToBoolean(ctrlAttributes["lblSecond"]);
    ctrlAttributes.Remove("lblSecond");
  }

  switch (Model.Access)
  {
    case Mallon.Core.Artifacts.FieldAccessOptionality.Write:
    case Mallon.Core.Artifacts.FieldAccessOptionality.ReadWrite:
    case Mallon.Core.Artifacts.FieldAccessOptionality.ReadWriteMandatory:
      outputHTML = true;
      sLabel = Html.Label(Model.Label);
      break;
    case Mallon.Core.Artifacts.FieldAccessOptionality.Read:
    case Mallon.Core.Artifacts.FieldAccessOptionality.ReadMandatory:
      outputHTML = true;
      if (ctrlAttributes.ContainsKey("readonly"))
      {
        ctrlAttributes["readonly"] = true;
      }
      else
      {
        ctrlAttributes.Add("readonly", true);
      }
      sLabel = Html.Label(Model.Label);
      wfCtrlEditable = false;
      break;
    default:
      outputHTML = false;
      break;
  }

  if (ctrlAttributes.ContainsKey("readonly") && Convert.ToBoolean(ctrlAttributes["readonly"]) == true)
  {
    wfCtrlEditable = false;
  }

  if (outputHTML)
  {
    //sControl = Html.CheckBox(Model.Path, (bool)Model.Value, ctrlAttributes);
    sControl = new MvcHtmlString(Html.Kendo().CheckBox().Name(Model.Path).Checked((bool)Model.Value).HtmlAttributes(ctrlAttributes).Enable(wfCtrlEditable).ToHtmlString());
  }

  bool hintAtStart = true;
  if (ctrlAttributes.ContainsKey("hintAtEnd"))
  {
    hintAtStart = false;
  }
}

@if (outputHTML)
{
  
  if (lblExclude == false)
  {
    if (lblSecond == false)
    {
      <td>
        @if (hintAtStart && !string.IsNullOrEmpty(Model.Hint))
        {
          <img src="~/Images/16px/about.png" alt="Help" title="@Model.Hint" class="mouseChangeHelp" />
        }
        @sLabel
      </td>
  
      <td>
        @sControl
        @if (!hintAtStart && !string.IsNullOrEmpty(Model.Hint))
        {
          <img src="~/Images/16px/about.png" alt="Help" title="@Model.Hint" class="mouseChangeHelp" />
        }
        @if (metadata.IsRequired == true || ctrlAttributes.ContainsKey("required"))
        {
          <span class="requiredAfter"></span>
          @sValidation
        }
      </td>
    }
    //Lbl first
    else 
    {
      <td>
        @sControl
        @if (!hintAtStart && !string.IsNullOrEmpty(Model.Hint))
        {
          <img src="~/Images/16px/about.png" alt="Help" title="@Model.Hint" class="mouseChangeHelp" />
        }
      </td>
  
      <td>
        @if (hintAtStart && !string.IsNullOrEmpty(Model.Hint))
        {
          <img src="~/Images/16px/about.png" alt="Help" title="@Model.Hint" class="mouseChangeHelp" />
        }
        @sLabel
        @if (metadata.IsRequired == true || ctrlAttributes.ContainsKey("required"))
        {
          <span class="requiredAfter"></span>
          @sValidation
        }
      </td>
    }
  }
  else
  {
  <td>
    @sControl
    @if (!hintAtStart && !string.IsNullOrEmpty(Model.Hint))
    {
      <img src="~/Images/16px/about.png" alt="Help" title="@Model.Hint" class="mouseChangeHelp" />
    }
    @if (metadata.IsRequired == true)
    {
      <span class="requiredAfter"></span>
    }
    @if (sValidation != null)
    {
      @sValidation
    }
  </td>
  }
}
else
{
  @Html.Hidden(Model.Path, Model.Value);
}
