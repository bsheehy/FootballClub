@using Club.Services.Utils;
@using Mallon.Core.Artifacts; 
@model Mallon.Core.Web.Models.ModelProperty

@{
	bool outputHTML = false;
	bool isTextBox = true;//textBox or textArea
  bool lblExclude = false;
	MvcHtmlString sLabel = new MvcHtmlString("");
	MvcHtmlString sControl = new MvcHtmlString("");
  MvcHtmlString sValidation = Html.ValidationMessage(Model.Path);
  int tdColSpan = 1;

  //Workflow Views - can change from Readonly to Edit without going back to Controller
  bool wfCtrlEditable = true;
  //-1 == control in normal View
  //0 == control in ReadOnly Workflow View
  //1 == control in Edit Workflow  View
  int wfView = -1;
  if (ViewBag.wfView != null)
  {
    wfView = Convert.ToInt32(ViewData["wfView"]);
    if (wfView == 0)
    {
      wfCtrlEditable = false;
    }
  }

	var metadata = ModelMetadataProviders.Current.GetMetadataForProperty(null, Model.ParentType, Model.Name);
	if (Model.Access.Allows(Mallon.Core.Artifacts.FieldAccessOptionality.Mandatory)) //Property is mandatory if its int value is greater or equal to 4 e.g. Read = 1, Mandatory = 4 so Read | Mandatory permissions = 5
	{
		metadata.IsRequired = true;
	}
  else
  {
    metadata.IsRequired = false;
  }
	IDictionary<string, object> ctrlDataAnnotations = Html.GetUnobtrusiveValidationAttributes(Model.Name, metadata);
	IDictionary<string, object> ctrlAttributes =  Utility.MergeDictionaries(Model.ControlHtmlAttributes, ctrlDataAnnotations);

  if (ctrlAttributes.ContainsKey("required"))
  {
    metadata.IsRequired = true;
  }

  ctrlAttributes.AddHtmlAttribute("class", "k-textbox ctrlMinWidth");
  //if (!ctrlAttributes.ContainsKey("class"))
  //{
  //  ctrlAttributes.Add("class", "k-textbox ctrlMinWidth");
  //}
  //else
  //{
  //  ctrlAttributes["class"] = string.Concat(ctrlAttributes["class"], " ctrlMinWidth");
  //}
	if (ctrlAttributes.ContainsKey("rows"))
	{
		object rows = ctrlAttributes["rows"];
		if (rows != null) { isTextBox = false; }
	}
  if (ctrlAttributes.ContainsKey("tdColSpan"))
	{
		tdColSpan = Convert.ToInt32(ctrlAttributes["tdColSpan"]); 
    ctrlAttributes.Remove("tdColSpan");
	}
  if (ctrlAttributes.ContainsKey("lblExclude"))
	{
    lblExclude = true;
    ctrlAttributes.Remove("lblExclude");
	}
	switch (Model.Access)
	{
		case Mallon.Core.Artifacts.FieldAccessOptionality.Write:
		case Mallon.Core.Artifacts.FieldAccessOptionality.ReadWrite:
		case Mallon.Core.Artifacts.FieldAccessOptionality.ReadWriteMandatory:
			outputHTML = true;
      sLabel = Html.Label(Model.Label, new {@class= "requiredAfterLbl requiredBeforeLbl"});
			break;
		case Mallon.Core.Artifacts.FieldAccessOptionality.Read:
    case Mallon.Core.Artifacts.FieldAccessOptionality.ReadMandatory:
			if(ctrlAttributes.ContainsKey("readonly"))
			{
				ctrlAttributes["readonly"] = true;
			}
			else
			{
				ctrlAttributes.Add("readonly", true);
			}
      wfCtrlEditable = false;
			outputHTML = true;
			sLabel = Html.Label(Model.Label, new {@class= "requiredAfterLbl requiredBeforeLbl"});
			break;
		default:
			outputHTML = false;
			break;
	}

  if (ctrlAttributes.ContainsKey("readonly") && Convert.ToBoolean(ctrlAttributes["readonly"]) == true)
  {
    wfCtrlEditable = false;
  }

	if (outputHTML)
	{
		if (isTextBox)
		{
      //sControl = Html.TextBox(Model.Path, Model.Value, ctrlAttributes);
      //sControl = new MvcHtmlString(
      //  Html.Kendo().TextBox().Name(Model.ControlName).HtmlAttributes(ctrlAttributes).Value(Model.AsString()).ToHtmlString());
      sControl = new MvcHtmlString(
        Html.Kendo().TextBox().Name(Model.Path).HtmlAttributes(ctrlAttributes).Value(Model.AsString()).Enable(wfCtrlEditable).ToHtmlString());
    }
		else
		{
			sControl = Html.TextArea(Model.Path, Model.AsString(), ctrlAttributes);
		}
	}

  bool hintAtStart = true;
  if (ctrlAttributes.ContainsKey("hintAtEnd"))
  {
    hintAtStart = false;
  }
}

@if (outputHTML)
{
  if(lblExclude==false)
  {
    <td>
      @if (hintAtStart && !string.IsNullOrEmpty(Model.Hint))
      {
        <img src="~/Images/16px/about.png" alt="Help" title="@Model.Hint" class="mouseChangeHelp" />
      }
		  @sLabel
	  </td>
  }
  <td colspan="@tdColSpan">
		@sControl
    @if (!hintAtStart && !string.IsNullOrEmpty(Model.Hint))
    {
      <img src="~/Images/16px/about.png" alt="Help" title="@Model.Hint" class="mouseChangeHelp" />
    }
    @if (metadata.IsRequired == true || ctrlAttributes.ContainsKey("required"))
    {
      <span class="requiredAfter"></span>
      @sValidation
    }
  </td>
}
else
{
	@Html.Hidden(Model.Path, Model.Value);
}
