/* ============================================================
   DESCRIPTION:  Triggers Creation Script

   Tables:
     club_club_details
	    Triggers:
			[dbo].[tr_i_AUDIT_club_club_details] [dbo].[tr_u_AUDIT_club_club_details] [dbo].[tr_d_AUDIT_club_club_details] 
     club_committee
	    Triggers:
			[dbo].[tr_i_AUDIT_club_committee] [dbo].[tr_u_AUDIT_club_committee] [dbo].[tr_d_AUDIT_club_committee] 
     club_committee_admin
	    Triggers:
			[dbo].[tr_i_AUDIT_club_committee_admin] [dbo].[tr_u_AUDIT_club_committee_admin] [dbo].[tr_d_AUDIT_club_committee_admin] 
     club_committee_member
	    Triggers:
			[dbo].[tr_i_AUDIT_club_committee_member] [dbo].[tr_u_AUDIT_club_committee_member] [dbo].[tr_d_AUDIT_club_committee_member] 
     club_committee_member_type
	    Triggers:
			[dbo].[tr_i_AUDIT_club_committee_member_type] [dbo].[tr_u_AUDIT_club_committee_member_type] [dbo].[tr_d_AUDIT_club_committee_member_type] 
     club_committee_minute
	    Triggers:
			[dbo].[tr_i_AUDIT_club_committee_minute] [dbo].[tr_u_AUDIT_club_committee_minute] [dbo].[tr_d_AUDIT_club_committee_minute] 
     club_lotto
	    Triggers:
			[dbo].[tr_i_AUDIT_club_lotto] [dbo].[tr_u_AUDIT_club_lotto] [dbo].[tr_d_AUDIT_club_lotto] 
     club_lotto_result
	    Triggers:
			[dbo].[tr_i_AUDIT_club_lotto_result] [dbo].[tr_u_AUDIT_club_lotto_result] [dbo].[tr_d_AUDIT_club_lotto_result] 
     club_lotto_result_winner
	    Triggers:
			[dbo].[tr_i_AUDIT_club_lotto_result_winner] [dbo].[tr_u_AUDIT_club_lotto_result_winner] [dbo].[tr_d_AUDIT_club_lotto_result_winner] 
     club_lotto_ticket_direct_debit
	    Triggers:
			[dbo].[tr_i_AUDIT_club_lotto_ticket_direct_debit] [dbo].[tr_u_AUDIT_club_lotto_ticket_direct_debit] [dbo].[tr_d_AUDIT_club_lotto_ticket_direct_debit] 
     club_membership_type
	    Triggers:
			[dbo].[tr_i_AUDIT_club_membership_type] [dbo].[tr_u_AUDIT_club_membership_type] [dbo].[tr_d_AUDIT_club_membership_type] 
     club_person
	    Triggers:
			[dbo].[tr_i_AUDIT_club_person] [dbo].[tr_u_AUDIT_club_person] [dbo].[tr_d_AUDIT_club_person] 
     club_person_guardian
	    Triggers:
			[dbo].[tr_i_AUDIT_club_person_guardian] [dbo].[tr_u_AUDIT_club_person_guardian] [dbo].[tr_d_AUDIT_club_person_guardian] 
     club_person_membership_type
	    Triggers:
			[dbo].[tr_i_AUDIT_club_person_membership_type] [dbo].[tr_u_AUDIT_club_person_membership_type] [dbo].[tr_d_AUDIT_club_person_membership_type] 
     club_person_qualification
	    Triggers:
			[dbo].[tr_i_AUDIT_club_person_qualification] [dbo].[tr_u_AUDIT_club_person_qualification] [dbo].[tr_d_AUDIT_club_person_qualification] 
     club_person_title
	    Triggers:
			[dbo].[tr_i_AUDIT_club_person_title] [dbo].[tr_u_AUDIT_club_person_title] [dbo].[tr_d_AUDIT_club_person_title] 
     club_qualification
	    Triggers:
			[dbo].[tr_i_AUDIT_club_qualification] [dbo].[tr_u_AUDIT_club_qualification] [dbo].[tr_d_AUDIT_club_qualification] 
     club_team
	    Triggers:
			[dbo].[tr_i_AUDIT_club_team] [dbo].[tr_u_AUDIT_club_team] [dbo].[tr_d_AUDIT_club_team] 
     club_team_admin
	    Triggers:
			[dbo].[tr_i_AUDIT_club_team_admin] [dbo].[tr_u_AUDIT_club_team_admin] [dbo].[tr_d_AUDIT_club_team_admin] 
     club_team_member
	    Triggers:
			[dbo].[tr_i_AUDIT_club_team_member] [dbo].[tr_u_AUDIT_club_team_member] [dbo].[tr_d_AUDIT_club_team_member] 
     club_team_member_type
	    Triggers:
			[dbo].[tr_i_AUDIT_club_team_member_type] [dbo].[tr_u_AUDIT_club_team_member_type] [dbo].[tr_d_AUDIT_club_team_member_type] 
     core_application_session
	    Triggers:
			[dbo].[tr_i_AUDIT_core_application_session] [dbo].[tr_u_AUDIT_core_application_session] [dbo].[tr_d_AUDIT_core_application_session] 
     core_category_access
	    Triggers:
			[dbo].[tr_i_AUDIT_core_category_access] [dbo].[tr_u_AUDIT_core_category_access] [dbo].[tr_d_AUDIT_core_category_access] 
     core_class_access
	    Triggers:
			[dbo].[tr_i_AUDIT_core_class_access] [dbo].[tr_u_AUDIT_core_class_access] [dbo].[tr_d_AUDIT_core_class_access] 
     core_class_command
	    Triggers:
			[dbo].[tr_i_AUDIT_core_class_command] [dbo].[tr_u_AUDIT_core_class_command] [dbo].[tr_d_AUDIT_core_class_command] 
     core_command
	    Triggers:
			[dbo].[tr_i_AUDIT_core_command] [dbo].[tr_u_AUDIT_core_command] [dbo].[tr_d_AUDIT_core_command] 
     core_criterion
	    Triggers:
			[dbo].[tr_i_AUDIT_core_criterion] [dbo].[tr_u_AUDIT_core_criterion] [dbo].[tr_d_AUDIT_core_criterion] 
     core_display_format
	    Triggers:
			[dbo].[tr_i_AUDIT_core_display_format] [dbo].[tr_u_AUDIT_core_display_format] [dbo].[tr_d_AUDIT_core_display_format] 
     core_field_access
	    Triggers:
			[dbo].[tr_i_AUDIT_core_field_access] [dbo].[tr_u_AUDIT_core_field_access] [dbo].[tr_d_AUDIT_core_field_access] 
     core_field_access_roles
	    Triggers:
			[dbo].[tr_i_AUDIT_core_field_access_roles] [dbo].[tr_u_AUDIT_core_field_access_roles] [dbo].[tr_d_AUDIT_core_field_access_roles] 
     core_field_view_map
	    Triggers:
			[dbo].[tr_i_AUDIT_core_field_view_map] [dbo].[tr_u_AUDIT_core_field_view_map] [dbo].[tr_d_AUDIT_core_field_view_map] 
     core_function
	    Triggers:
			[dbo].[tr_i_AUDIT_core_function] [dbo].[tr_u_AUDIT_core_function] [dbo].[tr_d_AUDIT_core_function] 
     core_incrementing_id
	    Triggers:
			[dbo].[tr_i_AUDIT_core_incrementing_id] [dbo].[tr_u_AUDIT_core_incrementing_id] [dbo].[tr_d_AUDIT_core_incrementing_id] 
     core_incrementing_property_config
	    Triggers:
			[dbo].[tr_i_AUDIT_core_incrementing_property_config] [dbo].[tr_u_AUDIT_core_incrementing_property_config] [dbo].[tr_d_AUDIT_core_incrementing_property_config] 
     core_incrementing_property_id
	    Triggers:
			[dbo].[tr_i_AUDIT_core_incrementing_property_id] [dbo].[tr_u_AUDIT_core_incrementing_property_id] [dbo].[tr_d_AUDIT_core_incrementing_property_id] 
     core_incrementing_property_yearly_id
	    Triggers:
			[dbo].[tr_i_AUDIT_core_incrementing_property_yearly_id] [dbo].[tr_u_AUDIT_core_incrementing_property_yearly_id] [dbo].[tr_d_AUDIT_core_incrementing_property_yearly_id] 
     core_incrementing_yearly_id
	    Triggers:
			[dbo].[tr_i_AUDIT_core_incrementing_yearly_id] [dbo].[tr_u_AUDIT_core_incrementing_yearly_id] [dbo].[tr_d_AUDIT_core_incrementing_yearly_id] 
     core_log_entry
	    Triggers:
			[dbo].[tr_i_AUDIT_core_log_entry] [dbo].[tr_u_AUDIT_core_log_entry] [dbo].[tr_d_AUDIT_core_log_entry] 
     core_log_entry_viewed_by
	    Triggers:
			[dbo].[tr_i_AUDIT_core_log_entry_viewed_by] [dbo].[tr_u_AUDIT_core_log_entry_viewed_by] [dbo].[tr_d_AUDIT_core_log_entry_viewed_by] 
     core_profile
	    Triggers:
			[dbo].[tr_i_AUDIT_core_profile] [dbo].[tr_u_AUDIT_core_profile] [dbo].[tr_d_AUDIT_core_profile] 
     core_profile_items
	    Triggers:
			[dbo].[tr_i_AUDIT_core_profile_items] [dbo].[tr_u_AUDIT_core_profile_items] [dbo].[tr_d_AUDIT_core_profile_items] 
     core_property_description
	    Triggers:
			[dbo].[tr_i_AUDIT_core_property_description] [dbo].[tr_u_AUDIT_core_property_description] [dbo].[tr_d_AUDIT_core_property_description] 
     core_role
	    Triggers:
			[dbo].[tr_i_AUDIT_core_role] [dbo].[tr_u_AUDIT_core_role] [dbo].[tr_d_AUDIT_core_role] 
     core_role_function_access
	    Triggers:
			[dbo].[tr_i_AUDIT_core_role_function_access] [dbo].[tr_u_AUDIT_core_role_function_access] [dbo].[tr_d_AUDIT_core_role_function_access] 
     core_role_start_page_commands
	    Triggers:
			[dbo].[tr_i_AUDIT_core_role_start_page_commands] [dbo].[tr_u_AUDIT_core_role_start_page_commands] [dbo].[tr_d_AUDIT_core_role_start_page_commands] 
     core_search_spec
	    Triggers:
			[dbo].[tr_i_AUDIT_core_search_spec] [dbo].[tr_u_AUDIT_core_search_spec] [dbo].[tr_d_AUDIT_core_search_spec] 
     core_system_info
	    Triggers:
			[dbo].[tr_i_AUDIT_core_system_info] [dbo].[tr_u_AUDIT_core_system_info] [dbo].[tr_d_AUDIT_core_system_info] 
     core_user
	    Triggers:
			[dbo].[tr_i_AUDIT_core_user] [dbo].[tr_u_AUDIT_core_user] [dbo].[tr_d_AUDIT_core_user] 
     core_user_roles
	    Triggers:
			[dbo].[tr_i_AUDIT_core_user_roles] [dbo].[tr_u_AUDIT_core_user_roles] [dbo].[tr_d_AUDIT_core_user_roles] 
     core_version_info
	    Triggers:
			[dbo].[tr_i_AUDIT_core_version_info] [dbo].[tr_u_AUDIT_core_version_info] [dbo].[tr_d_AUDIT_core_version_info] 
     documents_attached_document
	    Triggers:
			[dbo].[tr_i_AUDIT_documents_attached_document] [dbo].[tr_u_AUDIT_documents_attached_document] [dbo].[tr_d_AUDIT_documents_attached_document] 
     documents_scanned_document
	    Triggers:
			[dbo].[tr_i_AUDIT_documents_scanned_document] [dbo].[tr_u_AUDIT_documents_scanned_document] [dbo].[tr_d_AUDIT_documents_scanned_document] 
     documents_stored_file
	    Triggers:
			[dbo].[tr_i_AUDIT_documents_stored_file] [dbo].[tr_u_AUDIT_documents_stored_file] [dbo].[tr_d_AUDIT_documents_stored_file] 
     documents_type_path_configuration
	    Triggers:
			[dbo].[tr_i_AUDIT_documents_type_path_configuration] [dbo].[tr_u_AUDIT_documents_type_path_configuration] [dbo].[tr_d_AUDIT_documents_type_path_configuration] 
     
   DATABASE:    .\SQL2012.ClubFrRocks
   DATE:        22/02/2017 11:37:03
   =============================================================*/
GO
-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[club_club_details]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:03
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_club_club_details]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_club_club_details]
   PRINT 'Trigger dropped: tr_i_AUDIT_club_club_details'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_club_club_details] for Table [dbo].[club_club_details]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_club_club_details] for Table [dbo].[club_club_details]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_club_details]
ON [dbo].[club_club_details]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_club_details]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:03
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_club_details]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_club_details',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'key',
		CONVERT(nvarchar(4000), NEW.[key], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[key] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), NEW.[name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[name] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), NEW.[description], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[description] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'history',
		CONVERT(nvarchar(4000), NEW.[history], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[history] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_number',
		CONVERT(nvarchar(4000), NEW.[address_number], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[address_number] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_street',
		CONVERT(nvarchar(4000), NEW.[address_street], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[address_street] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_town',
		CONVERT(nvarchar(4000), NEW.[address_town], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[address_town] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_county',
		CONVERT(nvarchar(4000), NEW.[address_county], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[address_county] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_country',
		CONVERT(nvarchar(4000), NEW.[address_country], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[address_country] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_post_code',
		CONVERT(nvarchar(4000), NEW.[address_post_code], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[address_post_code] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_xlng_coord',
		CONVERT(nvarchar(4000), NEW.[address_xlng_coord], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[address_xlng_coord] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_ylat_coord',
		CONVERT(nvarchar(4000), NEW.[address_ylat_coord], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[address_ylat_coord] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_club_club_details'
Else PRINT 'Trigger Failed: tr_i_AUDIT_club_club_details Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_club_details]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_club_club_details]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_club_club_details has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_club_club_details cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_club_club_details]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_club_club_details]
	PRINT 'Trigger dropped: tr_u_AUDIT_club_club_details '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_club_club_details] for Table [dbo].[club_club_details]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_club_club_details] for Table [dbo].[club_club_details]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_club_details]
ON [dbo].[club_club_details]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_club_details]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_club_details]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_club_details',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([key])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'key',
			CONVERT(nvarchar(4000), OLD.[key], 0),
			CONVERT(nvarchar(4000), NEW.[key], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[key] <>
					OLD.[key]
				) Or
			
				(
					NEW.[key] Is Null And
					OLD.[key] Is Not Null
				) Or
				(
					NEW.[key] Is Not Null And
					OLD.[key] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([name])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'name',
			CONVERT(nvarchar(4000), OLD.[name], 0),
			CONVERT(nvarchar(4000), NEW.[name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[name] <>
					OLD.[name]
				) Or
			
				(
					NEW.[name] Is Null And
					OLD.[name] Is Not Null
				) Or
				(
					NEW.[name] Is Not Null And
					OLD.[name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([description])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'description',
			CONVERT(nvarchar(4000), OLD.[description], 0),
			CONVERT(nvarchar(4000), NEW.[description], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[description] <>
					OLD.[description]
				) Or
			
				(
					NEW.[description] Is Null And
					OLD.[description] Is Not Null
				) Or
				(
					NEW.[description] Is Not Null And
					OLD.[description] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([history])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'history',
			CONVERT(nvarchar(4000), OLD.[history], 0),
			CONVERT(nvarchar(4000), NEW.[history], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[history] <>
					OLD.[history]
				) Or
			
				(
					NEW.[history] Is Null And
					OLD.[history] Is Not Null
				) Or
				(
					NEW.[history] Is Not Null And
					OLD.[history] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([address_number])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'address_number',
			CONVERT(nvarchar(4000), OLD.[address_number], 0),
			CONVERT(nvarchar(4000), NEW.[address_number], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[address_number] <>
					OLD.[address_number]
				) Or
			
				(
					NEW.[address_number] Is Null And
					OLD.[address_number] Is Not Null
				) Or
				(
					NEW.[address_number] Is Not Null And
					OLD.[address_number] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([address_street])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'address_street',
			CONVERT(nvarchar(4000), OLD.[address_street], 0),
			CONVERT(nvarchar(4000), NEW.[address_street], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[address_street] <>
					OLD.[address_street]
				) Or
			
				(
					NEW.[address_street] Is Null And
					OLD.[address_street] Is Not Null
				) Or
				(
					NEW.[address_street] Is Not Null And
					OLD.[address_street] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([address_town])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'address_town',
			CONVERT(nvarchar(4000), OLD.[address_town], 0),
			CONVERT(nvarchar(4000), NEW.[address_town], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[address_town] <>
					OLD.[address_town]
				) Or
			
				(
					NEW.[address_town] Is Null And
					OLD.[address_town] Is Not Null
				) Or
				(
					NEW.[address_town] Is Not Null And
					OLD.[address_town] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([address_county])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'address_county',
			CONVERT(nvarchar(4000), OLD.[address_county], 0),
			CONVERT(nvarchar(4000), NEW.[address_county], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[address_county] <>
					OLD.[address_county]
				) Or
			
				(
					NEW.[address_county] Is Null And
					OLD.[address_county] Is Not Null
				) Or
				(
					NEW.[address_county] Is Not Null And
					OLD.[address_county] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([address_country])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'address_country',
			CONVERT(nvarchar(4000), OLD.[address_country], 0),
			CONVERT(nvarchar(4000), NEW.[address_country], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[address_country] <>
					OLD.[address_country]
				) Or
			
				(
					NEW.[address_country] Is Null And
					OLD.[address_country] Is Not Null
				) Or
				(
					NEW.[address_country] Is Not Null And
					OLD.[address_country] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([address_post_code])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'address_post_code',
			CONVERT(nvarchar(4000), OLD.[address_post_code], 0),
			CONVERT(nvarchar(4000), NEW.[address_post_code], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[address_post_code] <>
					OLD.[address_post_code]
				) Or
			
				(
					NEW.[address_post_code] Is Null And
					OLD.[address_post_code] Is Not Null
				) Or
				(
					NEW.[address_post_code] Is Not Null And
					OLD.[address_post_code] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([address_xlng_coord])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'address_xlng_coord',
			CONVERT(nvarchar(4000), OLD.[address_xlng_coord], 0),
			CONVERT(nvarchar(4000), NEW.[address_xlng_coord], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[address_xlng_coord] <>
					OLD.[address_xlng_coord]
				) Or
			
				(
					NEW.[address_xlng_coord] Is Null And
					OLD.[address_xlng_coord] Is Not Null
				) Or
				(
					NEW.[address_xlng_coord] Is Not Null And
					OLD.[address_xlng_coord] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([address_ylat_coord])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'address_ylat_coord',
			CONVERT(nvarchar(4000), OLD.[address_ylat_coord], 0),
			CONVERT(nvarchar(4000), NEW.[address_ylat_coord], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[address_ylat_coord] <>
					OLD.[address_ylat_coord]
				) Or
			
				(
					NEW.[address_ylat_coord] Is Null And
					OLD.[address_ylat_coord] Is Not Null
				) Or
				(
					NEW.[address_ylat_coord] Is Not Null And
					OLD.[address_ylat_coord] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_club_club_details '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_club_club_details Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_club_details]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_club_club_details]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_club_club_details has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_club_club_details cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_club_club_details]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_club_club_details]
	PRINT 'Trigger dropped: tr_d_AUDIT_club_club_details '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_club_club_details] for Table [dbo].[club_club_details]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_club_club_details] for Table [dbo].[club_club_details]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_club_details]
ON [dbo].[club_club_details]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_club_details]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_club_details]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_club_details',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'key',
		CONVERT(nvarchar(4000), OLD.[key], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[key] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), OLD.[name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[name] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), OLD.[description], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[description] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'history',
		CONVERT(nvarchar(4000), OLD.[history], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[history] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_number',
		CONVERT(nvarchar(4000), OLD.[address_number], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[address_number] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_street',
		CONVERT(nvarchar(4000), OLD.[address_street], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[address_street] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_town',
		CONVERT(nvarchar(4000), OLD.[address_town], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[address_town] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_county',
		CONVERT(nvarchar(4000), OLD.[address_county], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[address_county] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_country',
		CONVERT(nvarchar(4000), OLD.[address_country], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[address_country] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_post_code',
		CONVERT(nvarchar(4000), OLD.[address_post_code], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[address_post_code] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_xlng_coord',
		CONVERT(nvarchar(4000), OLD.[address_xlng_coord], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[address_xlng_coord] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_ylat_coord',
		CONVERT(nvarchar(4000), OLD.[address_ylat_coord], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[address_ylat_coord] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_club_club_details '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_club_club_details Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_club_details]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_club_club_details]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_club_club_details has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_club_club_details cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[club_committee]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_club_committee]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_club_committee]
   PRINT 'Trigger dropped: tr_i_AUDIT_club_committee'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_club_committee] for Table [dbo].[club_committee]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_club_committee] for Table [dbo].[club_committee]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_committee]
ON [dbo].[club_committee]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_committee]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_committee]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_committee',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), NEW.[name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[name] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'year',
		CONVERT(nvarchar(4000), NEW.[year], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[year] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), NEW.[description], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[description] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'start_date',
		CONVERT(nvarchar(4000), NEW.[start_date], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[start_date] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'end_date',
		CONVERT(nvarchar(4000), NEW.[end_date], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[end_date] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), NEW.[active], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[active] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'time_type',
		CONVERT(nvarchar(4000), NEW.[time_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[time_type] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_club_committee'
Else PRINT 'Trigger Failed: tr_i_AUDIT_club_committee Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_committee]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_club_committee]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_club_committee has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_club_committee cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_club_committee]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_club_committee]
	PRINT 'Trigger dropped: tr_u_AUDIT_club_committee '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_club_committee] for Table [dbo].[club_committee]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_club_committee] for Table [dbo].[club_committee]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_committee]
ON [dbo].[club_committee]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_committee]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_committee]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_committee',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([name])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'name',
			CONVERT(nvarchar(4000), OLD.[name], 0),
			CONVERT(nvarchar(4000), NEW.[name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[name] <>
					OLD.[name]
				) Or
			
				(
					NEW.[name] Is Null And
					OLD.[name] Is Not Null
				) Or
				(
					NEW.[name] Is Not Null And
					OLD.[name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([year])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'year',
			CONVERT(nvarchar(4000), OLD.[year], 0),
			CONVERT(nvarchar(4000), NEW.[year], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[year] <>
					OLD.[year]
				) Or
			
				(
					NEW.[year] Is Null And
					OLD.[year] Is Not Null
				) Or
				(
					NEW.[year] Is Not Null And
					OLD.[year] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([description])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'description',
			CONVERT(nvarchar(4000), OLD.[description], 0),
			CONVERT(nvarchar(4000), NEW.[description], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[description] <>
					OLD.[description]
				) Or
			
				(
					NEW.[description] Is Null And
					OLD.[description] Is Not Null
				) Or
				(
					NEW.[description] Is Not Null And
					OLD.[description] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([start_date])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'start_date',
			CONVERT(nvarchar(4000), OLD.[start_date], 121),
			CONVERT(nvarchar(4000), NEW.[start_date], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[start_date] <>
					OLD.[start_date]
				) Or
			
				(
					NEW.[start_date] Is Null And
					OLD.[start_date] Is Not Null
				) Or
				(
					NEW.[start_date] Is Not Null And
					OLD.[start_date] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([end_date])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'end_date',
			CONVERT(nvarchar(4000), OLD.[end_date], 121),
			CONVERT(nvarchar(4000), NEW.[end_date], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[end_date] <>
					OLD.[end_date]
				) Or
			
				(
					NEW.[end_date] Is Null And
					OLD.[end_date] Is Not Null
				) Or
				(
					NEW.[end_date] Is Not Null And
					OLD.[end_date] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([active])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'active',
			CONVERT(nvarchar(4000), OLD.[active], 0),
			CONVERT(nvarchar(4000), NEW.[active], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[active] <>
					OLD.[active]
				) Or
			
				(
					NEW.[active] Is Null And
					OLD.[active] Is Not Null
				) Or
				(
					NEW.[active] Is Not Null And
					OLD.[active] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([time_type])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'time_type',
			CONVERT(nvarchar(4000), OLD.[time_type], 0),
			CONVERT(nvarchar(4000), NEW.[time_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[time_type] <>
					OLD.[time_type]
				) Or
			
				(
					NEW.[time_type] Is Null And
					OLD.[time_type] Is Not Null
				) Or
				(
					NEW.[time_type] Is Not Null And
					OLD.[time_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_club_committee '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_club_committee Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_committee]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_club_committee]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_club_committee has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_club_committee cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_club_committee]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_club_committee]
	PRINT 'Trigger dropped: tr_d_AUDIT_club_committee '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_club_committee] for Table [dbo].[club_committee]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_club_committee] for Table [dbo].[club_committee]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_committee]
ON [dbo].[club_committee]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_committee]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_committee]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_committee',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), OLD.[name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[name] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'year',
		CONVERT(nvarchar(4000), OLD.[year], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[year] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), OLD.[description], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[description] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'start_date',
		CONVERT(nvarchar(4000), OLD.[start_date], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[start_date] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'end_date',
		CONVERT(nvarchar(4000), OLD.[end_date], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[end_date] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), OLD.[active], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[active] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'time_type',
		CONVERT(nvarchar(4000), OLD.[time_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[time_type] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_club_committee '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_club_committee Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_committee]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_club_committee]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_club_committee has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_club_committee cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[club_committee_admin]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_club_committee_admin]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_club_committee_admin]
   PRINT 'Trigger dropped: tr_i_AUDIT_club_committee_admin'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_club_committee_admin] for Table [dbo].[club_committee_admin]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_club_committee_admin] for Table [dbo].[club_committee_admin]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_committee_admin]
ON [dbo].[club_committee_admin]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_committee_admin]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_committee_admin]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_committee_admin',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'user',
		CONVERT(nvarchar(4000), NEW.[user], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[user] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'committee',
		CONVERT(nvarchar(4000), NEW.[committee], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[committee] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_club_committee_admin'
Else PRINT 'Trigger Failed: tr_i_AUDIT_club_committee_admin Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_committee_admin]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_club_committee_admin]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_club_committee_admin has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_club_committee_admin cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_club_committee_admin]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_club_committee_admin]
	PRINT 'Trigger dropped: tr_u_AUDIT_club_committee_admin '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_club_committee_admin] for Table [dbo].[club_committee_admin]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_club_committee_admin] for Table [dbo].[club_committee_admin]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_committee_admin]
ON [dbo].[club_committee_admin]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_committee_admin]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_committee_admin]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_committee_admin',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([user])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'user',
			CONVERT(nvarchar(4000), OLD.[user], 0),
			CONVERT(nvarchar(4000), NEW.[user], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[user] <>
					OLD.[user]
				) Or
			
				(
					NEW.[user] Is Null And
					OLD.[user] Is Not Null
				) Or
				(
					NEW.[user] Is Not Null And
					OLD.[user] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([committee])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'committee',
			CONVERT(nvarchar(4000), OLD.[committee], 0),
			CONVERT(nvarchar(4000), NEW.[committee], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[committee] <>
					OLD.[committee]
				) Or
			
				(
					NEW.[committee] Is Null And
					OLD.[committee] Is Not Null
				) Or
				(
					NEW.[committee] Is Not Null And
					OLD.[committee] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_club_committee_admin '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_club_committee_admin Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_committee_admin]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_club_committee_admin]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_club_committee_admin has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_club_committee_admin cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_club_committee_admin]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_club_committee_admin]
	PRINT 'Trigger dropped: tr_d_AUDIT_club_committee_admin '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_club_committee_admin] for Table [dbo].[club_committee_admin]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_club_committee_admin] for Table [dbo].[club_committee_admin]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_committee_admin]
ON [dbo].[club_committee_admin]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_committee_admin]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_committee_admin]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_committee_admin',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'user',
		CONVERT(nvarchar(4000), OLD.[user], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[user] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'committee',
		CONVERT(nvarchar(4000), OLD.[committee], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[committee] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_club_committee_admin '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_club_committee_admin Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_committee_admin]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_club_committee_admin]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_club_committee_admin has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_club_committee_admin cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[club_committee_member]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_club_committee_member]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_club_committee_member]
   PRINT 'Trigger dropped: tr_i_AUDIT_club_committee_member'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_club_committee_member] for Table [dbo].[club_committee_member]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_club_committee_member] for Table [dbo].[club_committee_member]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_committee_member]
ON [dbo].[club_committee_member]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_committee_member]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_committee_member]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_committee_member',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'person',
		CONVERT(nvarchar(4000), NEW.[person], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[person] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'committee',
		CONVERT(nvarchar(4000), NEW.[committee], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[committee] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'committee_member_type',
		CONVERT(nvarchar(4000), NEW.[committee_member_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[committee_member_type] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_club_committee_member'
Else PRINT 'Trigger Failed: tr_i_AUDIT_club_committee_member Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_committee_member]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_club_committee_member]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_club_committee_member has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_club_committee_member cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_club_committee_member]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_club_committee_member]
	PRINT 'Trigger dropped: tr_u_AUDIT_club_committee_member '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_club_committee_member] for Table [dbo].[club_committee_member]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_club_committee_member] for Table [dbo].[club_committee_member]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_committee_member]
ON [dbo].[club_committee_member]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_committee_member]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_committee_member]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_committee_member',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([person])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'person',
			CONVERT(nvarchar(4000), OLD.[person], 0),
			CONVERT(nvarchar(4000), NEW.[person], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[person] <>
					OLD.[person]
				) Or
			
				(
					NEW.[person] Is Null And
					OLD.[person] Is Not Null
				) Or
				(
					NEW.[person] Is Not Null And
					OLD.[person] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([committee])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'committee',
			CONVERT(nvarchar(4000), OLD.[committee], 0),
			CONVERT(nvarchar(4000), NEW.[committee], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[committee] <>
					OLD.[committee]
				) Or
			
				(
					NEW.[committee] Is Null And
					OLD.[committee] Is Not Null
				) Or
				(
					NEW.[committee] Is Not Null And
					OLD.[committee] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([committee_member_type])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'committee_member_type',
			CONVERT(nvarchar(4000), OLD.[committee_member_type], 0),
			CONVERT(nvarchar(4000), NEW.[committee_member_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[committee_member_type] <>
					OLD.[committee_member_type]
				) Or
			
				(
					NEW.[committee_member_type] Is Null And
					OLD.[committee_member_type] Is Not Null
				) Or
				(
					NEW.[committee_member_type] Is Not Null And
					OLD.[committee_member_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_club_committee_member '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_club_committee_member Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_committee_member]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_club_committee_member]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_club_committee_member has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_club_committee_member cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_club_committee_member]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_club_committee_member]
	PRINT 'Trigger dropped: tr_d_AUDIT_club_committee_member '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_club_committee_member] for Table [dbo].[club_committee_member]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_club_committee_member] for Table [dbo].[club_committee_member]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_committee_member]
ON [dbo].[club_committee_member]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_committee_member]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_committee_member]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_committee_member',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'person',
		CONVERT(nvarchar(4000), OLD.[person], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[person] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'committee',
		CONVERT(nvarchar(4000), OLD.[committee], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[committee] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'committee_member_type',
		CONVERT(nvarchar(4000), OLD.[committee_member_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[committee_member_type] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_club_committee_member '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_club_committee_member Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_committee_member]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_club_committee_member]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_club_committee_member has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_club_committee_member cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[club_committee_member_type]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_club_committee_member_type]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_club_committee_member_type]
   PRINT 'Trigger dropped: tr_i_AUDIT_club_committee_member_type'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_club_committee_member_type] for Table [dbo].[club_committee_member_type]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_club_committee_member_type] for Table [dbo].[club_committee_member_type]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_committee_member_type]
ON [dbo].[club_committee_member_type]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_committee_member_type]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_committee_member_type]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_committee_member_type',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), NEW.[active], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[active] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'default',
		CONVERT(nvarchar(4000), NEW.[default], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[default] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), NEW.[name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[name] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), NEW.[description], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[description] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_club_committee_member_type'
Else PRINT 'Trigger Failed: tr_i_AUDIT_club_committee_member_type Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_committee_member_type]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_club_committee_member_type]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_club_committee_member_type has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_club_committee_member_type cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_club_committee_member_type]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_club_committee_member_type]
	PRINT 'Trigger dropped: tr_u_AUDIT_club_committee_member_type '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_club_committee_member_type] for Table [dbo].[club_committee_member_type]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_club_committee_member_type] for Table [dbo].[club_committee_member_type]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_committee_member_type]
ON [dbo].[club_committee_member_type]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_committee_member_type]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_committee_member_type]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_committee_member_type',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([active])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'active',
			CONVERT(nvarchar(4000), OLD.[active], 0),
			CONVERT(nvarchar(4000), NEW.[active], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[active] <>
					OLD.[active]
				) Or
			
				(
					NEW.[active] Is Null And
					OLD.[active] Is Not Null
				) Or
				(
					NEW.[active] Is Not Null And
					OLD.[active] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([default])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'default',
			CONVERT(nvarchar(4000), OLD.[default], 0),
			CONVERT(nvarchar(4000), NEW.[default], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[default] <>
					OLD.[default]
				) Or
			
				(
					NEW.[default] Is Null And
					OLD.[default] Is Not Null
				) Or
				(
					NEW.[default] Is Not Null And
					OLD.[default] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([name])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'name',
			CONVERT(nvarchar(4000), OLD.[name], 0),
			CONVERT(nvarchar(4000), NEW.[name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[name] <>
					OLD.[name]
				) Or
			
				(
					NEW.[name] Is Null And
					OLD.[name] Is Not Null
				) Or
				(
					NEW.[name] Is Not Null And
					OLD.[name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([description])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'description',
			CONVERT(nvarchar(4000), OLD.[description], 0),
			CONVERT(nvarchar(4000), NEW.[description], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[description] <>
					OLD.[description]
				) Or
			
				(
					NEW.[description] Is Null And
					OLD.[description] Is Not Null
				) Or
				(
					NEW.[description] Is Not Null And
					OLD.[description] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_club_committee_member_type '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_club_committee_member_type Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_committee_member_type]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_club_committee_member_type]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_club_committee_member_type has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_club_committee_member_type cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_club_committee_member_type]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_club_committee_member_type]
	PRINT 'Trigger dropped: tr_d_AUDIT_club_committee_member_type '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_club_committee_member_type] for Table [dbo].[club_committee_member_type]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_club_committee_member_type] for Table [dbo].[club_committee_member_type]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_committee_member_type]
ON [dbo].[club_committee_member_type]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_committee_member_type]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_committee_member_type]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_committee_member_type',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), OLD.[active], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[active] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'default',
		CONVERT(nvarchar(4000), OLD.[default], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[default] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), OLD.[name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[name] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), OLD.[description], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[description] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_club_committee_member_type '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_club_committee_member_type Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_committee_member_type]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_club_committee_member_type]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_club_committee_member_type has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_club_committee_member_type cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[club_committee_minute]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_club_committee_minute]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_club_committee_minute]
   PRINT 'Trigger dropped: tr_i_AUDIT_club_committee_minute'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_club_committee_minute] for Table [dbo].[club_committee_minute]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_club_committee_minute] for Table [dbo].[club_committee_minute]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_committee_minute]
ON [dbo].[club_committee_minute]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_committee_minute]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_committee_minute]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_committee_minute',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'date',
		CONVERT(nvarchar(4000), NEW.[date], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[date] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'minutes_text',
		CONVERT(nvarchar(4000), NEW.[minutes_text], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[minutes_text] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), NEW.[active], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[active] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'committee',
		CONVERT(nvarchar(4000), NEW.[committee], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[committee] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_club_committee_minute'
Else PRINT 'Trigger Failed: tr_i_AUDIT_club_committee_minute Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_committee_minute]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_club_committee_minute]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_club_committee_minute has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_club_committee_minute cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_club_committee_minute]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_club_committee_minute]
	PRINT 'Trigger dropped: tr_u_AUDIT_club_committee_minute '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_club_committee_minute] for Table [dbo].[club_committee_minute]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_club_committee_minute] for Table [dbo].[club_committee_minute]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_committee_minute]
ON [dbo].[club_committee_minute]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_committee_minute]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_committee_minute]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_committee_minute',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([date])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'date',
			CONVERT(nvarchar(4000), OLD.[date], 121),
			CONVERT(nvarchar(4000), NEW.[date], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[date] <>
					OLD.[date]
				) Or
			
				(
					NEW.[date] Is Null And
					OLD.[date] Is Not Null
				) Or
				(
					NEW.[date] Is Not Null And
					OLD.[date] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([minutes_text])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'minutes_text',
			CONVERT(nvarchar(4000), OLD.[minutes_text], 0),
			CONVERT(nvarchar(4000), NEW.[minutes_text], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[minutes_text] <>
					OLD.[minutes_text]
				) Or
			
				(
					NEW.[minutes_text] Is Null And
					OLD.[minutes_text] Is Not Null
				) Or
				(
					NEW.[minutes_text] Is Not Null And
					OLD.[minutes_text] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([active])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'active',
			CONVERT(nvarchar(4000), OLD.[active], 0),
			CONVERT(nvarchar(4000), NEW.[active], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[active] <>
					OLD.[active]
				) Or
			
				(
					NEW.[active] Is Null And
					OLD.[active] Is Not Null
				) Or
				(
					NEW.[active] Is Not Null And
					OLD.[active] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([committee])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'committee',
			CONVERT(nvarchar(4000), OLD.[committee], 0),
			CONVERT(nvarchar(4000), NEW.[committee], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[committee] <>
					OLD.[committee]
				) Or
			
				(
					NEW.[committee] Is Null And
					OLD.[committee] Is Not Null
				) Or
				(
					NEW.[committee] Is Not Null And
					OLD.[committee] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_club_committee_minute '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_club_committee_minute Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_committee_minute]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_club_committee_minute]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_club_committee_minute has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_club_committee_minute cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_club_committee_minute]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_club_committee_minute]
	PRINT 'Trigger dropped: tr_d_AUDIT_club_committee_minute '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_club_committee_minute] for Table [dbo].[club_committee_minute]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_club_committee_minute] for Table [dbo].[club_committee_minute]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_committee_minute]
ON [dbo].[club_committee_minute]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_committee_minute]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_committee_minute]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_committee_minute',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'date',
		CONVERT(nvarchar(4000), OLD.[date], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[date] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'minutes_text',
		CONVERT(nvarchar(4000), OLD.[minutes_text], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[minutes_text] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), OLD.[active], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[active] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'committee',
		CONVERT(nvarchar(4000), OLD.[committee], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[committee] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_club_committee_minute '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_club_committee_minute Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_committee_minute]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_club_committee_minute]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_club_committee_minute has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_club_committee_minute cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[club_lotto]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_club_lotto]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_club_lotto]
   PRINT 'Trigger dropped: tr_i_AUDIT_club_lotto'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_club_lotto] for Table [dbo].[club_lotto]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_club_lotto] for Table [dbo].[club_lotto]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_lotto]
ON [dbo].[club_lotto]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_lotto]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_lotto]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_lotto',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'lotto_draw_date',
		CONVERT(nvarchar(4000), NEW.[lotto_draw_date], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[lotto_draw_date] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'message',
		CONVERT(nvarchar(4000), NEW.[message], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[message] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'jackpot',
		CONVERT(nvarchar(4000), NEW.[jackpot], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[jackpot] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'lotto_result',
		CONVERT(nvarchar(4000), NEW.[lotto_result], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[lotto_result] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_club_lotto'
Else PRINT 'Trigger Failed: tr_i_AUDIT_club_lotto Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_lotto]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_club_lotto]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_club_lotto has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_club_lotto cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_club_lotto]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_club_lotto]
	PRINT 'Trigger dropped: tr_u_AUDIT_club_lotto '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_club_lotto] for Table [dbo].[club_lotto]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_club_lotto] for Table [dbo].[club_lotto]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_lotto]
ON [dbo].[club_lotto]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_lotto]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_lotto]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_lotto',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([lotto_draw_date])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'lotto_draw_date',
			CONVERT(nvarchar(4000), OLD.[lotto_draw_date], 121),
			CONVERT(nvarchar(4000), NEW.[lotto_draw_date], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[lotto_draw_date] <>
					OLD.[lotto_draw_date]
				) Or
			
				(
					NEW.[lotto_draw_date] Is Null And
					OLD.[lotto_draw_date] Is Not Null
				) Or
				(
					NEW.[lotto_draw_date] Is Not Null And
					OLD.[lotto_draw_date] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([message])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'message',
			CONVERT(nvarchar(4000), OLD.[message], 0),
			CONVERT(nvarchar(4000), NEW.[message], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[message] <>
					OLD.[message]
				) Or
			
				(
					NEW.[message] Is Null And
					OLD.[message] Is Not Null
				) Or
				(
					NEW.[message] Is Not Null And
					OLD.[message] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([jackpot])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'jackpot',
			CONVERT(nvarchar(4000), OLD.[jackpot], 0),
			CONVERT(nvarchar(4000), NEW.[jackpot], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[jackpot] <>
					OLD.[jackpot]
				) Or
			
				(
					NEW.[jackpot] Is Null And
					OLD.[jackpot] Is Not Null
				) Or
				(
					NEW.[jackpot] Is Not Null And
					OLD.[jackpot] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([lotto_result])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'lotto_result',
			CONVERT(nvarchar(4000), OLD.[lotto_result], 0),
			CONVERT(nvarchar(4000), NEW.[lotto_result], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[lotto_result] <>
					OLD.[lotto_result]
				) Or
			
				(
					NEW.[lotto_result] Is Null And
					OLD.[lotto_result] Is Not Null
				) Or
				(
					NEW.[lotto_result] Is Not Null And
					OLD.[lotto_result] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_club_lotto '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_club_lotto Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_lotto]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_club_lotto]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_club_lotto has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_club_lotto cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_club_lotto]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_club_lotto]
	PRINT 'Trigger dropped: tr_d_AUDIT_club_lotto '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_club_lotto] for Table [dbo].[club_lotto]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_club_lotto] for Table [dbo].[club_lotto]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_lotto]
ON [dbo].[club_lotto]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_lotto]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_lotto]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_lotto',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'lotto_draw_date',
		CONVERT(nvarchar(4000), OLD.[lotto_draw_date], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[lotto_draw_date] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'message',
		CONVERT(nvarchar(4000), OLD.[message], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[message] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'jackpot',
		CONVERT(nvarchar(4000), OLD.[jackpot], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[jackpot] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'lotto_result',
		CONVERT(nvarchar(4000), OLD.[lotto_result], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[lotto_result] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_club_lotto '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_club_lotto Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_lotto]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_club_lotto]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_club_lotto has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_club_lotto cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[club_lotto_result]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_club_lotto_result]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_club_lotto_result]
   PRINT 'Trigger dropped: tr_i_AUDIT_club_lotto_result'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_club_lotto_result] for Table [dbo].[club_lotto_result]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_club_lotto_result] for Table [dbo].[club_lotto_result]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_lotto_result]
ON [dbo].[club_lotto_result]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_lotto_result]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_lotto_result]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_lotto_result',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no1',
		CONVERT(nvarchar(4000), NEW.[no1], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[no1] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no2',
		CONVERT(nvarchar(4000), NEW.[no2], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[no2] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no3',
		CONVERT(nvarchar(4000), NEW.[no3], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[no3] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no4',
		CONVERT(nvarchar(4000), NEW.[no4], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[no4] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no5',
		CONVERT(nvarchar(4000), NEW.[no5], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[no5] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'lotto',
		CONVERT(nvarchar(4000), NEW.[lotto], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[lotto] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_club_lotto_result'
Else PRINT 'Trigger Failed: tr_i_AUDIT_club_lotto_result Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_lotto_result]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_club_lotto_result]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_club_lotto_result has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_club_lotto_result cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_club_lotto_result]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_club_lotto_result]
	PRINT 'Trigger dropped: tr_u_AUDIT_club_lotto_result '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_club_lotto_result] for Table [dbo].[club_lotto_result]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_club_lotto_result] for Table [dbo].[club_lotto_result]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_lotto_result]
ON [dbo].[club_lotto_result]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_lotto_result]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_lotto_result]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_lotto_result',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([no1])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'no1',
			CONVERT(nvarchar(4000), OLD.[no1], 0),
			CONVERT(nvarchar(4000), NEW.[no1], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[no1] <>
					OLD.[no1]
				) Or
			
				(
					NEW.[no1] Is Null And
					OLD.[no1] Is Not Null
				) Or
				(
					NEW.[no1] Is Not Null And
					OLD.[no1] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([no2])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'no2',
			CONVERT(nvarchar(4000), OLD.[no2], 0),
			CONVERT(nvarchar(4000), NEW.[no2], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[no2] <>
					OLD.[no2]
				) Or
			
				(
					NEW.[no2] Is Null And
					OLD.[no2] Is Not Null
				) Or
				(
					NEW.[no2] Is Not Null And
					OLD.[no2] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([no3])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'no3',
			CONVERT(nvarchar(4000), OLD.[no3], 0),
			CONVERT(nvarchar(4000), NEW.[no3], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[no3] <>
					OLD.[no3]
				) Or
			
				(
					NEW.[no3] Is Null And
					OLD.[no3] Is Not Null
				) Or
				(
					NEW.[no3] Is Not Null And
					OLD.[no3] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([no4])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'no4',
			CONVERT(nvarchar(4000), OLD.[no4], 0),
			CONVERT(nvarchar(4000), NEW.[no4], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[no4] <>
					OLD.[no4]
				) Or
			
				(
					NEW.[no4] Is Null And
					OLD.[no4] Is Not Null
				) Or
				(
					NEW.[no4] Is Not Null And
					OLD.[no4] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([no5])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'no5',
			CONVERT(nvarchar(4000), OLD.[no5], 0),
			CONVERT(nvarchar(4000), NEW.[no5], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[no5] <>
					OLD.[no5]
				) Or
			
				(
					NEW.[no5] Is Null And
					OLD.[no5] Is Not Null
				) Or
				(
					NEW.[no5] Is Not Null And
					OLD.[no5] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([lotto])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'lotto',
			CONVERT(nvarchar(4000), OLD.[lotto], 0),
			CONVERT(nvarchar(4000), NEW.[lotto], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[lotto] <>
					OLD.[lotto]
				) Or
			
				(
					NEW.[lotto] Is Null And
					OLD.[lotto] Is Not Null
				) Or
				(
					NEW.[lotto] Is Not Null And
					OLD.[lotto] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_club_lotto_result '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_club_lotto_result Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_lotto_result]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_club_lotto_result]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_club_lotto_result has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_club_lotto_result cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_club_lotto_result]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_club_lotto_result]
	PRINT 'Trigger dropped: tr_d_AUDIT_club_lotto_result '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_club_lotto_result] for Table [dbo].[club_lotto_result]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_club_lotto_result] for Table [dbo].[club_lotto_result]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_lotto_result]
ON [dbo].[club_lotto_result]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_lotto_result]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_lotto_result]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_lotto_result',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no1',
		CONVERT(nvarchar(4000), OLD.[no1], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[no1] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no2',
		CONVERT(nvarchar(4000), OLD.[no2], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[no2] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no3',
		CONVERT(nvarchar(4000), OLD.[no3], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[no3] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no4',
		CONVERT(nvarchar(4000), OLD.[no4], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[no4] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no5',
		CONVERT(nvarchar(4000), OLD.[no5], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[no5] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'lotto',
		CONVERT(nvarchar(4000), OLD.[lotto], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[lotto] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_club_lotto_result '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_club_lotto_result Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_lotto_result]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_club_lotto_result]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_club_lotto_result has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_club_lotto_result cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[club_lotto_result_winner]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_club_lotto_result_winner]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_club_lotto_result_winner]
   PRINT 'Trigger dropped: tr_i_AUDIT_club_lotto_result_winner'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_club_lotto_result_winner] for Table [dbo].[club_lotto_result_winner]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_club_lotto_result_winner] for Table [dbo].[club_lotto_result_winner]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_lotto_result_winner]
ON [dbo].[club_lotto_result_winner]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_lotto_result_winner]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_lotto_result_winner]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_lotto_result_winner',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'message',
		CONVERT(nvarchar(4000), NEW.[message], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[message] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'matches',
		CONVERT(nvarchar(4000), NEW.[matches], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[matches] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no1',
		CONVERT(nvarchar(4000), NEW.[no1], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[no1] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no2',
		CONVERT(nvarchar(4000), NEW.[no2], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[no2] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no3',
		CONVERT(nvarchar(4000), NEW.[no3], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[no3] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no4',
		CONVERT(nvarchar(4000), NEW.[no4], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[no4] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'lotto_result',
		CONVERT(nvarchar(4000), NEW.[lotto_result], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[lotto_result] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'person',
		CONVERT(nvarchar(4000), NEW.[person], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[person] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_club_lotto_result_winner'
Else PRINT 'Trigger Failed: tr_i_AUDIT_club_lotto_result_winner Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_lotto_result_winner]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_club_lotto_result_winner]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_club_lotto_result_winner has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_club_lotto_result_winner cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_club_lotto_result_winner]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_club_lotto_result_winner]
	PRINT 'Trigger dropped: tr_u_AUDIT_club_lotto_result_winner '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_club_lotto_result_winner] for Table [dbo].[club_lotto_result_winner]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_club_lotto_result_winner] for Table [dbo].[club_lotto_result_winner]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_lotto_result_winner]
ON [dbo].[club_lotto_result_winner]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_lotto_result_winner]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_lotto_result_winner]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_lotto_result_winner',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([message])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'message',
			CONVERT(nvarchar(4000), OLD.[message], 0),
			CONVERT(nvarchar(4000), NEW.[message], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[message] <>
					OLD.[message]
				) Or
			
				(
					NEW.[message] Is Null And
					OLD.[message] Is Not Null
				) Or
				(
					NEW.[message] Is Not Null And
					OLD.[message] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([matches])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'matches',
			CONVERT(nvarchar(4000), OLD.[matches], 0),
			CONVERT(nvarchar(4000), NEW.[matches], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[matches] <>
					OLD.[matches]
				) Or
			
				(
					NEW.[matches] Is Null And
					OLD.[matches] Is Not Null
				) Or
				(
					NEW.[matches] Is Not Null And
					OLD.[matches] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([no1])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'no1',
			CONVERT(nvarchar(4000), OLD.[no1], 0),
			CONVERT(nvarchar(4000), NEW.[no1], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[no1] <>
					OLD.[no1]
				) Or
			
				(
					NEW.[no1] Is Null And
					OLD.[no1] Is Not Null
				) Or
				(
					NEW.[no1] Is Not Null And
					OLD.[no1] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([no2])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'no2',
			CONVERT(nvarchar(4000), OLD.[no2], 0),
			CONVERT(nvarchar(4000), NEW.[no2], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[no2] <>
					OLD.[no2]
				) Or
			
				(
					NEW.[no2] Is Null And
					OLD.[no2] Is Not Null
				) Or
				(
					NEW.[no2] Is Not Null And
					OLD.[no2] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([no3])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'no3',
			CONVERT(nvarchar(4000), OLD.[no3], 0),
			CONVERT(nvarchar(4000), NEW.[no3], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[no3] <>
					OLD.[no3]
				) Or
			
				(
					NEW.[no3] Is Null And
					OLD.[no3] Is Not Null
				) Or
				(
					NEW.[no3] Is Not Null And
					OLD.[no3] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([no4])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'no4',
			CONVERT(nvarchar(4000), OLD.[no4], 0),
			CONVERT(nvarchar(4000), NEW.[no4], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[no4] <>
					OLD.[no4]
				) Or
			
				(
					NEW.[no4] Is Null And
					OLD.[no4] Is Not Null
				) Or
				(
					NEW.[no4] Is Not Null And
					OLD.[no4] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([lotto_result])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'lotto_result',
			CONVERT(nvarchar(4000), OLD.[lotto_result], 0),
			CONVERT(nvarchar(4000), NEW.[lotto_result], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[lotto_result] <>
					OLD.[lotto_result]
				) Or
			
				(
					NEW.[lotto_result] Is Null And
					OLD.[lotto_result] Is Not Null
				) Or
				(
					NEW.[lotto_result] Is Not Null And
					OLD.[lotto_result] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([person])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'person',
			CONVERT(nvarchar(4000), OLD.[person], 0),
			CONVERT(nvarchar(4000), NEW.[person], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[person] <>
					OLD.[person]
				) Or
			
				(
					NEW.[person] Is Null And
					OLD.[person] Is Not Null
				) Or
				(
					NEW.[person] Is Not Null And
					OLD.[person] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_club_lotto_result_winner '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_club_lotto_result_winner Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_lotto_result_winner]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_club_lotto_result_winner]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_club_lotto_result_winner has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_club_lotto_result_winner cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_club_lotto_result_winner]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_club_lotto_result_winner]
	PRINT 'Trigger dropped: tr_d_AUDIT_club_lotto_result_winner '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_club_lotto_result_winner] for Table [dbo].[club_lotto_result_winner]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_club_lotto_result_winner] for Table [dbo].[club_lotto_result_winner]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_lotto_result_winner]
ON [dbo].[club_lotto_result_winner]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_lotto_result_winner]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_lotto_result_winner]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_lotto_result_winner',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'message',
		CONVERT(nvarchar(4000), OLD.[message], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[message] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'matches',
		CONVERT(nvarchar(4000), OLD.[matches], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[matches] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no1',
		CONVERT(nvarchar(4000), OLD.[no1], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[no1] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no2',
		CONVERT(nvarchar(4000), OLD.[no2], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[no2] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no3',
		CONVERT(nvarchar(4000), OLD.[no3], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[no3] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no4',
		CONVERT(nvarchar(4000), OLD.[no4], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[no4] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'lotto_result',
		CONVERT(nvarchar(4000), OLD.[lotto_result], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[lotto_result] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'person',
		CONVERT(nvarchar(4000), OLD.[person], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[person] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_club_lotto_result_winner '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_club_lotto_result_winner Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_lotto_result_winner]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_club_lotto_result_winner]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_club_lotto_result_winner has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_club_lotto_result_winner cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[club_lotto_ticket_direct_debit]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_club_lotto_ticket_direct_debit]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_club_lotto_ticket_direct_debit]
   PRINT 'Trigger dropped: tr_i_AUDIT_club_lotto_ticket_direct_debit'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_club_lotto_ticket_direct_debit] for Table [dbo].[club_lotto_ticket_direct_debit]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_club_lotto_ticket_direct_debit] for Table [dbo].[club_lotto_ticket_direct_debit]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_lotto_ticket_direct_debit]
ON [dbo].[club_lotto_ticket_direct_debit]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_lotto_ticket_direct_debit]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_lotto_ticket_direct_debit]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_lotto_ticket_direct_debit',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'key',
		CONVERT(nvarchar(4000), NEW.[key], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[key] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no1',
		CONVERT(nvarchar(4000), NEW.[no1], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[no1] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no2',
		CONVERT(nvarchar(4000), NEW.[no2], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[no2] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no3',
		CONVERT(nvarchar(4000), NEW.[no3], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[no3] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no4',
		CONVERT(nvarchar(4000), NEW.[no4], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[no4] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), NEW.[active], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[active] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'start_date',
		CONVERT(nvarchar(4000), NEW.[start_date], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[start_date] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'end_date',
		CONVERT(nvarchar(4000), NEW.[end_date], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[end_date] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'person',
		CONVERT(nvarchar(4000), NEW.[person], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[person] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_club_lotto_ticket_direct_debit'
Else PRINT 'Trigger Failed: tr_i_AUDIT_club_lotto_ticket_direct_debit Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_lotto_ticket_direct_debit]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_club_lotto_ticket_direct_debit]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_club_lotto_ticket_direct_debit has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_club_lotto_ticket_direct_debit cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_club_lotto_ticket_direct_debit]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_club_lotto_ticket_direct_debit]
	PRINT 'Trigger dropped: tr_u_AUDIT_club_lotto_ticket_direct_debit '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_club_lotto_ticket_direct_debit] for Table [dbo].[club_lotto_ticket_direct_debit]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_club_lotto_ticket_direct_debit] for Table [dbo].[club_lotto_ticket_direct_debit]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_lotto_ticket_direct_debit]
ON [dbo].[club_lotto_ticket_direct_debit]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_lotto_ticket_direct_debit]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_lotto_ticket_direct_debit]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_lotto_ticket_direct_debit',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([key])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'key',
			CONVERT(nvarchar(4000), OLD.[key], 0),
			CONVERT(nvarchar(4000), NEW.[key], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[key] <>
					OLD.[key]
				) Or
			
				(
					NEW.[key] Is Null And
					OLD.[key] Is Not Null
				) Or
				(
					NEW.[key] Is Not Null And
					OLD.[key] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([no1])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'no1',
			CONVERT(nvarchar(4000), OLD.[no1], 0),
			CONVERT(nvarchar(4000), NEW.[no1], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[no1] <>
					OLD.[no1]
				) Or
			
				(
					NEW.[no1] Is Null And
					OLD.[no1] Is Not Null
				) Or
				(
					NEW.[no1] Is Not Null And
					OLD.[no1] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([no2])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'no2',
			CONVERT(nvarchar(4000), OLD.[no2], 0),
			CONVERT(nvarchar(4000), NEW.[no2], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[no2] <>
					OLD.[no2]
				) Or
			
				(
					NEW.[no2] Is Null And
					OLD.[no2] Is Not Null
				) Or
				(
					NEW.[no2] Is Not Null And
					OLD.[no2] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([no3])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'no3',
			CONVERT(nvarchar(4000), OLD.[no3], 0),
			CONVERT(nvarchar(4000), NEW.[no3], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[no3] <>
					OLD.[no3]
				) Or
			
				(
					NEW.[no3] Is Null And
					OLD.[no3] Is Not Null
				) Or
				(
					NEW.[no3] Is Not Null And
					OLD.[no3] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([no4])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'no4',
			CONVERT(nvarchar(4000), OLD.[no4], 0),
			CONVERT(nvarchar(4000), NEW.[no4], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[no4] <>
					OLD.[no4]
				) Or
			
				(
					NEW.[no4] Is Null And
					OLD.[no4] Is Not Null
				) Or
				(
					NEW.[no4] Is Not Null And
					OLD.[no4] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([active])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'active',
			CONVERT(nvarchar(4000), OLD.[active], 0),
			CONVERT(nvarchar(4000), NEW.[active], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[active] <>
					OLD.[active]
				) Or
			
				(
					NEW.[active] Is Null And
					OLD.[active] Is Not Null
				) Or
				(
					NEW.[active] Is Not Null And
					OLD.[active] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([start_date])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'start_date',
			CONVERT(nvarchar(4000), OLD.[start_date], 121),
			CONVERT(nvarchar(4000), NEW.[start_date], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[start_date] <>
					OLD.[start_date]
				) Or
			
				(
					NEW.[start_date] Is Null And
					OLD.[start_date] Is Not Null
				) Or
				(
					NEW.[start_date] Is Not Null And
					OLD.[start_date] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([end_date])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'end_date',
			CONVERT(nvarchar(4000), OLD.[end_date], 121),
			CONVERT(nvarchar(4000), NEW.[end_date], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[end_date] <>
					OLD.[end_date]
				) Or
			
				(
					NEW.[end_date] Is Null And
					OLD.[end_date] Is Not Null
				) Or
				(
					NEW.[end_date] Is Not Null And
					OLD.[end_date] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([person])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'person',
			CONVERT(nvarchar(4000), OLD.[person], 0),
			CONVERT(nvarchar(4000), NEW.[person], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[person] <>
					OLD.[person]
				) Or
			
				(
					NEW.[person] Is Null And
					OLD.[person] Is Not Null
				) Or
				(
					NEW.[person] Is Not Null And
					OLD.[person] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_club_lotto_ticket_direct_debit '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_club_lotto_ticket_direct_debit Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_lotto_ticket_direct_debit]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_club_lotto_ticket_direct_debit]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_club_lotto_ticket_direct_debit has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_club_lotto_ticket_direct_debit cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_club_lotto_ticket_direct_debit]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_club_lotto_ticket_direct_debit]
	PRINT 'Trigger dropped: tr_d_AUDIT_club_lotto_ticket_direct_debit '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_club_lotto_ticket_direct_debit] for Table [dbo].[club_lotto_ticket_direct_debit]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_club_lotto_ticket_direct_debit] for Table [dbo].[club_lotto_ticket_direct_debit]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_lotto_ticket_direct_debit]
ON [dbo].[club_lotto_ticket_direct_debit]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_lotto_ticket_direct_debit]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_lotto_ticket_direct_debit]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_lotto_ticket_direct_debit',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'key',
		CONVERT(nvarchar(4000), OLD.[key], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[key] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no1',
		CONVERT(nvarchar(4000), OLD.[no1], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[no1] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no2',
		CONVERT(nvarchar(4000), OLD.[no2], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[no2] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no3',
		CONVERT(nvarchar(4000), OLD.[no3], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[no3] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no4',
		CONVERT(nvarchar(4000), OLD.[no4], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[no4] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), OLD.[active], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[active] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'start_date',
		CONVERT(nvarchar(4000), OLD.[start_date], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[start_date] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'end_date',
		CONVERT(nvarchar(4000), OLD.[end_date], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[end_date] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'person',
		CONVERT(nvarchar(4000), OLD.[person], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[person] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_club_lotto_ticket_direct_debit '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_club_lotto_ticket_direct_debit Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_lotto_ticket_direct_debit]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_club_lotto_ticket_direct_debit]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_club_lotto_ticket_direct_debit has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_club_lotto_ticket_direct_debit cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[club_membership_type]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_club_membership_type]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_club_membership_type]
   PRINT 'Trigger dropped: tr_i_AUDIT_club_membership_type'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_club_membership_type] for Table [dbo].[club_membership_type]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_club_membership_type] for Table [dbo].[club_membership_type]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_membership_type]
ON [dbo].[club_membership_type]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_membership_type]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_membership_type]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_membership_type',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), NEW.[name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[name] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'year',
		CONVERT(nvarchar(4000), NEW.[year], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[year] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'time_type',
		CONVERT(nvarchar(4000), NEW.[time_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[time_type] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'sex',
		CONVERT(nvarchar(4000), NEW.[sex], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[sex] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'key',
		CONVERT(nvarchar(4000), NEW.[key], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[key] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), NEW.[active], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[active] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'start_date',
		CONVERT(nvarchar(4000), NEW.[start_date], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[start_date] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'end_date',
		CONVERT(nvarchar(4000), NEW.[end_date], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[end_date] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'cost',
		CONVERT(nvarchar(4000), NEW.[cost], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[cost] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_club_membership_type'
Else PRINT 'Trigger Failed: tr_i_AUDIT_club_membership_type Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_membership_type]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_club_membership_type]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_club_membership_type has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_club_membership_type cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_club_membership_type]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_club_membership_type]
	PRINT 'Trigger dropped: tr_u_AUDIT_club_membership_type '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_club_membership_type] for Table [dbo].[club_membership_type]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_club_membership_type] for Table [dbo].[club_membership_type]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_membership_type]
ON [dbo].[club_membership_type]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_membership_type]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_membership_type]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_membership_type',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([name])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'name',
			CONVERT(nvarchar(4000), OLD.[name], 0),
			CONVERT(nvarchar(4000), NEW.[name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[name] <>
					OLD.[name]
				) Or
			
				(
					NEW.[name] Is Null And
					OLD.[name] Is Not Null
				) Or
				(
					NEW.[name] Is Not Null And
					OLD.[name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([year])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'year',
			CONVERT(nvarchar(4000), OLD.[year], 0),
			CONVERT(nvarchar(4000), NEW.[year], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[year] <>
					OLD.[year]
				) Or
			
				(
					NEW.[year] Is Null And
					OLD.[year] Is Not Null
				) Or
				(
					NEW.[year] Is Not Null And
					OLD.[year] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([time_type])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'time_type',
			CONVERT(nvarchar(4000), OLD.[time_type], 0),
			CONVERT(nvarchar(4000), NEW.[time_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[time_type] <>
					OLD.[time_type]
				) Or
			
				(
					NEW.[time_type] Is Null And
					OLD.[time_type] Is Not Null
				) Or
				(
					NEW.[time_type] Is Not Null And
					OLD.[time_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([sex])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'sex',
			CONVERT(nvarchar(4000), OLD.[sex], 0),
			CONVERT(nvarchar(4000), NEW.[sex], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[sex] <>
					OLD.[sex]
				) Or
			
				(
					NEW.[sex] Is Null And
					OLD.[sex] Is Not Null
				) Or
				(
					NEW.[sex] Is Not Null And
					OLD.[sex] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([key])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'key',
			CONVERT(nvarchar(4000), OLD.[key], 0),
			CONVERT(nvarchar(4000), NEW.[key], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[key] <>
					OLD.[key]
				) Or
			
				(
					NEW.[key] Is Null And
					OLD.[key] Is Not Null
				) Or
				(
					NEW.[key] Is Not Null And
					OLD.[key] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([active])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'active',
			CONVERT(nvarchar(4000), OLD.[active], 0),
			CONVERT(nvarchar(4000), NEW.[active], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[active] <>
					OLD.[active]
				) Or
			
				(
					NEW.[active] Is Null And
					OLD.[active] Is Not Null
				) Or
				(
					NEW.[active] Is Not Null And
					OLD.[active] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([start_date])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'start_date',
			CONVERT(nvarchar(4000), OLD.[start_date], 121),
			CONVERT(nvarchar(4000), NEW.[start_date], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[start_date] <>
					OLD.[start_date]
				) Or
			
				(
					NEW.[start_date] Is Null And
					OLD.[start_date] Is Not Null
				) Or
				(
					NEW.[start_date] Is Not Null And
					OLD.[start_date] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([end_date])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'end_date',
			CONVERT(nvarchar(4000), OLD.[end_date], 121),
			CONVERT(nvarchar(4000), NEW.[end_date], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[end_date] <>
					OLD.[end_date]
				) Or
			
				(
					NEW.[end_date] Is Null And
					OLD.[end_date] Is Not Null
				) Or
				(
					NEW.[end_date] Is Not Null And
					OLD.[end_date] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([cost])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'cost',
			CONVERT(nvarchar(4000), OLD.[cost], 0),
			CONVERT(nvarchar(4000), NEW.[cost], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[cost] <>
					OLD.[cost]
				) Or
			
				(
					NEW.[cost] Is Null And
					OLD.[cost] Is Not Null
				) Or
				(
					NEW.[cost] Is Not Null And
					OLD.[cost] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_club_membership_type '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_club_membership_type Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_membership_type]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_club_membership_type]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_club_membership_type has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_club_membership_type cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_club_membership_type]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_club_membership_type]
	PRINT 'Trigger dropped: tr_d_AUDIT_club_membership_type '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_club_membership_type] for Table [dbo].[club_membership_type]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_club_membership_type] for Table [dbo].[club_membership_type]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_membership_type]
ON [dbo].[club_membership_type]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_membership_type]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_membership_type]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_membership_type',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), OLD.[name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[name] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'year',
		CONVERT(nvarchar(4000), OLD.[year], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[year] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'time_type',
		CONVERT(nvarchar(4000), OLD.[time_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[time_type] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'sex',
		CONVERT(nvarchar(4000), OLD.[sex], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[sex] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'key',
		CONVERT(nvarchar(4000), OLD.[key], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[key] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), OLD.[active], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[active] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'start_date',
		CONVERT(nvarchar(4000), OLD.[start_date], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[start_date] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'end_date',
		CONVERT(nvarchar(4000), OLD.[end_date], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[end_date] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'cost',
		CONVERT(nvarchar(4000), OLD.[cost], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[cost] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_club_membership_type '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_club_membership_type Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_membership_type]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_club_membership_type]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_club_membership_type has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_club_membership_type cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[club_person]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_club_person]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_club_person]
   PRINT 'Trigger dropped: tr_i_AUDIT_club_person'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_club_person] for Table [dbo].[club_person]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_club_person] for Table [dbo].[club_person]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_person]
ON [dbo].[club_person]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_person]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_person]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_person',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'key',
		CONVERT(nvarchar(4000), NEW.[key], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[key] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'sex',
		CONVERT(nvarchar(4000), NEW.[sex], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[sex] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), NEW.[active], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[active] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'forename',
		CONVERT(nvarchar(4000), NEW.[forename], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[forename] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'surname',
		CONVERT(nvarchar(4000), NEW.[surname], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[surname] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'dob',
		CONVERT(nvarchar(4000), NEW.[dob], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[dob] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'phone',
		CONVERT(nvarchar(4000), NEW.[phone], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[phone] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'mobile_no',
		CONVERT(nvarchar(4000), NEW.[mobile_no], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[mobile_no] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'email',
		CONVERT(nvarchar(4000), NEW.[email], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[email] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'alergies',
		CONVERT(nvarchar(4000), NEW.[alergies], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[alergies] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'alergies_details',
		CONVERT(nvarchar(4000), NEW.[alergies_details], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[alergies_details] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'comments',
		CONVERT(nvarchar(4000), NEW.[comments], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[comments] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'player_profile',
		CONVERT(nvarchar(4000), NEW.[player_profile], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[player_profile] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_number',
		CONVERT(nvarchar(4000), NEW.[address_number], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[address_number] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_street',
		CONVERT(nvarchar(4000), NEW.[address_street], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[address_street] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_town',
		CONVERT(nvarchar(4000), NEW.[address_town], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[address_town] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_county',
		CONVERT(nvarchar(4000), NEW.[address_county], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[address_county] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_country',
		CONVERT(nvarchar(4000), NEW.[address_country], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[address_country] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_post_code',
		CONVERT(nvarchar(4000), NEW.[address_post_code], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[address_post_code] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_xlng_coord',
		CONVERT(nvarchar(4000), NEW.[address_xlng_coord], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[address_xlng_coord] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_ylat_coord',
		CONVERT(nvarchar(4000), NEW.[address_ylat_coord], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[address_ylat_coord] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'title',
		CONVERT(nvarchar(4000), NEW.[title], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[title] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_club_person'
Else PRINT 'Trigger Failed: tr_i_AUDIT_club_person Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_person]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_club_person]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_club_person has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_club_person cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_club_person]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_club_person]
	PRINT 'Trigger dropped: tr_u_AUDIT_club_person '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_club_person] for Table [dbo].[club_person]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_club_person] for Table [dbo].[club_person]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_person]
ON [dbo].[club_person]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_person]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_person]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_person',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([key])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'key',
			CONVERT(nvarchar(4000), OLD.[key], 0),
			CONVERT(nvarchar(4000), NEW.[key], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[key] <>
					OLD.[key]
				) Or
			
				(
					NEW.[key] Is Null And
					OLD.[key] Is Not Null
				) Or
				(
					NEW.[key] Is Not Null And
					OLD.[key] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([sex])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'sex',
			CONVERT(nvarchar(4000), OLD.[sex], 0),
			CONVERT(nvarchar(4000), NEW.[sex], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[sex] <>
					OLD.[sex]
				) Or
			
				(
					NEW.[sex] Is Null And
					OLD.[sex] Is Not Null
				) Or
				(
					NEW.[sex] Is Not Null And
					OLD.[sex] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([active])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'active',
			CONVERT(nvarchar(4000), OLD.[active], 0),
			CONVERT(nvarchar(4000), NEW.[active], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[active] <>
					OLD.[active]
				) Or
			
				(
					NEW.[active] Is Null And
					OLD.[active] Is Not Null
				) Or
				(
					NEW.[active] Is Not Null And
					OLD.[active] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([forename])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'forename',
			CONVERT(nvarchar(4000), OLD.[forename], 0),
			CONVERT(nvarchar(4000), NEW.[forename], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[forename] <>
					OLD.[forename]
				) Or
			
				(
					NEW.[forename] Is Null And
					OLD.[forename] Is Not Null
				) Or
				(
					NEW.[forename] Is Not Null And
					OLD.[forename] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([surname])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'surname',
			CONVERT(nvarchar(4000), OLD.[surname], 0),
			CONVERT(nvarchar(4000), NEW.[surname], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[surname] <>
					OLD.[surname]
				) Or
			
				(
					NEW.[surname] Is Null And
					OLD.[surname] Is Not Null
				) Or
				(
					NEW.[surname] Is Not Null And
					OLD.[surname] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([dob])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'dob',
			CONVERT(nvarchar(4000), OLD.[dob], 121),
			CONVERT(nvarchar(4000), NEW.[dob], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[dob] <>
					OLD.[dob]
				) Or
			
				(
					NEW.[dob] Is Null And
					OLD.[dob] Is Not Null
				) Or
				(
					NEW.[dob] Is Not Null And
					OLD.[dob] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([phone])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'phone',
			CONVERT(nvarchar(4000), OLD.[phone], 0),
			CONVERT(nvarchar(4000), NEW.[phone], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[phone] <>
					OLD.[phone]
				) Or
			
				(
					NEW.[phone] Is Null And
					OLD.[phone] Is Not Null
				) Or
				(
					NEW.[phone] Is Not Null And
					OLD.[phone] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([mobile_no])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'mobile_no',
			CONVERT(nvarchar(4000), OLD.[mobile_no], 0),
			CONVERT(nvarchar(4000), NEW.[mobile_no], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[mobile_no] <>
					OLD.[mobile_no]
				) Or
			
				(
					NEW.[mobile_no] Is Null And
					OLD.[mobile_no] Is Not Null
				) Or
				(
					NEW.[mobile_no] Is Not Null And
					OLD.[mobile_no] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([email])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'email',
			CONVERT(nvarchar(4000), OLD.[email], 0),
			CONVERT(nvarchar(4000), NEW.[email], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[email] <>
					OLD.[email]
				) Or
			
				(
					NEW.[email] Is Null And
					OLD.[email] Is Not Null
				) Or
				(
					NEW.[email] Is Not Null And
					OLD.[email] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([alergies])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'alergies',
			CONVERT(nvarchar(4000), OLD.[alergies], 0),
			CONVERT(nvarchar(4000), NEW.[alergies], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[alergies] <>
					OLD.[alergies]
				) Or
			
				(
					NEW.[alergies] Is Null And
					OLD.[alergies] Is Not Null
				) Or
				(
					NEW.[alergies] Is Not Null And
					OLD.[alergies] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([alergies_details])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'alergies_details',
			CONVERT(nvarchar(4000), OLD.[alergies_details], 0),
			CONVERT(nvarchar(4000), NEW.[alergies_details], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[alergies_details] <>
					OLD.[alergies_details]
				) Or
			
				(
					NEW.[alergies_details] Is Null And
					OLD.[alergies_details] Is Not Null
				) Or
				(
					NEW.[alergies_details] Is Not Null And
					OLD.[alergies_details] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([comments])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'comments',
			CONVERT(nvarchar(4000), OLD.[comments], 0),
			CONVERT(nvarchar(4000), NEW.[comments], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[comments] <>
					OLD.[comments]
				) Or
			
				(
					NEW.[comments] Is Null And
					OLD.[comments] Is Not Null
				) Or
				(
					NEW.[comments] Is Not Null And
					OLD.[comments] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([player_profile])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'player_profile',
			CONVERT(nvarchar(4000), OLD.[player_profile], 0),
			CONVERT(nvarchar(4000), NEW.[player_profile], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[player_profile] <>
					OLD.[player_profile]
				) Or
			
				(
					NEW.[player_profile] Is Null And
					OLD.[player_profile] Is Not Null
				) Or
				(
					NEW.[player_profile] Is Not Null And
					OLD.[player_profile] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([address_number])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'address_number',
			CONVERT(nvarchar(4000), OLD.[address_number], 0),
			CONVERT(nvarchar(4000), NEW.[address_number], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[address_number] <>
					OLD.[address_number]
				) Or
			
				(
					NEW.[address_number] Is Null And
					OLD.[address_number] Is Not Null
				) Or
				(
					NEW.[address_number] Is Not Null And
					OLD.[address_number] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([address_street])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'address_street',
			CONVERT(nvarchar(4000), OLD.[address_street], 0),
			CONVERT(nvarchar(4000), NEW.[address_street], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[address_street] <>
					OLD.[address_street]
				) Or
			
				(
					NEW.[address_street] Is Null And
					OLD.[address_street] Is Not Null
				) Or
				(
					NEW.[address_street] Is Not Null And
					OLD.[address_street] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([address_town])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'address_town',
			CONVERT(nvarchar(4000), OLD.[address_town], 0),
			CONVERT(nvarchar(4000), NEW.[address_town], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[address_town] <>
					OLD.[address_town]
				) Or
			
				(
					NEW.[address_town] Is Null And
					OLD.[address_town] Is Not Null
				) Or
				(
					NEW.[address_town] Is Not Null And
					OLD.[address_town] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([address_county])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'address_county',
			CONVERT(nvarchar(4000), OLD.[address_county], 0),
			CONVERT(nvarchar(4000), NEW.[address_county], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[address_county] <>
					OLD.[address_county]
				) Or
			
				(
					NEW.[address_county] Is Null And
					OLD.[address_county] Is Not Null
				) Or
				(
					NEW.[address_county] Is Not Null And
					OLD.[address_county] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([address_country])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'address_country',
			CONVERT(nvarchar(4000), OLD.[address_country], 0),
			CONVERT(nvarchar(4000), NEW.[address_country], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[address_country] <>
					OLD.[address_country]
				) Or
			
				(
					NEW.[address_country] Is Null And
					OLD.[address_country] Is Not Null
				) Or
				(
					NEW.[address_country] Is Not Null And
					OLD.[address_country] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([address_post_code])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'address_post_code',
			CONVERT(nvarchar(4000), OLD.[address_post_code], 0),
			CONVERT(nvarchar(4000), NEW.[address_post_code], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[address_post_code] <>
					OLD.[address_post_code]
				) Or
			
				(
					NEW.[address_post_code] Is Null And
					OLD.[address_post_code] Is Not Null
				) Or
				(
					NEW.[address_post_code] Is Not Null And
					OLD.[address_post_code] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([address_xlng_coord])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'address_xlng_coord',
			CONVERT(nvarchar(4000), OLD.[address_xlng_coord], 0),
			CONVERT(nvarchar(4000), NEW.[address_xlng_coord], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[address_xlng_coord] <>
					OLD.[address_xlng_coord]
				) Or
			
				(
					NEW.[address_xlng_coord] Is Null And
					OLD.[address_xlng_coord] Is Not Null
				) Or
				(
					NEW.[address_xlng_coord] Is Not Null And
					OLD.[address_xlng_coord] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([address_ylat_coord])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'address_ylat_coord',
			CONVERT(nvarchar(4000), OLD.[address_ylat_coord], 0),
			CONVERT(nvarchar(4000), NEW.[address_ylat_coord], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[address_ylat_coord] <>
					OLD.[address_ylat_coord]
				) Or
			
				(
					NEW.[address_ylat_coord] Is Null And
					OLD.[address_ylat_coord] Is Not Null
				) Or
				(
					NEW.[address_ylat_coord] Is Not Null And
					OLD.[address_ylat_coord] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([title])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'title',
			CONVERT(nvarchar(4000), OLD.[title], 0),
			CONVERT(nvarchar(4000), NEW.[title], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[title] <>
					OLD.[title]
				) Or
			
				(
					NEW.[title] Is Null And
					OLD.[title] Is Not Null
				) Or
				(
					NEW.[title] Is Not Null And
					OLD.[title] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_club_person '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_club_person Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_person]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_club_person]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_club_person has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_club_person cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_club_person]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_club_person]
	PRINT 'Trigger dropped: tr_d_AUDIT_club_person '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_club_person] for Table [dbo].[club_person]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_club_person] for Table [dbo].[club_person]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_person]
ON [dbo].[club_person]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_person]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_person]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_person',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'key',
		CONVERT(nvarchar(4000), OLD.[key], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[key] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'sex',
		CONVERT(nvarchar(4000), OLD.[sex], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[sex] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), OLD.[active], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[active] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'forename',
		CONVERT(nvarchar(4000), OLD.[forename], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[forename] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'surname',
		CONVERT(nvarchar(4000), OLD.[surname], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[surname] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'dob',
		CONVERT(nvarchar(4000), OLD.[dob], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[dob] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'phone',
		CONVERT(nvarchar(4000), OLD.[phone], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[phone] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'mobile_no',
		CONVERT(nvarchar(4000), OLD.[mobile_no], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[mobile_no] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'email',
		CONVERT(nvarchar(4000), OLD.[email], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[email] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'alergies',
		CONVERT(nvarchar(4000), OLD.[alergies], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[alergies] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'alergies_details',
		CONVERT(nvarchar(4000), OLD.[alergies_details], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[alergies_details] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'comments',
		CONVERT(nvarchar(4000), OLD.[comments], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[comments] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'player_profile',
		CONVERT(nvarchar(4000), OLD.[player_profile], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[player_profile] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_number',
		CONVERT(nvarchar(4000), OLD.[address_number], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[address_number] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_street',
		CONVERT(nvarchar(4000), OLD.[address_street], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[address_street] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_town',
		CONVERT(nvarchar(4000), OLD.[address_town], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[address_town] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_county',
		CONVERT(nvarchar(4000), OLD.[address_county], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[address_county] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_country',
		CONVERT(nvarchar(4000), OLD.[address_country], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[address_country] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_post_code',
		CONVERT(nvarchar(4000), OLD.[address_post_code], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[address_post_code] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_xlng_coord',
		CONVERT(nvarchar(4000), OLD.[address_xlng_coord], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[address_xlng_coord] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_ylat_coord',
		CONVERT(nvarchar(4000), OLD.[address_ylat_coord], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[address_ylat_coord] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'title',
		CONVERT(nvarchar(4000), OLD.[title], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[title] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_club_person '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_club_person Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_person]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_club_person]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_club_person has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_club_person cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[club_person_guardian]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_club_person_guardian]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_club_person_guardian]
   PRINT 'Trigger dropped: tr_i_AUDIT_club_person_guardian'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_club_person_guardian] for Table [dbo].[club_person_guardian]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_club_person_guardian] for Table [dbo].[club_person_guardian]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_person_guardian]
ON [dbo].[club_person_guardian]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_person_guardian]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_person_guardian]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_person_guardian',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'person',
		CONVERT(nvarchar(4000), NEW.[person], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[person] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'guardian',
		CONVERT(nvarchar(4000), NEW.[guardian], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[guardian] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_club_person_guardian'
Else PRINT 'Trigger Failed: tr_i_AUDIT_club_person_guardian Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_person_guardian]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_club_person_guardian]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_club_person_guardian has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_club_person_guardian cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_club_person_guardian]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_club_person_guardian]
	PRINT 'Trigger dropped: tr_u_AUDIT_club_person_guardian '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_club_person_guardian] for Table [dbo].[club_person_guardian]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_club_person_guardian] for Table [dbo].[club_person_guardian]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_person_guardian]
ON [dbo].[club_person_guardian]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_person_guardian]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:04
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_person_guardian]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_person_guardian',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([person])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'person',
			CONVERT(nvarchar(4000), OLD.[person], 0),
			CONVERT(nvarchar(4000), NEW.[person], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[person] <>
					OLD.[person]
				) Or
			
				(
					NEW.[person] Is Null And
					OLD.[person] Is Not Null
				) Or
				(
					NEW.[person] Is Not Null And
					OLD.[person] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([guardian])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'guardian',
			CONVERT(nvarchar(4000), OLD.[guardian], 0),
			CONVERT(nvarchar(4000), NEW.[guardian], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[guardian] <>
					OLD.[guardian]
				) Or
			
				(
					NEW.[guardian] Is Null And
					OLD.[guardian] Is Not Null
				) Or
				(
					NEW.[guardian] Is Not Null And
					OLD.[guardian] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_club_person_guardian '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_club_person_guardian Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_person_guardian]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_club_person_guardian]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_club_person_guardian has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_club_person_guardian cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_club_person_guardian]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_club_person_guardian]
	PRINT 'Trigger dropped: tr_d_AUDIT_club_person_guardian '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_club_person_guardian] for Table [dbo].[club_person_guardian]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_club_person_guardian] for Table [dbo].[club_person_guardian]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_person_guardian]
ON [dbo].[club_person_guardian]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_person_guardian]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_person_guardian]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_person_guardian',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'person',
		CONVERT(nvarchar(4000), OLD.[person], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[person] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'guardian',
		CONVERT(nvarchar(4000), OLD.[guardian], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[guardian] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_club_person_guardian '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_club_person_guardian Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_person_guardian]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_club_person_guardian]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_club_person_guardian has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_club_person_guardian cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[club_person_membership_type]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_club_person_membership_type]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_club_person_membership_type]
   PRINT 'Trigger dropped: tr_i_AUDIT_club_person_membership_type'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_club_person_membership_type] for Table [dbo].[club_person_membership_type]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_club_person_membership_type] for Table [dbo].[club_person_membership_type]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_person_membership_type]
ON [dbo].[club_person_membership_type]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_person_membership_type]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_person_membership_type]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_person_membership_type',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'date',
		CONVERT(nvarchar(4000), NEW.[date], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[date] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), NEW.[active], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[active] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'person',
		CONVERT(nvarchar(4000), NEW.[person], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[person] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'membership_type',
		CONVERT(nvarchar(4000), NEW.[membership_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[membership_type] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_club_person_membership_type'
Else PRINT 'Trigger Failed: tr_i_AUDIT_club_person_membership_type Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_person_membership_type]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_club_person_membership_type]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_club_person_membership_type has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_club_person_membership_type cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_club_person_membership_type]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_club_person_membership_type]
	PRINT 'Trigger dropped: tr_u_AUDIT_club_person_membership_type '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_club_person_membership_type] for Table [dbo].[club_person_membership_type]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_club_person_membership_type] for Table [dbo].[club_person_membership_type]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_person_membership_type]
ON [dbo].[club_person_membership_type]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_person_membership_type]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_person_membership_type]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_person_membership_type',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([date])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'date',
			CONVERT(nvarchar(4000), OLD.[date], 121),
			CONVERT(nvarchar(4000), NEW.[date], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[date] <>
					OLD.[date]
				) Or
			
				(
					NEW.[date] Is Null And
					OLD.[date] Is Not Null
				) Or
				(
					NEW.[date] Is Not Null And
					OLD.[date] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([active])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'active',
			CONVERT(nvarchar(4000), OLD.[active], 0),
			CONVERT(nvarchar(4000), NEW.[active], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[active] <>
					OLD.[active]
				) Or
			
				(
					NEW.[active] Is Null And
					OLD.[active] Is Not Null
				) Or
				(
					NEW.[active] Is Not Null And
					OLD.[active] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([person])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'person',
			CONVERT(nvarchar(4000), OLD.[person], 0),
			CONVERT(nvarchar(4000), NEW.[person], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[person] <>
					OLD.[person]
				) Or
			
				(
					NEW.[person] Is Null And
					OLD.[person] Is Not Null
				) Or
				(
					NEW.[person] Is Not Null And
					OLD.[person] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([membership_type])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'membership_type',
			CONVERT(nvarchar(4000), OLD.[membership_type], 0),
			CONVERT(nvarchar(4000), NEW.[membership_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[membership_type] <>
					OLD.[membership_type]
				) Or
			
				(
					NEW.[membership_type] Is Null And
					OLD.[membership_type] Is Not Null
				) Or
				(
					NEW.[membership_type] Is Not Null And
					OLD.[membership_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_club_person_membership_type '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_club_person_membership_type Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_person_membership_type]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_club_person_membership_type]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_club_person_membership_type has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_club_person_membership_type cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_club_person_membership_type]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_club_person_membership_type]
	PRINT 'Trigger dropped: tr_d_AUDIT_club_person_membership_type '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_club_person_membership_type] for Table [dbo].[club_person_membership_type]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_club_person_membership_type] for Table [dbo].[club_person_membership_type]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_person_membership_type]
ON [dbo].[club_person_membership_type]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_person_membership_type]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_person_membership_type]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_person_membership_type',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'date',
		CONVERT(nvarchar(4000), OLD.[date], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[date] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), OLD.[active], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[active] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'person',
		CONVERT(nvarchar(4000), OLD.[person], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[person] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'membership_type',
		CONVERT(nvarchar(4000), OLD.[membership_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[membership_type] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_club_person_membership_type '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_club_person_membership_type Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_person_membership_type]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_club_person_membership_type]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_club_person_membership_type has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_club_person_membership_type cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[club_person_qualification]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_club_person_qualification]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_club_person_qualification]
   PRINT 'Trigger dropped: tr_i_AUDIT_club_person_qualification'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_club_person_qualification] for Table [dbo].[club_person_qualification]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_club_person_qualification] for Table [dbo].[club_person_qualification]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_person_qualification]
ON [dbo].[club_person_qualification]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_person_qualification]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_person_qualification]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_person_qualification',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'date_taken',
		CONVERT(nvarchar(4000), NEW.[date_taken], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[date_taken] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), NEW.[active], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[active] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'result',
		CONVERT(nvarchar(4000), NEW.[result], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[result] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'person',
		CONVERT(nvarchar(4000), NEW.[person], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[person] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'qualification',
		CONVERT(nvarchar(4000), NEW.[qualification], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[qualification] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_club_person_qualification'
Else PRINT 'Trigger Failed: tr_i_AUDIT_club_person_qualification Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_person_qualification]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_club_person_qualification]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_club_person_qualification has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_club_person_qualification cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_club_person_qualification]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_club_person_qualification]
	PRINT 'Trigger dropped: tr_u_AUDIT_club_person_qualification '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_club_person_qualification] for Table [dbo].[club_person_qualification]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_club_person_qualification] for Table [dbo].[club_person_qualification]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_person_qualification]
ON [dbo].[club_person_qualification]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_person_qualification]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_person_qualification]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_person_qualification',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([date_taken])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'date_taken',
			CONVERT(nvarchar(4000), OLD.[date_taken], 121),
			CONVERT(nvarchar(4000), NEW.[date_taken], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[date_taken] <>
					OLD.[date_taken]
				) Or
			
				(
					NEW.[date_taken] Is Null And
					OLD.[date_taken] Is Not Null
				) Or
				(
					NEW.[date_taken] Is Not Null And
					OLD.[date_taken] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([active])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'active',
			CONVERT(nvarchar(4000), OLD.[active], 0),
			CONVERT(nvarchar(4000), NEW.[active], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[active] <>
					OLD.[active]
				) Or
			
				(
					NEW.[active] Is Null And
					OLD.[active] Is Not Null
				) Or
				(
					NEW.[active] Is Not Null And
					OLD.[active] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([result])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'result',
			CONVERT(nvarchar(4000), OLD.[result], 0),
			CONVERT(nvarchar(4000), NEW.[result], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[result] <>
					OLD.[result]
				) Or
			
				(
					NEW.[result] Is Null And
					OLD.[result] Is Not Null
				) Or
				(
					NEW.[result] Is Not Null And
					OLD.[result] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([person])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'person',
			CONVERT(nvarchar(4000), OLD.[person], 0),
			CONVERT(nvarchar(4000), NEW.[person], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[person] <>
					OLD.[person]
				) Or
			
				(
					NEW.[person] Is Null And
					OLD.[person] Is Not Null
				) Or
				(
					NEW.[person] Is Not Null And
					OLD.[person] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([qualification])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'qualification',
			CONVERT(nvarchar(4000), OLD.[qualification], 0),
			CONVERT(nvarchar(4000), NEW.[qualification], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[qualification] <>
					OLD.[qualification]
				) Or
			
				(
					NEW.[qualification] Is Null And
					OLD.[qualification] Is Not Null
				) Or
				(
					NEW.[qualification] Is Not Null And
					OLD.[qualification] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_club_person_qualification '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_club_person_qualification Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_person_qualification]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_club_person_qualification]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_club_person_qualification has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_club_person_qualification cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_club_person_qualification]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_club_person_qualification]
	PRINT 'Trigger dropped: tr_d_AUDIT_club_person_qualification '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_club_person_qualification] for Table [dbo].[club_person_qualification]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_club_person_qualification] for Table [dbo].[club_person_qualification]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_person_qualification]
ON [dbo].[club_person_qualification]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_person_qualification]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_person_qualification]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_person_qualification',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'date_taken',
		CONVERT(nvarchar(4000), OLD.[date_taken], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[date_taken] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), OLD.[active], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[active] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'result',
		CONVERT(nvarchar(4000), OLD.[result], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[result] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'person',
		CONVERT(nvarchar(4000), OLD.[person], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[person] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'qualification',
		CONVERT(nvarchar(4000), OLD.[qualification], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[qualification] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_club_person_qualification '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_club_person_qualification Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_person_qualification]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_club_person_qualification]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_club_person_qualification has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_club_person_qualification cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[club_person_title]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_club_person_title]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_club_person_title]
   PRINT 'Trigger dropped: tr_i_AUDIT_club_person_title'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_club_person_title] for Table [dbo].[club_person_title]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_club_person_title] for Table [dbo].[club_person_title]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_person_title]
ON [dbo].[club_person_title]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_person_title]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_person_title]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_person_title',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), NEW.[description], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[description] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), NEW.[active], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[active] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_club_person_title'
Else PRINT 'Trigger Failed: tr_i_AUDIT_club_person_title Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_person_title]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_club_person_title]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_club_person_title has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_club_person_title cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_club_person_title]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_club_person_title]
	PRINT 'Trigger dropped: tr_u_AUDIT_club_person_title '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_club_person_title] for Table [dbo].[club_person_title]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_club_person_title] for Table [dbo].[club_person_title]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_person_title]
ON [dbo].[club_person_title]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_person_title]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_person_title]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_person_title',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([description])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'description',
			CONVERT(nvarchar(4000), OLD.[description], 0),
			CONVERT(nvarchar(4000), NEW.[description], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[description] <>
					OLD.[description]
				) Or
			
				(
					NEW.[description] Is Null And
					OLD.[description] Is Not Null
				) Or
				(
					NEW.[description] Is Not Null And
					OLD.[description] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([active])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'active',
			CONVERT(nvarchar(4000), OLD.[active], 0),
			CONVERT(nvarchar(4000), NEW.[active], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[active] <>
					OLD.[active]
				) Or
			
				(
					NEW.[active] Is Null And
					OLD.[active] Is Not Null
				) Or
				(
					NEW.[active] Is Not Null And
					OLD.[active] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_club_person_title '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_club_person_title Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_person_title]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_club_person_title]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_club_person_title has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_club_person_title cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_club_person_title]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_club_person_title]
	PRINT 'Trigger dropped: tr_d_AUDIT_club_person_title '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_club_person_title] for Table [dbo].[club_person_title]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_club_person_title] for Table [dbo].[club_person_title]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_person_title]
ON [dbo].[club_person_title]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_person_title]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_person_title]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_person_title',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), OLD.[description], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[description] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), OLD.[active], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[active] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_club_person_title '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_club_person_title Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_person_title]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_club_person_title]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_club_person_title has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_club_person_title cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[club_qualification]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_club_qualification]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_club_qualification]
   PRINT 'Trigger dropped: tr_i_AUDIT_club_qualification'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_club_qualification] for Table [dbo].[club_qualification]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_club_qualification] for Table [dbo].[club_qualification]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_qualification]
ON [dbo].[club_qualification]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_qualification]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_qualification]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_qualification',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), NEW.[name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[name] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), NEW.[active], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[active] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), NEW.[description], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[description] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'cost',
		CONVERT(nvarchar(4000), NEW.[cost], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[cost] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_club_qualification'
Else PRINT 'Trigger Failed: tr_i_AUDIT_club_qualification Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_qualification]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_club_qualification]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_club_qualification has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_club_qualification cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_club_qualification]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_club_qualification]
	PRINT 'Trigger dropped: tr_u_AUDIT_club_qualification '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_club_qualification] for Table [dbo].[club_qualification]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_club_qualification] for Table [dbo].[club_qualification]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_qualification]
ON [dbo].[club_qualification]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_qualification]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_qualification]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_qualification',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([name])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'name',
			CONVERT(nvarchar(4000), OLD.[name], 0),
			CONVERT(nvarchar(4000), NEW.[name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[name] <>
					OLD.[name]
				) Or
			
				(
					NEW.[name] Is Null And
					OLD.[name] Is Not Null
				) Or
				(
					NEW.[name] Is Not Null And
					OLD.[name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([active])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'active',
			CONVERT(nvarchar(4000), OLD.[active], 0),
			CONVERT(nvarchar(4000), NEW.[active], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[active] <>
					OLD.[active]
				) Or
			
				(
					NEW.[active] Is Null And
					OLD.[active] Is Not Null
				) Or
				(
					NEW.[active] Is Not Null And
					OLD.[active] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([description])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'description',
			CONVERT(nvarchar(4000), OLD.[description], 0),
			CONVERT(nvarchar(4000), NEW.[description], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[description] <>
					OLD.[description]
				) Or
			
				(
					NEW.[description] Is Null And
					OLD.[description] Is Not Null
				) Or
				(
					NEW.[description] Is Not Null And
					OLD.[description] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([cost])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'cost',
			CONVERT(nvarchar(4000), OLD.[cost], 0),
			CONVERT(nvarchar(4000), NEW.[cost], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[cost] <>
					OLD.[cost]
				) Or
			
				(
					NEW.[cost] Is Null And
					OLD.[cost] Is Not Null
				) Or
				(
					NEW.[cost] Is Not Null And
					OLD.[cost] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_club_qualification '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_club_qualification Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_qualification]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_club_qualification]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_club_qualification has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_club_qualification cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_club_qualification]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_club_qualification]
	PRINT 'Trigger dropped: tr_d_AUDIT_club_qualification '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_club_qualification] for Table [dbo].[club_qualification]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_club_qualification] for Table [dbo].[club_qualification]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_qualification]
ON [dbo].[club_qualification]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_qualification]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_qualification]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_qualification',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), OLD.[name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[name] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), OLD.[active], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[active] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), OLD.[description], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[description] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'cost',
		CONVERT(nvarchar(4000), OLD.[cost], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[cost] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_club_qualification '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_club_qualification Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_qualification]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_club_qualification]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_club_qualification has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_club_qualification cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[club_team]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_club_team]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_club_team]
   PRINT 'Trigger dropped: tr_i_AUDIT_club_team'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_club_team] for Table [dbo].[club_team]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_club_team] for Table [dbo].[club_team]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_team]
ON [dbo].[club_team]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_team]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_team]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_team',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), NEW.[active], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[active] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), NEW.[name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[name] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'time_type',
		CONVERT(nvarchar(4000), NEW.[time_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[time_type] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'sex',
		CONVERT(nvarchar(4000), NEW.[sex], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[sex] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'year',
		CONVERT(nvarchar(4000), NEW.[year], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[year] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'start_date',
		CONVERT(nvarchar(4000), NEW.[start_date], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[start_date] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'end_date',
		CONVERT(nvarchar(4000), NEW.[end_date], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[end_date] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_club_team'
Else PRINT 'Trigger Failed: tr_i_AUDIT_club_team Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_team]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_club_team]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_club_team has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_club_team cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_club_team]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_club_team]
	PRINT 'Trigger dropped: tr_u_AUDIT_club_team '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_club_team] for Table [dbo].[club_team]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_club_team] for Table [dbo].[club_team]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_team]
ON [dbo].[club_team]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_team]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_team]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_team',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([active])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'active',
			CONVERT(nvarchar(4000), OLD.[active], 0),
			CONVERT(nvarchar(4000), NEW.[active], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[active] <>
					OLD.[active]
				) Or
			
				(
					NEW.[active] Is Null And
					OLD.[active] Is Not Null
				) Or
				(
					NEW.[active] Is Not Null And
					OLD.[active] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([name])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'name',
			CONVERT(nvarchar(4000), OLD.[name], 0),
			CONVERT(nvarchar(4000), NEW.[name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[name] <>
					OLD.[name]
				) Or
			
				(
					NEW.[name] Is Null And
					OLD.[name] Is Not Null
				) Or
				(
					NEW.[name] Is Not Null And
					OLD.[name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([time_type])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'time_type',
			CONVERT(nvarchar(4000), OLD.[time_type], 0),
			CONVERT(nvarchar(4000), NEW.[time_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[time_type] <>
					OLD.[time_type]
				) Or
			
				(
					NEW.[time_type] Is Null And
					OLD.[time_type] Is Not Null
				) Or
				(
					NEW.[time_type] Is Not Null And
					OLD.[time_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([sex])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'sex',
			CONVERT(nvarchar(4000), OLD.[sex], 0),
			CONVERT(nvarchar(4000), NEW.[sex], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[sex] <>
					OLD.[sex]
				) Or
			
				(
					NEW.[sex] Is Null And
					OLD.[sex] Is Not Null
				) Or
				(
					NEW.[sex] Is Not Null And
					OLD.[sex] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([year])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'year',
			CONVERT(nvarchar(4000), OLD.[year], 0),
			CONVERT(nvarchar(4000), NEW.[year], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[year] <>
					OLD.[year]
				) Or
			
				(
					NEW.[year] Is Null And
					OLD.[year] Is Not Null
				) Or
				(
					NEW.[year] Is Not Null And
					OLD.[year] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([start_date])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'start_date',
			CONVERT(nvarchar(4000), OLD.[start_date], 121),
			CONVERT(nvarchar(4000), NEW.[start_date], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[start_date] <>
					OLD.[start_date]
				) Or
			
				(
					NEW.[start_date] Is Null And
					OLD.[start_date] Is Not Null
				) Or
				(
					NEW.[start_date] Is Not Null And
					OLD.[start_date] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([end_date])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'end_date',
			CONVERT(nvarchar(4000), OLD.[end_date], 121),
			CONVERT(nvarchar(4000), NEW.[end_date], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[end_date] <>
					OLD.[end_date]
				) Or
			
				(
					NEW.[end_date] Is Null And
					OLD.[end_date] Is Not Null
				) Or
				(
					NEW.[end_date] Is Not Null And
					OLD.[end_date] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_club_team '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_club_team Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_team]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_club_team]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_club_team has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_club_team cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_club_team]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_club_team]
	PRINT 'Trigger dropped: tr_d_AUDIT_club_team '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_club_team] for Table [dbo].[club_team]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_club_team] for Table [dbo].[club_team]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_team]
ON [dbo].[club_team]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_team]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_team]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_team',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), OLD.[active], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[active] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), OLD.[name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[name] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'time_type',
		CONVERT(nvarchar(4000), OLD.[time_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[time_type] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'sex',
		CONVERT(nvarchar(4000), OLD.[sex], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[sex] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'year',
		CONVERT(nvarchar(4000), OLD.[year], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[year] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'start_date',
		CONVERT(nvarchar(4000), OLD.[start_date], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[start_date] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'end_date',
		CONVERT(nvarchar(4000), OLD.[end_date], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[end_date] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_club_team '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_club_team Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_team]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_club_team]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_club_team has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_club_team cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[club_team_admin]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_club_team_admin]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_club_team_admin]
   PRINT 'Trigger dropped: tr_i_AUDIT_club_team_admin'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_club_team_admin] for Table [dbo].[club_team_admin]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_club_team_admin] for Table [dbo].[club_team_admin]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_team_admin]
ON [dbo].[club_team_admin]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_team_admin]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_team_admin]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_team_admin',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'user',
		CONVERT(nvarchar(4000), NEW.[user], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[user] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'team',
		CONVERT(nvarchar(4000), NEW.[team], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[team] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_club_team_admin'
Else PRINT 'Trigger Failed: tr_i_AUDIT_club_team_admin Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_team_admin]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_club_team_admin]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_club_team_admin has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_club_team_admin cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_club_team_admin]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_club_team_admin]
	PRINT 'Trigger dropped: tr_u_AUDIT_club_team_admin '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_club_team_admin] for Table [dbo].[club_team_admin]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_club_team_admin] for Table [dbo].[club_team_admin]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_team_admin]
ON [dbo].[club_team_admin]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_team_admin]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_team_admin]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_team_admin',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([user])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'user',
			CONVERT(nvarchar(4000), OLD.[user], 0),
			CONVERT(nvarchar(4000), NEW.[user], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[user] <>
					OLD.[user]
				) Or
			
				(
					NEW.[user] Is Null And
					OLD.[user] Is Not Null
				) Or
				(
					NEW.[user] Is Not Null And
					OLD.[user] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([team])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'team',
			CONVERT(nvarchar(4000), OLD.[team], 0),
			CONVERT(nvarchar(4000), NEW.[team], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[team] <>
					OLD.[team]
				) Or
			
				(
					NEW.[team] Is Null And
					OLD.[team] Is Not Null
				) Or
				(
					NEW.[team] Is Not Null And
					OLD.[team] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_club_team_admin '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_club_team_admin Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_team_admin]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_club_team_admin]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_club_team_admin has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_club_team_admin cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_club_team_admin]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_club_team_admin]
	PRINT 'Trigger dropped: tr_d_AUDIT_club_team_admin '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_club_team_admin] for Table [dbo].[club_team_admin]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_club_team_admin] for Table [dbo].[club_team_admin]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_team_admin]
ON [dbo].[club_team_admin]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_team_admin]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_team_admin]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_team_admin',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'user',
		CONVERT(nvarchar(4000), OLD.[user], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[user] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'team',
		CONVERT(nvarchar(4000), OLD.[team], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[team] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_club_team_admin '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_club_team_admin Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_team_admin]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_club_team_admin]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_club_team_admin has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_club_team_admin cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[club_team_member]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_club_team_member]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_club_team_member]
   PRINT 'Trigger dropped: tr_i_AUDIT_club_team_member'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_club_team_member] for Table [dbo].[club_team_member]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_club_team_member] for Table [dbo].[club_team_member]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_team_member]
ON [dbo].[club_team_member]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_team_member]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_team_member]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_team_member',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'person',
		CONVERT(nvarchar(4000), NEW.[person], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[person] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'team',
		CONVERT(nvarchar(4000), NEW.[team], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[team] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'team_member_type',
		CONVERT(nvarchar(4000), NEW.[team_member_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[team_member_type] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_club_team_member'
Else PRINT 'Trigger Failed: tr_i_AUDIT_club_team_member Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_team_member]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_club_team_member]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_club_team_member has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_club_team_member cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_club_team_member]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_club_team_member]
	PRINT 'Trigger dropped: tr_u_AUDIT_club_team_member '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_club_team_member] for Table [dbo].[club_team_member]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_club_team_member] for Table [dbo].[club_team_member]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_team_member]
ON [dbo].[club_team_member]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_team_member]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_team_member]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_team_member',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([person])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'person',
			CONVERT(nvarchar(4000), OLD.[person], 0),
			CONVERT(nvarchar(4000), NEW.[person], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[person] <>
					OLD.[person]
				) Or
			
				(
					NEW.[person] Is Null And
					OLD.[person] Is Not Null
				) Or
				(
					NEW.[person] Is Not Null And
					OLD.[person] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([team])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'team',
			CONVERT(nvarchar(4000), OLD.[team], 0),
			CONVERT(nvarchar(4000), NEW.[team], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[team] <>
					OLD.[team]
				) Or
			
				(
					NEW.[team] Is Null And
					OLD.[team] Is Not Null
				) Or
				(
					NEW.[team] Is Not Null And
					OLD.[team] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([team_member_type])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'team_member_type',
			CONVERT(nvarchar(4000), OLD.[team_member_type], 0),
			CONVERT(nvarchar(4000), NEW.[team_member_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[team_member_type] <>
					OLD.[team_member_type]
				) Or
			
				(
					NEW.[team_member_type] Is Null And
					OLD.[team_member_type] Is Not Null
				) Or
				(
					NEW.[team_member_type] Is Not Null And
					OLD.[team_member_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_club_team_member '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_club_team_member Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_team_member]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_club_team_member]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_club_team_member has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_club_team_member cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_club_team_member]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_club_team_member]
	PRINT 'Trigger dropped: tr_d_AUDIT_club_team_member '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_club_team_member] for Table [dbo].[club_team_member]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_club_team_member] for Table [dbo].[club_team_member]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_team_member]
ON [dbo].[club_team_member]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_team_member]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_team_member]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_team_member',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'person',
		CONVERT(nvarchar(4000), OLD.[person], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[person] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'team',
		CONVERT(nvarchar(4000), OLD.[team], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[team] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'team_member_type',
		CONVERT(nvarchar(4000), OLD.[team_member_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[team_member_type] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_club_team_member '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_club_team_member Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_team_member]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_club_team_member]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_club_team_member has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_club_team_member cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[club_team_member_type]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_club_team_member_type]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_club_team_member_type]
   PRINT 'Trigger dropped: tr_i_AUDIT_club_team_member_type'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_club_team_member_type] for Table [dbo].[club_team_member_type]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_club_team_member_type] for Table [dbo].[club_team_member_type]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_team_member_type]
ON [dbo].[club_team_member_type]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_team_member_type]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_team_member_type]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_team_member_type',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), NEW.[active], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[active] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'admin_member',
		CONVERT(nvarchar(4000), NEW.[admin_member], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[admin_member] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'playing_member',
		CONVERT(nvarchar(4000), NEW.[playing_member], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[playing_member] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'default',
		CONVERT(nvarchar(4000), NEW.[default], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[default] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), NEW.[name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[name] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), NEW.[description], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[description] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_club_team_member_type'
Else PRINT 'Trigger Failed: tr_i_AUDIT_club_team_member_type Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_team_member_type]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_club_team_member_type]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_club_team_member_type has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_club_team_member_type cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_club_team_member_type]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_club_team_member_type]
	PRINT 'Trigger dropped: tr_u_AUDIT_club_team_member_type '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_club_team_member_type] for Table [dbo].[club_team_member_type]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_club_team_member_type] for Table [dbo].[club_team_member_type]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_team_member_type]
ON [dbo].[club_team_member_type]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_team_member_type]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_team_member_type]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_team_member_type',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([active])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'active',
			CONVERT(nvarchar(4000), OLD.[active], 0),
			CONVERT(nvarchar(4000), NEW.[active], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[active] <>
					OLD.[active]
				) Or
			
				(
					NEW.[active] Is Null And
					OLD.[active] Is Not Null
				) Or
				(
					NEW.[active] Is Not Null And
					OLD.[active] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([admin_member])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'admin_member',
			CONVERT(nvarchar(4000), OLD.[admin_member], 0),
			CONVERT(nvarchar(4000), NEW.[admin_member], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[admin_member] <>
					OLD.[admin_member]
				) Or
			
				(
					NEW.[admin_member] Is Null And
					OLD.[admin_member] Is Not Null
				) Or
				(
					NEW.[admin_member] Is Not Null And
					OLD.[admin_member] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([playing_member])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'playing_member',
			CONVERT(nvarchar(4000), OLD.[playing_member], 0),
			CONVERT(nvarchar(4000), NEW.[playing_member], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[playing_member] <>
					OLD.[playing_member]
				) Or
			
				(
					NEW.[playing_member] Is Null And
					OLD.[playing_member] Is Not Null
				) Or
				(
					NEW.[playing_member] Is Not Null And
					OLD.[playing_member] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([default])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'default',
			CONVERT(nvarchar(4000), OLD.[default], 0),
			CONVERT(nvarchar(4000), NEW.[default], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[default] <>
					OLD.[default]
				) Or
			
				(
					NEW.[default] Is Null And
					OLD.[default] Is Not Null
				) Or
				(
					NEW.[default] Is Not Null And
					OLD.[default] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([name])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'name',
			CONVERT(nvarchar(4000), OLD.[name], 0),
			CONVERT(nvarchar(4000), NEW.[name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[name] <>
					OLD.[name]
				) Or
			
				(
					NEW.[name] Is Null And
					OLD.[name] Is Not Null
				) Or
				(
					NEW.[name] Is Not Null And
					OLD.[name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([description])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'description',
			CONVERT(nvarchar(4000), OLD.[description], 0),
			CONVERT(nvarchar(4000), NEW.[description], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[description] <>
					OLD.[description]
				) Or
			
				(
					NEW.[description] Is Null And
					OLD.[description] Is Not Null
				) Or
				(
					NEW.[description] Is Not Null And
					OLD.[description] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_club_team_member_type '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_club_team_member_type Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_team_member_type]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_club_team_member_type]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_club_team_member_type has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_club_team_member_type cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_club_team_member_type]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_club_team_member_type]
	PRINT 'Trigger dropped: tr_d_AUDIT_club_team_member_type '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_club_team_member_type] for Table [dbo].[club_team_member_type]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_club_team_member_type] for Table [dbo].[club_team_member_type]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_team_member_type]
ON [dbo].[club_team_member_type]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_team_member_type]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_team_member_type]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_team_member_type',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), OLD.[active], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[active] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'admin_member',
		CONVERT(nvarchar(4000), OLD.[admin_member], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[admin_member] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'playing_member',
		CONVERT(nvarchar(4000), OLD.[playing_member], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[playing_member] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'default',
		CONVERT(nvarchar(4000), OLD.[default], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[default] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), OLD.[name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[name] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), OLD.[description], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[description] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_club_team_member_type '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_club_team_member_type Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[club_team_member_type]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_club_team_member_type]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_club_team_member_type has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_club_team_member_type cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[core_application_session]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_core_application_session]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_core_application_session]
   PRINT 'Trigger dropped: tr_i_AUDIT_core_application_session'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_core_application_session] for Table [dbo].[core_application_session]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_core_application_session] for Table [dbo].[core_application_session]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_application_session]
ON [dbo].[core_application_session]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_application_session]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_application_session]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_application_session',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'date',
		CONVERT(nvarchar(4000), NEW.[date], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[date] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'session_id',
		CONVERT(nvarchar(4000), NEW.[session_id], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[session_id] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'host',
		CONVERT(nvarchar(4000), NEW.[host], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[host] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'id',
		CONVERT(nvarchar(4000), NEW.[id], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[id] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'process_id',
		CONVERT(nvarchar(4000), NEW.[process_id], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[process_id] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'end_date',
		CONVERT(nvarchar(4000), NEW.[end_date], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[end_date] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'user',
		CONVERT(nvarchar(4000), NEW.[user], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[user] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_core_application_session'
Else PRINT 'Trigger Failed: tr_i_AUDIT_core_application_session Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_application_session]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_core_application_session]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_core_application_session has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_core_application_session cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_core_application_session]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_core_application_session]
	PRINT 'Trigger dropped: tr_u_AUDIT_core_application_session '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_core_application_session] for Table [dbo].[core_application_session]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_core_application_session] for Table [dbo].[core_application_session]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_application_session]
ON [dbo].[core_application_session]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_application_session]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_application_session]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_application_session',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([date])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'date',
			CONVERT(nvarchar(4000), OLD.[date], 121),
			CONVERT(nvarchar(4000), NEW.[date], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[date] <>
					OLD.[date]
				) Or
			
				(
					NEW.[date] Is Null And
					OLD.[date] Is Not Null
				) Or
				(
					NEW.[date] Is Not Null And
					OLD.[date] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([session_id])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'session_id',
			CONVERT(nvarchar(4000), OLD.[session_id], 0),
			CONVERT(nvarchar(4000), NEW.[session_id], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[session_id] <>
					OLD.[session_id]
				) Or
			
				(
					NEW.[session_id] Is Null And
					OLD.[session_id] Is Not Null
				) Or
				(
					NEW.[session_id] Is Not Null And
					OLD.[session_id] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([host])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'host',
			CONVERT(nvarchar(4000), OLD.[host], 0),
			CONVERT(nvarchar(4000), NEW.[host], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[host] <>
					OLD.[host]
				) Or
			
				(
					NEW.[host] Is Null And
					OLD.[host] Is Not Null
				) Or
				(
					NEW.[host] Is Not Null And
					OLD.[host] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([id])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'id',
			CONVERT(nvarchar(4000), OLD.[id], 0),
			CONVERT(nvarchar(4000), NEW.[id], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[id] <>
					OLD.[id]
				) Or
			
				(
					NEW.[id] Is Null And
					OLD.[id] Is Not Null
				) Or
				(
					NEW.[id] Is Not Null And
					OLD.[id] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([process_id])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'process_id',
			CONVERT(nvarchar(4000), OLD.[process_id], 0),
			CONVERT(nvarchar(4000), NEW.[process_id], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[process_id] <>
					OLD.[process_id]
				) Or
			
				(
					NEW.[process_id] Is Null And
					OLD.[process_id] Is Not Null
				) Or
				(
					NEW.[process_id] Is Not Null And
					OLD.[process_id] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([end_date])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'end_date',
			CONVERT(nvarchar(4000), OLD.[end_date], 121),
			CONVERT(nvarchar(4000), NEW.[end_date], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[end_date] <>
					OLD.[end_date]
				) Or
			
				(
					NEW.[end_date] Is Null And
					OLD.[end_date] Is Not Null
				) Or
				(
					NEW.[end_date] Is Not Null And
					OLD.[end_date] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([user])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'user',
			CONVERT(nvarchar(4000), OLD.[user], 0),
			CONVERT(nvarchar(4000), NEW.[user], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[user] <>
					OLD.[user]
				) Or
			
				(
					NEW.[user] Is Null And
					OLD.[user] Is Not Null
				) Or
				(
					NEW.[user] Is Not Null And
					OLD.[user] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_core_application_session '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_core_application_session Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_application_session]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_core_application_session]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_core_application_session has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_core_application_session cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_core_application_session]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_core_application_session]
	PRINT 'Trigger dropped: tr_d_AUDIT_core_application_session '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_core_application_session] for Table [dbo].[core_application_session]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_core_application_session] for Table [dbo].[core_application_session]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_application_session]
ON [dbo].[core_application_session]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_application_session]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_application_session]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_application_session',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'date',
		CONVERT(nvarchar(4000), OLD.[date], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[date] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'session_id',
		CONVERT(nvarchar(4000), OLD.[session_id], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[session_id] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'host',
		CONVERT(nvarchar(4000), OLD.[host], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[host] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'id',
		CONVERT(nvarchar(4000), OLD.[id], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[id] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'process_id',
		CONVERT(nvarchar(4000), OLD.[process_id], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[process_id] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'end_date',
		CONVERT(nvarchar(4000), OLD.[end_date], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[end_date] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'user',
		CONVERT(nvarchar(4000), OLD.[user], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[user] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_core_application_session '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_core_application_session Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_application_session]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_core_application_session]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_core_application_session has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_core_application_session cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[core_category_access]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_core_category_access]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_core_category_access]
   PRINT 'Trigger dropped: tr_i_AUDIT_core_category_access'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_core_category_access] for Table [dbo].[core_category_access]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_core_category_access] for Table [dbo].[core_category_access]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_category_access]
ON [dbo].[core_category_access]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_category_access]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_category_access]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_category_access',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'category',
		CONVERT(nvarchar(4000), NEW.[category], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[category] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'access',
		CONVERT(nvarchar(4000), NEW.[access], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[access] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'role',
		CONVERT(nvarchar(4000), NEW.[role], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[role] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_core_category_access'
Else PRINT 'Trigger Failed: tr_i_AUDIT_core_category_access Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_category_access]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_core_category_access]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_core_category_access has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_core_category_access cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_core_category_access]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_core_category_access]
	PRINT 'Trigger dropped: tr_u_AUDIT_core_category_access '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_core_category_access] for Table [dbo].[core_category_access]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_core_category_access] for Table [dbo].[core_category_access]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_category_access]
ON [dbo].[core_category_access]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_category_access]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_category_access]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_category_access',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([category])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'category',
			CONVERT(nvarchar(4000), OLD.[category], 0),
			CONVERT(nvarchar(4000), NEW.[category], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[category] <>
					OLD.[category]
				) Or
			
				(
					NEW.[category] Is Null And
					OLD.[category] Is Not Null
				) Or
				(
					NEW.[category] Is Not Null And
					OLD.[category] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([access])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'access',
			CONVERT(nvarchar(4000), OLD.[access], 0),
			CONVERT(nvarchar(4000), NEW.[access], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[access] <>
					OLD.[access]
				) Or
			
				(
					NEW.[access] Is Null And
					OLD.[access] Is Not Null
				) Or
				(
					NEW.[access] Is Not Null And
					OLD.[access] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([role])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'role',
			CONVERT(nvarchar(4000), OLD.[role], 0),
			CONVERT(nvarchar(4000), NEW.[role], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[role] <>
					OLD.[role]
				) Or
			
				(
					NEW.[role] Is Null And
					OLD.[role] Is Not Null
				) Or
				(
					NEW.[role] Is Not Null And
					OLD.[role] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_core_category_access '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_core_category_access Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_category_access]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_core_category_access]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_core_category_access has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_core_category_access cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_core_category_access]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_core_category_access]
	PRINT 'Trigger dropped: tr_d_AUDIT_core_category_access '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_core_category_access] for Table [dbo].[core_category_access]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_core_category_access] for Table [dbo].[core_category_access]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_category_access]
ON [dbo].[core_category_access]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_category_access]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_category_access]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_category_access',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'category',
		CONVERT(nvarchar(4000), OLD.[category], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[category] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'access',
		CONVERT(nvarchar(4000), OLD.[access], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[access] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'role',
		CONVERT(nvarchar(4000), OLD.[role], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[role] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_core_category_access '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_core_category_access Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_category_access]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_core_category_access]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_core_category_access has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_core_category_access cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[core_class_access]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_core_class_access]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_core_class_access]
   PRINT 'Trigger dropped: tr_i_AUDIT_core_class_access'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_core_class_access] for Table [dbo].[core_class_access]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_core_class_access] for Table [dbo].[core_class_access]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_class_access]
ON [dbo].[core_class_access]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_class_access]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_class_access]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_class_access',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'class_type',
		CONVERT(nvarchar(4000), NEW.[class_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[class_type] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'property',
		CONVERT(nvarchar(4000), NEW.[property], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[property] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'value',
		CONVERT(nvarchar(4000), NEW.[value], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[value] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'access',
		CONVERT(nvarchar(4000), NEW.[access], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[access] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'role',
		CONVERT(nvarchar(4000), NEW.[role], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[role] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_core_class_access'
Else PRINT 'Trigger Failed: tr_i_AUDIT_core_class_access Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_class_access]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_core_class_access]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_core_class_access has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_core_class_access cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_core_class_access]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_core_class_access]
	PRINT 'Trigger dropped: tr_u_AUDIT_core_class_access '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_core_class_access] for Table [dbo].[core_class_access]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_core_class_access] for Table [dbo].[core_class_access]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_class_access]
ON [dbo].[core_class_access]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_class_access]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_class_access]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_class_access',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([class_type])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'class_type',
			CONVERT(nvarchar(4000), OLD.[class_type], 0),
			CONVERT(nvarchar(4000), NEW.[class_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[class_type] <>
					OLD.[class_type]
				) Or
			
				(
					NEW.[class_type] Is Null And
					OLD.[class_type] Is Not Null
				) Or
				(
					NEW.[class_type] Is Not Null And
					OLD.[class_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([property])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'property',
			CONVERT(nvarchar(4000), OLD.[property], 0),
			CONVERT(nvarchar(4000), NEW.[property], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[property] <>
					OLD.[property]
				) Or
			
				(
					NEW.[property] Is Null And
					OLD.[property] Is Not Null
				) Or
				(
					NEW.[property] Is Not Null And
					OLD.[property] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([value])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'value',
			CONVERT(nvarchar(4000), OLD.[value], 0),
			CONVERT(nvarchar(4000), NEW.[value], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[value] <>
					OLD.[value]
				) Or
			
				(
					NEW.[value] Is Null And
					OLD.[value] Is Not Null
				) Or
				(
					NEW.[value] Is Not Null And
					OLD.[value] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([access])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'access',
			CONVERT(nvarchar(4000), OLD.[access], 0),
			CONVERT(nvarchar(4000), NEW.[access], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[access] <>
					OLD.[access]
				) Or
			
				(
					NEW.[access] Is Null And
					OLD.[access] Is Not Null
				) Or
				(
					NEW.[access] Is Not Null And
					OLD.[access] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([role])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'role',
			CONVERT(nvarchar(4000), OLD.[role], 0),
			CONVERT(nvarchar(4000), NEW.[role], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[role] <>
					OLD.[role]
				) Or
			
				(
					NEW.[role] Is Null And
					OLD.[role] Is Not Null
				) Or
				(
					NEW.[role] Is Not Null And
					OLD.[role] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_core_class_access '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_core_class_access Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_class_access]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_core_class_access]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_core_class_access has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_core_class_access cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_core_class_access]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_core_class_access]
	PRINT 'Trigger dropped: tr_d_AUDIT_core_class_access '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_core_class_access] for Table [dbo].[core_class_access]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_core_class_access] for Table [dbo].[core_class_access]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_class_access]
ON [dbo].[core_class_access]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_class_access]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_class_access]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_class_access',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'class_type',
		CONVERT(nvarchar(4000), OLD.[class_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[class_type] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'property',
		CONVERT(nvarchar(4000), OLD.[property], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[property] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'value',
		CONVERT(nvarchar(4000), OLD.[value], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[value] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'access',
		CONVERT(nvarchar(4000), OLD.[access], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[access] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'role',
		CONVERT(nvarchar(4000), OLD.[role], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[role] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_core_class_access '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_core_class_access Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_class_access]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_core_class_access]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_core_class_access has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_core_class_access cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[core_class_command]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_core_class_command]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_core_class_command]
   PRINT 'Trigger dropped: tr_i_AUDIT_core_class_command'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_core_class_command] for Table [dbo].[core_class_command]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_core_class_command] for Table [dbo].[core_class_command]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_class_command]
ON [dbo].[core_class_command]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_class_command]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_class_command]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_class_command',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'class_type',
		CONVERT(nvarchar(4000), NEW.[class_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[class_type] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'command_index',
		CONVERT(nvarchar(4000), NEW.[command_index], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[command_index] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'point',
		CONVERT(nvarchar(4000), NEW.[point], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[point] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'order',
		CONVERT(nvarchar(4000), NEW.[order], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[order] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'command_type',
		CONVERT(nvarchar(4000), NEW.[command_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[command_type] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'init_data',
		CONVERT(nvarchar(4000), NEW.[init_data], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[init_data] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'property',
		CONVERT(nvarchar(4000), NEW.[property], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[property] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_core_class_command'
Else PRINT 'Trigger Failed: tr_i_AUDIT_core_class_command Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_class_command]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_core_class_command]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_core_class_command has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_core_class_command cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_core_class_command]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_core_class_command]
	PRINT 'Trigger dropped: tr_u_AUDIT_core_class_command '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_core_class_command] for Table [dbo].[core_class_command]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_core_class_command] for Table [dbo].[core_class_command]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_class_command]
ON [dbo].[core_class_command]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_class_command]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_class_command]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_class_command',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([class_type])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'class_type',
			CONVERT(nvarchar(4000), OLD.[class_type], 0),
			CONVERT(nvarchar(4000), NEW.[class_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[class_type] <>
					OLD.[class_type]
				) Or
			
				(
					NEW.[class_type] Is Null And
					OLD.[class_type] Is Not Null
				) Or
				(
					NEW.[class_type] Is Not Null And
					OLD.[class_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([command_index])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'command_index',
			CONVERT(nvarchar(4000), OLD.[command_index], 0),
			CONVERT(nvarchar(4000), NEW.[command_index], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[command_index] <>
					OLD.[command_index]
				) Or
			
				(
					NEW.[command_index] Is Null And
					OLD.[command_index] Is Not Null
				) Or
				(
					NEW.[command_index] Is Not Null And
					OLD.[command_index] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([point])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'point',
			CONVERT(nvarchar(4000), OLD.[point], 0),
			CONVERT(nvarchar(4000), NEW.[point], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[point] <>
					OLD.[point]
				) Or
			
				(
					NEW.[point] Is Null And
					OLD.[point] Is Not Null
				) Or
				(
					NEW.[point] Is Not Null And
					OLD.[point] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([order])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'order',
			CONVERT(nvarchar(4000), OLD.[order], 0),
			CONVERT(nvarchar(4000), NEW.[order], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[order] <>
					OLD.[order]
				) Or
			
				(
					NEW.[order] Is Null And
					OLD.[order] Is Not Null
				) Or
				(
					NEW.[order] Is Not Null And
					OLD.[order] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([command_type])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'command_type',
			CONVERT(nvarchar(4000), OLD.[command_type], 0),
			CONVERT(nvarchar(4000), NEW.[command_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[command_type] <>
					OLD.[command_type]
				) Or
			
				(
					NEW.[command_type] Is Null And
					OLD.[command_type] Is Not Null
				) Or
				(
					NEW.[command_type] Is Not Null And
					OLD.[command_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([init_data])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'init_data',
			CONVERT(nvarchar(4000), OLD.[init_data], 0),
			CONVERT(nvarchar(4000), NEW.[init_data], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[init_data] <>
					OLD.[init_data]
				) Or
			
				(
					NEW.[init_data] Is Null And
					OLD.[init_data] Is Not Null
				) Or
				(
					NEW.[init_data] Is Not Null And
					OLD.[init_data] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([property])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'property',
			CONVERT(nvarchar(4000), OLD.[property], 0),
			CONVERT(nvarchar(4000), NEW.[property], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[property] <>
					OLD.[property]
				) Or
			
				(
					NEW.[property] Is Null And
					OLD.[property] Is Not Null
				) Or
				(
					NEW.[property] Is Not Null And
					OLD.[property] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_core_class_command '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_core_class_command Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_class_command]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_core_class_command]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_core_class_command has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_core_class_command cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_core_class_command]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_core_class_command]
	PRINT 'Trigger dropped: tr_d_AUDIT_core_class_command '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_core_class_command] for Table [dbo].[core_class_command]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_core_class_command] for Table [dbo].[core_class_command]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_class_command]
ON [dbo].[core_class_command]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_class_command]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_class_command]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_class_command',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'class_type',
		CONVERT(nvarchar(4000), OLD.[class_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[class_type] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'command_index',
		CONVERT(nvarchar(4000), OLD.[command_index], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[command_index] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'point',
		CONVERT(nvarchar(4000), OLD.[point], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[point] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'order',
		CONVERT(nvarchar(4000), OLD.[order], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[order] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'command_type',
		CONVERT(nvarchar(4000), OLD.[command_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[command_type] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'init_data',
		CONVERT(nvarchar(4000), OLD.[init_data], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[init_data] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'property',
		CONVERT(nvarchar(4000), OLD.[property], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[property] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_core_class_command '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_core_class_command Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_class_command]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_core_class_command]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_core_class_command has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_core_class_command cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[core_command]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_core_command]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_core_command]
   PRINT 'Trigger dropped: tr_i_AUDIT_core_command'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_core_command] for Table [dbo].[core_command]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_core_command] for Table [dbo].[core_command]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_command]
ON [dbo].[core_command]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_command]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_command]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_command',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'icon',
		dbo.AUDIT_fn_HexToStr(NEW.[icon]),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[icon] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), NEW.[description], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[description] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'concrete_command',
		CONVERT(nvarchar(4000), NEW.[concrete_command], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[concrete_command] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'init_data',
		CONVERT(nvarchar(4000), NEW.[init_data], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[init_data] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_core_command'
Else PRINT 'Trigger Failed: tr_i_AUDIT_core_command Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_command]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_core_command]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_core_command has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_core_command cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_core_command]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_core_command]
	PRINT 'Trigger dropped: tr_u_AUDIT_core_command '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_core_command] for Table [dbo].[core_command]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_core_command] for Table [dbo].[core_command]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_command]
ON [dbo].[core_command]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_command]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_command]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_command',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([icon])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'icon',
			dbo.AUDIT_fn_HexToStr(OLD.[icon]),
			dbo.AUDIT_fn_HexToStr(NEW.[icon]),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[icon] <>
					OLD.[icon]
				) Or
			
				(
					NEW.[icon] Is Null And
					OLD.[icon] Is Not Null
				) Or
				(
					NEW.[icon] Is Not Null And
					OLD.[icon] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([description])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'description',
			CONVERT(nvarchar(4000), OLD.[description], 0),
			CONVERT(nvarchar(4000), NEW.[description], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[description] <>
					OLD.[description]
				) Or
			
				(
					NEW.[description] Is Null And
					OLD.[description] Is Not Null
				) Or
				(
					NEW.[description] Is Not Null And
					OLD.[description] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([concrete_command])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'concrete_command',
			CONVERT(nvarchar(4000), OLD.[concrete_command], 0),
			CONVERT(nvarchar(4000), NEW.[concrete_command], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[concrete_command] <>
					OLD.[concrete_command]
				) Or
			
				(
					NEW.[concrete_command] Is Null And
					OLD.[concrete_command] Is Not Null
				) Or
				(
					NEW.[concrete_command] Is Not Null And
					OLD.[concrete_command] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([init_data])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'init_data',
			CONVERT(nvarchar(4000), OLD.[init_data], 0),
			CONVERT(nvarchar(4000), NEW.[init_data], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[init_data] <>
					OLD.[init_data]
				) Or
			
				(
					NEW.[init_data] Is Null And
					OLD.[init_data] Is Not Null
				) Or
				(
					NEW.[init_data] Is Not Null And
					OLD.[init_data] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_core_command '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_core_command Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_command]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_core_command]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_core_command has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_core_command cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_core_command]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_core_command]
	PRINT 'Trigger dropped: tr_d_AUDIT_core_command '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_core_command] for Table [dbo].[core_command]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_core_command] for Table [dbo].[core_command]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_command]
ON [dbo].[core_command]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_command]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:05
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_command]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_command',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'icon',
		dbo.AUDIT_fn_HexToStr(OLD.[icon]),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[icon] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), OLD.[description], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[description] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'concrete_command',
		CONVERT(nvarchar(4000), OLD.[concrete_command], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[concrete_command] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'init_data',
		CONVERT(nvarchar(4000), OLD.[init_data], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[init_data] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_core_command '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_core_command Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_command]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_core_command]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_core_command has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_core_command cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[core_criterion]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_core_criterion]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_core_criterion]
   PRINT 'Trigger dropped: tr_i_AUDIT_core_criterion'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_core_criterion] for Table [dbo].[core_criterion]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_core_criterion] for Table [dbo].[core_criterion]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_criterion]
ON [dbo].[core_criterion]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_criterion]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_criterion]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_criterion',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'type',
		CONVERT(nvarchar(4000), NEW.[type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[type] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'field_name',
		CONVERT(nvarchar(4000), NEW.[field_name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[field_name] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'caption',
		CONVERT(nvarchar(4000), NEW.[caption], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[caption] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'field_type',
		CONVERT(nvarchar(4000), NEW.[field_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[field_type] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'match_type',
		CONVERT(nvarchar(4000), NEW.[match_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[match_type] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'is_mandatory',
		CONVERT(nvarchar(4000), NEW.[is_mandatory], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[is_mandatory] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'is_visible',
		CONVERT(nvarchar(4000), NEW.[is_visible], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[is_visible] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'check_for_null',
		CONVERT(nvarchar(4000), NEW.[check_for_null], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[check_for_null] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'lookup_index',
		CONVERT(nvarchar(4000), NEW.[lookup_index], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[lookup_index] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'dictionary_name',
		CONVERT(nvarchar(4000), NEW.[dictionary_name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[dictionary_name] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'lookup_type',
		CONVERT(nvarchar(4000), NEW.[lookup_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[lookup_type] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'display_format',
		CONVERT(nvarchar(4000), NEW.[display_format], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[display_format] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'use_specified_value',
		CONVERT(nvarchar(4000), NEW.[use_specified_value], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[use_specified_value] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'lookup_property_name',
		CONVERT(nvarchar(4000), NEW.[lookup_property_name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[lookup_property_name] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'replacement_type',
		CONVERT(nvarchar(4000), NEW.[replacement_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[replacement_type] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'ascending',
		CONVERT(nvarchar(4000), NEW.[ascending], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[ascending] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'parent',
		CONVERT(nvarchar(4000), NEW.[parent], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[parent] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'search_spec',
		CONVERT(nvarchar(4000), NEW.[search_spec], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[search_spec] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_core_criterion'
Else PRINT 'Trigger Failed: tr_i_AUDIT_core_criterion Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_criterion]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_core_criterion]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_core_criterion has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_core_criterion cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_core_criterion]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_core_criterion]
	PRINT 'Trigger dropped: tr_u_AUDIT_core_criterion '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_core_criterion] for Table [dbo].[core_criterion]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_core_criterion] for Table [dbo].[core_criterion]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_criterion]
ON [dbo].[core_criterion]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_criterion]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_criterion]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_criterion',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([type])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'type',
			CONVERT(nvarchar(4000), OLD.[type], 0),
			CONVERT(nvarchar(4000), NEW.[type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[type] <>
					OLD.[type]
				) Or
			
				(
					NEW.[type] Is Null And
					OLD.[type] Is Not Null
				) Or
				(
					NEW.[type] Is Not Null And
					OLD.[type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([field_name])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'field_name',
			CONVERT(nvarchar(4000), OLD.[field_name], 0),
			CONVERT(nvarchar(4000), NEW.[field_name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[field_name] <>
					OLD.[field_name]
				) Or
			
				(
					NEW.[field_name] Is Null And
					OLD.[field_name] Is Not Null
				) Or
				(
					NEW.[field_name] Is Not Null And
					OLD.[field_name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([caption])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'caption',
			CONVERT(nvarchar(4000), OLD.[caption], 0),
			CONVERT(nvarchar(4000), NEW.[caption], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[caption] <>
					OLD.[caption]
				) Or
			
				(
					NEW.[caption] Is Null And
					OLD.[caption] Is Not Null
				) Or
				(
					NEW.[caption] Is Not Null And
					OLD.[caption] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([field_type])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'field_type',
			CONVERT(nvarchar(4000), OLD.[field_type], 0),
			CONVERT(nvarchar(4000), NEW.[field_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[field_type] <>
					OLD.[field_type]
				) Or
			
				(
					NEW.[field_type] Is Null And
					OLD.[field_type] Is Not Null
				) Or
				(
					NEW.[field_type] Is Not Null And
					OLD.[field_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([match_type])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'match_type',
			CONVERT(nvarchar(4000), OLD.[match_type], 0),
			CONVERT(nvarchar(4000), NEW.[match_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[match_type] <>
					OLD.[match_type]
				) Or
			
				(
					NEW.[match_type] Is Null And
					OLD.[match_type] Is Not Null
				) Or
				(
					NEW.[match_type] Is Not Null And
					OLD.[match_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([is_mandatory])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'is_mandatory',
			CONVERT(nvarchar(4000), OLD.[is_mandatory], 0),
			CONVERT(nvarchar(4000), NEW.[is_mandatory], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[is_mandatory] <>
					OLD.[is_mandatory]
				) Or
			
				(
					NEW.[is_mandatory] Is Null And
					OLD.[is_mandatory] Is Not Null
				) Or
				(
					NEW.[is_mandatory] Is Not Null And
					OLD.[is_mandatory] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([is_visible])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'is_visible',
			CONVERT(nvarchar(4000), OLD.[is_visible], 0),
			CONVERT(nvarchar(4000), NEW.[is_visible], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[is_visible] <>
					OLD.[is_visible]
				) Or
			
				(
					NEW.[is_visible] Is Null And
					OLD.[is_visible] Is Not Null
				) Or
				(
					NEW.[is_visible] Is Not Null And
					OLD.[is_visible] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([check_for_null])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'check_for_null',
			CONVERT(nvarchar(4000), OLD.[check_for_null], 0),
			CONVERT(nvarchar(4000), NEW.[check_for_null], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[check_for_null] <>
					OLD.[check_for_null]
				) Or
			
				(
					NEW.[check_for_null] Is Null And
					OLD.[check_for_null] Is Not Null
				) Or
				(
					NEW.[check_for_null] Is Not Null And
					OLD.[check_for_null] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([lookup_index])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'lookup_index',
			CONVERT(nvarchar(4000), OLD.[lookup_index], 0),
			CONVERT(nvarchar(4000), NEW.[lookup_index], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[lookup_index] <>
					OLD.[lookup_index]
				) Or
			
				(
					NEW.[lookup_index] Is Null And
					OLD.[lookup_index] Is Not Null
				) Or
				(
					NEW.[lookup_index] Is Not Null And
					OLD.[lookup_index] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([dictionary_name])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'dictionary_name',
			CONVERT(nvarchar(4000), OLD.[dictionary_name], 0),
			CONVERT(nvarchar(4000), NEW.[dictionary_name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[dictionary_name] <>
					OLD.[dictionary_name]
				) Or
			
				(
					NEW.[dictionary_name] Is Null And
					OLD.[dictionary_name] Is Not Null
				) Or
				(
					NEW.[dictionary_name] Is Not Null And
					OLD.[dictionary_name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([lookup_type])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'lookup_type',
			CONVERT(nvarchar(4000), OLD.[lookup_type], 0),
			CONVERT(nvarchar(4000), NEW.[lookup_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[lookup_type] <>
					OLD.[lookup_type]
				) Or
			
				(
					NEW.[lookup_type] Is Null And
					OLD.[lookup_type] Is Not Null
				) Or
				(
					NEW.[lookup_type] Is Not Null And
					OLD.[lookup_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([display_format])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'display_format',
			CONVERT(nvarchar(4000), OLD.[display_format], 0),
			CONVERT(nvarchar(4000), NEW.[display_format], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[display_format] <>
					OLD.[display_format]
				) Or
			
				(
					NEW.[display_format] Is Null And
					OLD.[display_format] Is Not Null
				) Or
				(
					NEW.[display_format] Is Not Null And
					OLD.[display_format] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([use_specified_value])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'use_specified_value',
			CONVERT(nvarchar(4000), OLD.[use_specified_value], 0),
			CONVERT(nvarchar(4000), NEW.[use_specified_value], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[use_specified_value] <>
					OLD.[use_specified_value]
				) Or
			
				(
					NEW.[use_specified_value] Is Null And
					OLD.[use_specified_value] Is Not Null
				) Or
				(
					NEW.[use_specified_value] Is Not Null And
					OLD.[use_specified_value] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([lookup_property_name])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'lookup_property_name',
			CONVERT(nvarchar(4000), OLD.[lookup_property_name], 0),
			CONVERT(nvarchar(4000), NEW.[lookup_property_name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[lookup_property_name] <>
					OLD.[lookup_property_name]
				) Or
			
				(
					NEW.[lookup_property_name] Is Null And
					OLD.[lookup_property_name] Is Not Null
				) Or
				(
					NEW.[lookup_property_name] Is Not Null And
					OLD.[lookup_property_name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([replacement_type])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'replacement_type',
			CONVERT(nvarchar(4000), OLD.[replacement_type], 0),
			CONVERT(nvarchar(4000), NEW.[replacement_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[replacement_type] <>
					OLD.[replacement_type]
				) Or
			
				(
					NEW.[replacement_type] Is Null And
					OLD.[replacement_type] Is Not Null
				) Or
				(
					NEW.[replacement_type] Is Not Null And
					OLD.[replacement_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([ascending])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'ascending',
			CONVERT(nvarchar(4000), OLD.[ascending], 0),
			CONVERT(nvarchar(4000), NEW.[ascending], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[ascending] <>
					OLD.[ascending]
				) Or
			
				(
					NEW.[ascending] Is Null And
					OLD.[ascending] Is Not Null
				) Or
				(
					NEW.[ascending] Is Not Null And
					OLD.[ascending] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([parent])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'parent',
			CONVERT(nvarchar(4000), OLD.[parent], 0),
			CONVERT(nvarchar(4000), NEW.[parent], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[parent] <>
					OLD.[parent]
				) Or
			
				(
					NEW.[parent] Is Null And
					OLD.[parent] Is Not Null
				) Or
				(
					NEW.[parent] Is Not Null And
					OLD.[parent] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([search_spec])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'search_spec',
			CONVERT(nvarchar(4000), OLD.[search_spec], 0),
			CONVERT(nvarchar(4000), NEW.[search_spec], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[search_spec] <>
					OLD.[search_spec]
				) Or
			
				(
					NEW.[search_spec] Is Null And
					OLD.[search_spec] Is Not Null
				) Or
				(
					NEW.[search_spec] Is Not Null And
					OLD.[search_spec] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_core_criterion '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_core_criterion Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_criterion]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_core_criterion]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_core_criterion has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_core_criterion cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_core_criterion]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_core_criterion]
	PRINT 'Trigger dropped: tr_d_AUDIT_core_criterion '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_core_criterion] for Table [dbo].[core_criterion]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_core_criterion] for Table [dbo].[core_criterion]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_criterion]
ON [dbo].[core_criterion]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_criterion]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_criterion]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_criterion',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'type',
		CONVERT(nvarchar(4000), OLD.[type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[type] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'field_name',
		CONVERT(nvarchar(4000), OLD.[field_name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[field_name] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'caption',
		CONVERT(nvarchar(4000), OLD.[caption], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[caption] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'field_type',
		CONVERT(nvarchar(4000), OLD.[field_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[field_type] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'match_type',
		CONVERT(nvarchar(4000), OLD.[match_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[match_type] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'is_mandatory',
		CONVERT(nvarchar(4000), OLD.[is_mandatory], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[is_mandatory] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'is_visible',
		CONVERT(nvarchar(4000), OLD.[is_visible], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[is_visible] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'check_for_null',
		CONVERT(nvarchar(4000), OLD.[check_for_null], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[check_for_null] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'lookup_index',
		CONVERT(nvarchar(4000), OLD.[lookup_index], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[lookup_index] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'dictionary_name',
		CONVERT(nvarchar(4000), OLD.[dictionary_name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[dictionary_name] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'lookup_type',
		CONVERT(nvarchar(4000), OLD.[lookup_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[lookup_type] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'display_format',
		CONVERT(nvarchar(4000), OLD.[display_format], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[display_format] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'use_specified_value',
		CONVERT(nvarchar(4000), OLD.[use_specified_value], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[use_specified_value] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'lookup_property_name',
		CONVERT(nvarchar(4000), OLD.[lookup_property_name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[lookup_property_name] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'replacement_type',
		CONVERT(nvarchar(4000), OLD.[replacement_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[replacement_type] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'ascending',
		CONVERT(nvarchar(4000), OLD.[ascending], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[ascending] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'parent',
		CONVERT(nvarchar(4000), OLD.[parent], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[parent] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'search_spec',
		CONVERT(nvarchar(4000), OLD.[search_spec], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[search_spec] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_core_criterion '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_core_criterion Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_criterion]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_core_criterion]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_core_criterion has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_core_criterion cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[core_display_format]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_core_display_format]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_core_display_format]
   PRINT 'Trigger dropped: tr_i_AUDIT_core_display_format'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_core_display_format] for Table [dbo].[core_display_format]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_core_display_format] for Table [dbo].[core_display_format]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_display_format]
ON [dbo].[core_display_format]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_display_format]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_display_format]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_display_format',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'class_type',
		CONVERT(nvarchar(4000), NEW.[class_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[class_type] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'display_name',
		CONVERT(nvarchar(4000), NEW.[display_name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[display_name] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'default_sort',
		CONVERT(nvarchar(4000), NEW.[default_sort], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[default_sort] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'summary_format',
		CONVERT(nvarchar(4000), NEW.[summary_format], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[summary_format] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'list_format',
		CONVERT(nvarchar(4000), NEW.[list_format], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[list_format] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'tabs',
		CONVERT(nvarchar(4000), NEW.[tabs], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[tabs] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_core_display_format'
Else PRINT 'Trigger Failed: tr_i_AUDIT_core_display_format Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_display_format]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_core_display_format]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_core_display_format has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_core_display_format cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_core_display_format]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_core_display_format]
	PRINT 'Trigger dropped: tr_u_AUDIT_core_display_format '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_core_display_format] for Table [dbo].[core_display_format]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_core_display_format] for Table [dbo].[core_display_format]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_display_format]
ON [dbo].[core_display_format]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_display_format]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_display_format]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_display_format',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([class_type])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'class_type',
			CONVERT(nvarchar(4000), OLD.[class_type], 0),
			CONVERT(nvarchar(4000), NEW.[class_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[class_type] <>
					OLD.[class_type]
				) Or
			
				(
					NEW.[class_type] Is Null And
					OLD.[class_type] Is Not Null
				) Or
				(
					NEW.[class_type] Is Not Null And
					OLD.[class_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([display_name])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'display_name',
			CONVERT(nvarchar(4000), OLD.[display_name], 0),
			CONVERT(nvarchar(4000), NEW.[display_name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[display_name] <>
					OLD.[display_name]
				) Or
			
				(
					NEW.[display_name] Is Null And
					OLD.[display_name] Is Not Null
				) Or
				(
					NEW.[display_name] Is Not Null And
					OLD.[display_name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([default_sort])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'default_sort',
			CONVERT(nvarchar(4000), OLD.[default_sort], 0),
			CONVERT(nvarchar(4000), NEW.[default_sort], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[default_sort] <>
					OLD.[default_sort]
				) Or
			
				(
					NEW.[default_sort] Is Null And
					OLD.[default_sort] Is Not Null
				) Or
				(
					NEW.[default_sort] Is Not Null And
					OLD.[default_sort] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([summary_format])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'summary_format',
			CONVERT(nvarchar(4000), OLD.[summary_format], 0),
			CONVERT(nvarchar(4000), NEW.[summary_format], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[summary_format] <>
					OLD.[summary_format]
				) Or
			
				(
					NEW.[summary_format] Is Null And
					OLD.[summary_format] Is Not Null
				) Or
				(
					NEW.[summary_format] Is Not Null And
					OLD.[summary_format] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([list_format])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'list_format',
			CONVERT(nvarchar(4000), OLD.[list_format], 0),
			CONVERT(nvarchar(4000), NEW.[list_format], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[list_format] <>
					OLD.[list_format]
				) Or
			
				(
					NEW.[list_format] Is Null And
					OLD.[list_format] Is Not Null
				) Or
				(
					NEW.[list_format] Is Not Null And
					OLD.[list_format] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([tabs])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'tabs',
			CONVERT(nvarchar(4000), OLD.[tabs], 0),
			CONVERT(nvarchar(4000), NEW.[tabs], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[tabs] <>
					OLD.[tabs]
				) Or
			
				(
					NEW.[tabs] Is Null And
					OLD.[tabs] Is Not Null
				) Or
				(
					NEW.[tabs] Is Not Null And
					OLD.[tabs] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_core_display_format '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_core_display_format Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_display_format]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_core_display_format]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_core_display_format has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_core_display_format cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_core_display_format]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_core_display_format]
	PRINT 'Trigger dropped: tr_d_AUDIT_core_display_format '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_core_display_format] for Table [dbo].[core_display_format]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_core_display_format] for Table [dbo].[core_display_format]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_display_format]
ON [dbo].[core_display_format]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_display_format]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_display_format]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_display_format',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'class_type',
		CONVERT(nvarchar(4000), OLD.[class_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[class_type] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'display_name',
		CONVERT(nvarchar(4000), OLD.[display_name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[display_name] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'default_sort',
		CONVERT(nvarchar(4000), OLD.[default_sort], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[default_sort] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'summary_format',
		CONVERT(nvarchar(4000), OLD.[summary_format], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[summary_format] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'list_format',
		CONVERT(nvarchar(4000), OLD.[list_format], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[list_format] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'tabs',
		CONVERT(nvarchar(4000), OLD.[tabs], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[tabs] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_core_display_format '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_core_display_format Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_display_format]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_core_display_format]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_core_display_format has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_core_display_format cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[core_field_access]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_core_field_access]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_core_field_access]
   PRINT 'Trigger dropped: tr_i_AUDIT_core_field_access'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_core_field_access] for Table [dbo].[core_field_access]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_core_field_access] for Table [dbo].[core_field_access]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_field_access]
ON [dbo].[core_field_access]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_field_access]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_field_access]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_field_access',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'access',
		CONVERT(nvarchar(4000), NEW.[access], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[access] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'field_name',
		CONVERT(nvarchar(4000), NEW.[field_name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[field_name] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_core_field_access'
Else PRINT 'Trigger Failed: tr_i_AUDIT_core_field_access Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_field_access]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_core_field_access]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_core_field_access has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_core_field_access cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_core_field_access]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_core_field_access]
	PRINT 'Trigger dropped: tr_u_AUDIT_core_field_access '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_core_field_access] for Table [dbo].[core_field_access]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_core_field_access] for Table [dbo].[core_field_access]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_field_access]
ON [dbo].[core_field_access]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_field_access]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_field_access]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_field_access',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([access])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'access',
			CONVERT(nvarchar(4000), OLD.[access], 0),
			CONVERT(nvarchar(4000), NEW.[access], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[access] <>
					OLD.[access]
				) Or
			
				(
					NEW.[access] Is Null And
					OLD.[access] Is Not Null
				) Or
				(
					NEW.[access] Is Not Null And
					OLD.[access] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([field_name])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'field_name',
			CONVERT(nvarchar(4000), OLD.[field_name], 0),
			CONVERT(nvarchar(4000), NEW.[field_name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[field_name] <>
					OLD.[field_name]
				) Or
			
				(
					NEW.[field_name] Is Null And
					OLD.[field_name] Is Not Null
				) Or
				(
					NEW.[field_name] Is Not Null And
					OLD.[field_name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_core_field_access '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_core_field_access Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_field_access]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_core_field_access]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_core_field_access has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_core_field_access cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_core_field_access]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_core_field_access]
	PRINT 'Trigger dropped: tr_d_AUDIT_core_field_access '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_core_field_access] for Table [dbo].[core_field_access]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_core_field_access] for Table [dbo].[core_field_access]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_field_access]
ON [dbo].[core_field_access]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_field_access]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_field_access]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_field_access',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'access',
		CONVERT(nvarchar(4000), OLD.[access], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[access] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'field_name',
		CONVERT(nvarchar(4000), OLD.[field_name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[field_name] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_core_field_access '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_core_field_access Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_field_access]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_core_field_access]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_core_field_access has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_core_field_access cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[core_field_access_roles]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_core_field_access_roles]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_core_field_access_roles]
   PRINT 'Trigger dropped: tr_i_AUDIT_core_field_access_roles'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_core_field_access_roles] for Table [dbo].[core_field_access_roles]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_core_field_access_roles] for Table [dbo].[core_field_access_roles]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_field_access_roles]
ON [dbo].[core_field_access_roles]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_field_access_roles]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_field_access_roles]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_field_access_roles',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[field_access]=N'''+replace(CONVERT(nvarchar(4000), NEW.[field_access], 0), '''', '''''')+'''', '[field_access] Is Null') + ' AND ' + IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), NEW.[role], 0), '''', '''''')+'''', '[role] Is Null')),
		'field_access',
		CONVERT(nvarchar(4000), NEW.[field_access], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[field_access], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[role], 0))
	FROM inserted NEW
	WHERE NEW.[field_access] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[field_access]=N'''+replace(CONVERT(nvarchar(4000), NEW.[field_access], 0), '''', '''''')+'''', '[field_access] Is Null') + ' AND ' + IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), NEW.[role], 0), '''', '''''')+'''', '[role] Is Null')),
		'role',
		CONVERT(nvarchar(4000), NEW.[role], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[field_access], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[role], 0))
	FROM inserted NEW
	WHERE NEW.[role] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_core_field_access_roles'
Else PRINT 'Trigger Failed: tr_i_AUDIT_core_field_access_roles Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_field_access_roles]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_core_field_access_roles]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_core_field_access_roles has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_core_field_access_roles cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_core_field_access_roles]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_core_field_access_roles]
	PRINT 'Trigger dropped: tr_u_AUDIT_core_field_access_roles '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_core_field_access_roles] for Table [dbo].[core_field_access_roles]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_core_field_access_roles] for Table [dbo].[core_field_access_roles]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_field_access_roles]
ON [dbo].[core_field_access_roles]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_field_access_roles]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_field_access_roles]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_field_access_roles',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([field_access])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1, KEY2
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[field_access]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[field_access], NEW.[field_access]), 0),'''' ,'''''')+'''', '[field_access] Is Null')+' AND '+IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[role], NEW.[role]), 0),'''' ,'''''')+'''', '[role] Is Null')),
		    'field_access',
			CONVERT(nvarchar(4000), OLD.[field_access], 0),
			CONVERT(nvarchar(4000), NEW.[field_access], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[field_access], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[field_access], 0))), IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[role], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[role], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[field_access], 0)=CONVERT(nvarchar(4000), OLD.[field_access], 0) or (NEW.[field_access] Is Null and OLD.[field_access] Is Null)) AND (CONVERT(nvarchar(4000), NEW.[role], 0)=CONVERT(nvarchar(4000), OLD.[role], 0) or (NEW.[role] Is Null and OLD.[role] Is Null))
			WHERE (
			
			
				(
					NEW.[field_access] <>
					OLD.[field_access]
				) Or
			
				(
					NEW.[field_access] Is Null And
					OLD.[field_access] Is Not Null
				) Or
				(
					NEW.[field_access] Is Not Null And
					OLD.[field_access] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([role])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1, KEY2
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[field_access]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[field_access], NEW.[field_access]), 0),'''' ,'''''')+'''', '[field_access] Is Null')+' AND '+IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[role], NEW.[role]), 0),'''' ,'''''')+'''', '[role] Is Null')),
		    'role',
			CONVERT(nvarchar(4000), OLD.[role], 0),
			CONVERT(nvarchar(4000), NEW.[role], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[field_access], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[field_access], 0))), IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[role], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[role], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[field_access], 0)=CONVERT(nvarchar(4000), OLD.[field_access], 0) or (NEW.[field_access] Is Null and OLD.[field_access] Is Null)) AND (CONVERT(nvarchar(4000), NEW.[role], 0)=CONVERT(nvarchar(4000), OLD.[role], 0) or (NEW.[role] Is Null and OLD.[role] Is Null))
			WHERE (
			
			
				(
					NEW.[role] <>
					OLD.[role]
				) Or
			
				(
					NEW.[role] Is Null And
					OLD.[role] Is Not Null
				) Or
				(
					NEW.[role] Is Not Null And
					OLD.[role] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_core_field_access_roles '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_core_field_access_roles Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_field_access_roles]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_core_field_access_roles]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_core_field_access_roles has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_core_field_access_roles cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_core_field_access_roles]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_core_field_access_roles]
	PRINT 'Trigger dropped: tr_d_AUDIT_core_field_access_roles '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_core_field_access_roles] for Table [dbo].[core_field_access_roles]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_core_field_access_roles] for Table [dbo].[core_field_access_roles]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_field_access_roles]
ON [dbo].[core_field_access_roles]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_field_access_roles]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_field_access_roles]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_field_access_roles',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[field_access]=N'''+replace(CONVERT(nvarchar(4000), OLD.[field_access], 0), '''', '''''')+'''', '[field_access] Is Null') + ' AND ' + IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), OLD.[role], 0), '''', '''''')+'''', '[role] Is Null')),
		'field_access',
		CONVERT(nvarchar(4000), OLD.[field_access], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[field_access], 0)),  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[role], 0))
	FROM deleted OLD
	WHERE
		OLD.[field_access] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[field_access]=N'''+replace(CONVERT(nvarchar(4000), OLD.[field_access], 0), '''', '''''')+'''', '[field_access] Is Null') + ' AND ' + IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), OLD.[role], 0), '''', '''''')+'''', '[role] Is Null')),
		'role',
		CONVERT(nvarchar(4000), OLD.[role], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[field_access], 0)),  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[role], 0))
	FROM deleted OLD
	WHERE
		OLD.[role] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_core_field_access_roles '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_core_field_access_roles Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_field_access_roles]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_core_field_access_roles]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_core_field_access_roles has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_core_field_access_roles cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[core_field_view_map]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_core_field_view_map]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_core_field_view_map]
   PRINT 'Trigger dropped: tr_i_AUDIT_core_field_view_map'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_core_field_view_map] for Table [dbo].[core_field_view_map]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_core_field_view_map] for Table [dbo].[core_field_view_map]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_field_view_map]
ON [dbo].[core_field_view_map]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_field_view_map]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_field_view_map]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_field_view_map',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'display_name',
		CONVERT(nvarchar(4000), NEW.[display_name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[display_name] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'field_name',
		CONVERT(nvarchar(4000), NEW.[field_name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[field_name] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'is_hidden',
		CONVERT(nvarchar(4000), NEW.[is_hidden], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[is_hidden] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'view_class',
		CONVERT(nvarchar(4000), NEW.[view_class], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[view_class] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'row',
		CONVERT(nvarchar(4000), NEW.[row], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[row] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'col',
		CONVERT(nvarchar(4000), NEW.[col], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[col] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'col_span',
		CONVERT(nvarchar(4000), NEW.[col_span], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[col_span] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'row_span',
		CONVERT(nvarchar(4000), NEW.[row_span], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[row_span] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'max_length',
		CONVERT(nvarchar(4000), NEW.[max_length], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[max_length] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'min_length',
		CONVERT(nvarchar(4000), NEW.[min_length], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[min_length] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'show_display_name',
		CONVERT(nvarchar(4000), NEW.[show_display_name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[show_display_name] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'prefix_label',
		CONVERT(nvarchar(4000), NEW.[prefix_label], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[prefix_label] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'tab',
		CONVERT(nvarchar(4000), NEW.[tab], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[tab] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_core_field_view_map'
Else PRINT 'Trigger Failed: tr_i_AUDIT_core_field_view_map Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_field_view_map]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_core_field_view_map]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_core_field_view_map has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_core_field_view_map cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_core_field_view_map]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_core_field_view_map]
	PRINT 'Trigger dropped: tr_u_AUDIT_core_field_view_map '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_core_field_view_map] for Table [dbo].[core_field_view_map]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_core_field_view_map] for Table [dbo].[core_field_view_map]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_field_view_map]
ON [dbo].[core_field_view_map]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_field_view_map]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_field_view_map]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_field_view_map',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([display_name])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'display_name',
			CONVERT(nvarchar(4000), OLD.[display_name], 0),
			CONVERT(nvarchar(4000), NEW.[display_name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[display_name] <>
					OLD.[display_name]
				) Or
			
				(
					NEW.[display_name] Is Null And
					OLD.[display_name] Is Not Null
				) Or
				(
					NEW.[display_name] Is Not Null And
					OLD.[display_name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([field_name])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'field_name',
			CONVERT(nvarchar(4000), OLD.[field_name], 0),
			CONVERT(nvarchar(4000), NEW.[field_name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[field_name] <>
					OLD.[field_name]
				) Or
			
				(
					NEW.[field_name] Is Null And
					OLD.[field_name] Is Not Null
				) Or
				(
					NEW.[field_name] Is Not Null And
					OLD.[field_name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([is_hidden])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'is_hidden',
			CONVERT(nvarchar(4000), OLD.[is_hidden], 0),
			CONVERT(nvarchar(4000), NEW.[is_hidden], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[is_hidden] <>
					OLD.[is_hidden]
				) Or
			
				(
					NEW.[is_hidden] Is Null And
					OLD.[is_hidden] Is Not Null
				) Or
				(
					NEW.[is_hidden] Is Not Null And
					OLD.[is_hidden] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([view_class])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'view_class',
			CONVERT(nvarchar(4000), OLD.[view_class], 0),
			CONVERT(nvarchar(4000), NEW.[view_class], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[view_class] <>
					OLD.[view_class]
				) Or
			
				(
					NEW.[view_class] Is Null And
					OLD.[view_class] Is Not Null
				) Or
				(
					NEW.[view_class] Is Not Null And
					OLD.[view_class] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([row])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'row',
			CONVERT(nvarchar(4000), OLD.[row], 0),
			CONVERT(nvarchar(4000), NEW.[row], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[row] <>
					OLD.[row]
				) Or
			
				(
					NEW.[row] Is Null And
					OLD.[row] Is Not Null
				) Or
				(
					NEW.[row] Is Not Null And
					OLD.[row] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([col])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'col',
			CONVERT(nvarchar(4000), OLD.[col], 0),
			CONVERT(nvarchar(4000), NEW.[col], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[col] <>
					OLD.[col]
				) Or
			
				(
					NEW.[col] Is Null And
					OLD.[col] Is Not Null
				) Or
				(
					NEW.[col] Is Not Null And
					OLD.[col] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([col_span])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'col_span',
			CONVERT(nvarchar(4000), OLD.[col_span], 0),
			CONVERT(nvarchar(4000), NEW.[col_span], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[col_span] <>
					OLD.[col_span]
				) Or
			
				(
					NEW.[col_span] Is Null And
					OLD.[col_span] Is Not Null
				) Or
				(
					NEW.[col_span] Is Not Null And
					OLD.[col_span] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([row_span])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'row_span',
			CONVERT(nvarchar(4000), OLD.[row_span], 0),
			CONVERT(nvarchar(4000), NEW.[row_span], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[row_span] <>
					OLD.[row_span]
				) Or
			
				(
					NEW.[row_span] Is Null And
					OLD.[row_span] Is Not Null
				) Or
				(
					NEW.[row_span] Is Not Null And
					OLD.[row_span] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([max_length])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'max_length',
			CONVERT(nvarchar(4000), OLD.[max_length], 0),
			CONVERT(nvarchar(4000), NEW.[max_length], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[max_length] <>
					OLD.[max_length]
				) Or
			
				(
					NEW.[max_length] Is Null And
					OLD.[max_length] Is Not Null
				) Or
				(
					NEW.[max_length] Is Not Null And
					OLD.[max_length] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([min_length])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'min_length',
			CONVERT(nvarchar(4000), OLD.[min_length], 0),
			CONVERT(nvarchar(4000), NEW.[min_length], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[min_length] <>
					OLD.[min_length]
				) Or
			
				(
					NEW.[min_length] Is Null And
					OLD.[min_length] Is Not Null
				) Or
				(
					NEW.[min_length] Is Not Null And
					OLD.[min_length] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([show_display_name])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'show_display_name',
			CONVERT(nvarchar(4000), OLD.[show_display_name], 0),
			CONVERT(nvarchar(4000), NEW.[show_display_name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[show_display_name] <>
					OLD.[show_display_name]
				) Or
			
				(
					NEW.[show_display_name] Is Null And
					OLD.[show_display_name] Is Not Null
				) Or
				(
					NEW.[show_display_name] Is Not Null And
					OLD.[show_display_name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([prefix_label])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'prefix_label',
			CONVERT(nvarchar(4000), OLD.[prefix_label], 0),
			CONVERT(nvarchar(4000), NEW.[prefix_label], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[prefix_label] <>
					OLD.[prefix_label]
				) Or
			
				(
					NEW.[prefix_label] Is Null And
					OLD.[prefix_label] Is Not Null
				) Or
				(
					NEW.[prefix_label] Is Not Null And
					OLD.[prefix_label] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([tab])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'tab',
			CONVERT(nvarchar(4000), OLD.[tab], 0),
			CONVERT(nvarchar(4000), NEW.[tab], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[tab] <>
					OLD.[tab]
				) Or
			
				(
					NEW.[tab] Is Null And
					OLD.[tab] Is Not Null
				) Or
				(
					NEW.[tab] Is Not Null And
					OLD.[tab] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_core_field_view_map '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_core_field_view_map Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_field_view_map]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_core_field_view_map]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_core_field_view_map has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_core_field_view_map cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_core_field_view_map]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_core_field_view_map]
	PRINT 'Trigger dropped: tr_d_AUDIT_core_field_view_map '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_core_field_view_map] for Table [dbo].[core_field_view_map]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_core_field_view_map] for Table [dbo].[core_field_view_map]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_field_view_map]
ON [dbo].[core_field_view_map]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_field_view_map]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_field_view_map]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_field_view_map',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'display_name',
		CONVERT(nvarchar(4000), OLD.[display_name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[display_name] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'field_name',
		CONVERT(nvarchar(4000), OLD.[field_name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[field_name] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'is_hidden',
		CONVERT(nvarchar(4000), OLD.[is_hidden], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[is_hidden] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'view_class',
		CONVERT(nvarchar(4000), OLD.[view_class], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[view_class] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'row',
		CONVERT(nvarchar(4000), OLD.[row], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[row] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'col',
		CONVERT(nvarchar(4000), OLD.[col], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[col] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'col_span',
		CONVERT(nvarchar(4000), OLD.[col_span], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[col_span] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'row_span',
		CONVERT(nvarchar(4000), OLD.[row_span], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[row_span] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'max_length',
		CONVERT(nvarchar(4000), OLD.[max_length], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[max_length] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'min_length',
		CONVERT(nvarchar(4000), OLD.[min_length], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[min_length] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'show_display_name',
		CONVERT(nvarchar(4000), OLD.[show_display_name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[show_display_name] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'prefix_label',
		CONVERT(nvarchar(4000), OLD.[prefix_label], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[prefix_label] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'tab',
		CONVERT(nvarchar(4000), OLD.[tab], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[tab] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_core_field_view_map '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_core_field_view_map Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_field_view_map]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_core_field_view_map]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_core_field_view_map has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_core_field_view_map cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[core_function]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_core_function]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_core_function]
   PRINT 'Trigger dropped: tr_i_AUDIT_core_function'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_core_function] for Table [dbo].[core_function]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_core_function] for Table [dbo].[core_function]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_function]
ON [dbo].[core_function]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_function]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_function]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_function',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), NEW.[name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[name] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), NEW.[description], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[description] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_core_function'
Else PRINT 'Trigger Failed: tr_i_AUDIT_core_function Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_function]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_core_function]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_core_function has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_core_function cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_core_function]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_core_function]
	PRINT 'Trigger dropped: tr_u_AUDIT_core_function '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_core_function] for Table [dbo].[core_function]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_core_function] for Table [dbo].[core_function]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_function]
ON [dbo].[core_function]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_function]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_function]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_function',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([name])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'name',
			CONVERT(nvarchar(4000), OLD.[name], 0),
			CONVERT(nvarchar(4000), NEW.[name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[name] <>
					OLD.[name]
				) Or
			
				(
					NEW.[name] Is Null And
					OLD.[name] Is Not Null
				) Or
				(
					NEW.[name] Is Not Null And
					OLD.[name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([description])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'description',
			CONVERT(nvarchar(4000), OLD.[description], 0),
			CONVERT(nvarchar(4000), NEW.[description], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[description] <>
					OLD.[description]
				) Or
			
				(
					NEW.[description] Is Null And
					OLD.[description] Is Not Null
				) Or
				(
					NEW.[description] Is Not Null And
					OLD.[description] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_core_function '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_core_function Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_function]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_core_function]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_core_function has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_core_function cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_core_function]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_core_function]
	PRINT 'Trigger dropped: tr_d_AUDIT_core_function '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_core_function] for Table [dbo].[core_function]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_core_function] for Table [dbo].[core_function]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_function]
ON [dbo].[core_function]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_function]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_function]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_function',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), OLD.[name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[name] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), OLD.[description], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[description] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_core_function '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_core_function Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_function]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_core_function]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_core_function has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_core_function cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[core_incrementing_id]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_core_incrementing_id]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_core_incrementing_id]
   PRINT 'Trigger dropped: tr_i_AUDIT_core_incrementing_id'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_core_incrementing_id] for Table [dbo].[core_incrementing_id]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_core_incrementing_id] for Table [dbo].[core_incrementing_id]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_incrementing_id]
ON [dbo].[core_incrementing_id]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_incrementing_id]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_incrementing_id]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_incrementing_id',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), NEW.[applies_to], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[applies_to] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'current',
		CONVERT(nvarchar(4000), NEW.[current], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[current] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_core_incrementing_id'
Else PRINT 'Trigger Failed: tr_i_AUDIT_core_incrementing_id Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_incrementing_id]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_core_incrementing_id]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_core_incrementing_id has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_core_incrementing_id cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_core_incrementing_id]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_core_incrementing_id]
	PRINT 'Trigger dropped: tr_u_AUDIT_core_incrementing_id '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_core_incrementing_id] for Table [dbo].[core_incrementing_id]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_core_incrementing_id] for Table [dbo].[core_incrementing_id]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_incrementing_id]
ON [dbo].[core_incrementing_id]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_incrementing_id]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_incrementing_id]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_incrementing_id',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([applies_to])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'applies_to',
			CONVERT(nvarchar(4000), OLD.[applies_to], 0),
			CONVERT(nvarchar(4000), NEW.[applies_to], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[applies_to] <>
					OLD.[applies_to]
				) Or
			
				(
					NEW.[applies_to] Is Null And
					OLD.[applies_to] Is Not Null
				) Or
				(
					NEW.[applies_to] Is Not Null And
					OLD.[applies_to] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([current])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'current',
			CONVERT(nvarchar(4000), OLD.[current], 0),
			CONVERT(nvarchar(4000), NEW.[current], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[current] <>
					OLD.[current]
				) Or
			
				(
					NEW.[current] Is Null And
					OLD.[current] Is Not Null
				) Or
				(
					NEW.[current] Is Not Null And
					OLD.[current] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_core_incrementing_id '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_core_incrementing_id Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_incrementing_id]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_core_incrementing_id]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_core_incrementing_id has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_core_incrementing_id cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_core_incrementing_id]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_core_incrementing_id]
	PRINT 'Trigger dropped: tr_d_AUDIT_core_incrementing_id '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_core_incrementing_id] for Table [dbo].[core_incrementing_id]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_core_incrementing_id] for Table [dbo].[core_incrementing_id]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_incrementing_id]
ON [dbo].[core_incrementing_id]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_incrementing_id]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_incrementing_id]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_incrementing_id',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), OLD.[applies_to], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[applies_to] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'current',
		CONVERT(nvarchar(4000), OLD.[current], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[current] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_core_incrementing_id '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_core_incrementing_id Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_incrementing_id]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_core_incrementing_id]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_core_incrementing_id has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_core_incrementing_id cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[core_incrementing_property_config]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_core_incrementing_property_config]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_core_incrementing_property_config]
   PRINT 'Trigger dropped: tr_i_AUDIT_core_incrementing_property_config'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_core_incrementing_property_config] for Table [dbo].[core_incrementing_property_config]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_core_incrementing_property_config] for Table [dbo].[core_incrementing_property_config]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_incrementing_property_config]
ON [dbo].[core_incrementing_property_config]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_incrementing_property_config]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_incrementing_property_config]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_incrementing_property_config',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), NEW.[applies_to], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[applies_to] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'property',
		CONVERT(nvarchar(4000), NEW.[property], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[property] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'format',
		CONVERT(nvarchar(4000), NEW.[format], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[format] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'id_length',
		CONVERT(nvarchar(4000), NEW.[id_length], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[id_length] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_core_incrementing_property_config'
Else PRINT 'Trigger Failed: tr_i_AUDIT_core_incrementing_property_config Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_incrementing_property_config]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_core_incrementing_property_config]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_core_incrementing_property_config has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_core_incrementing_property_config cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_core_incrementing_property_config]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_core_incrementing_property_config]
	PRINT 'Trigger dropped: tr_u_AUDIT_core_incrementing_property_config '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_core_incrementing_property_config] for Table [dbo].[core_incrementing_property_config]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_core_incrementing_property_config] for Table [dbo].[core_incrementing_property_config]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_incrementing_property_config]
ON [dbo].[core_incrementing_property_config]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_incrementing_property_config]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_incrementing_property_config]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_incrementing_property_config',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([applies_to])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'applies_to',
			CONVERT(nvarchar(4000), OLD.[applies_to], 0),
			CONVERT(nvarchar(4000), NEW.[applies_to], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[applies_to] <>
					OLD.[applies_to]
				) Or
			
				(
					NEW.[applies_to] Is Null And
					OLD.[applies_to] Is Not Null
				) Or
				(
					NEW.[applies_to] Is Not Null And
					OLD.[applies_to] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([property])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'property',
			CONVERT(nvarchar(4000), OLD.[property], 0),
			CONVERT(nvarchar(4000), NEW.[property], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[property] <>
					OLD.[property]
				) Or
			
				(
					NEW.[property] Is Null And
					OLD.[property] Is Not Null
				) Or
				(
					NEW.[property] Is Not Null And
					OLD.[property] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([format])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'format',
			CONVERT(nvarchar(4000), OLD.[format], 0),
			CONVERT(nvarchar(4000), NEW.[format], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[format] <>
					OLD.[format]
				) Or
			
				(
					NEW.[format] Is Null And
					OLD.[format] Is Not Null
				) Or
				(
					NEW.[format] Is Not Null And
					OLD.[format] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([id_length])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'id_length',
			CONVERT(nvarchar(4000), OLD.[id_length], 0),
			CONVERT(nvarchar(4000), NEW.[id_length], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[id_length] <>
					OLD.[id_length]
				) Or
			
				(
					NEW.[id_length] Is Null And
					OLD.[id_length] Is Not Null
				) Or
				(
					NEW.[id_length] Is Not Null And
					OLD.[id_length] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_core_incrementing_property_config '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_core_incrementing_property_config Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_incrementing_property_config]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_core_incrementing_property_config]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_core_incrementing_property_config has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_core_incrementing_property_config cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_core_incrementing_property_config]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_core_incrementing_property_config]
	PRINT 'Trigger dropped: tr_d_AUDIT_core_incrementing_property_config '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_core_incrementing_property_config] for Table [dbo].[core_incrementing_property_config]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_core_incrementing_property_config] for Table [dbo].[core_incrementing_property_config]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_incrementing_property_config]
ON [dbo].[core_incrementing_property_config]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_incrementing_property_config]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_incrementing_property_config]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_incrementing_property_config',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), OLD.[applies_to], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[applies_to] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'property',
		CONVERT(nvarchar(4000), OLD.[property], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[property] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'format',
		CONVERT(nvarchar(4000), OLD.[format], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[format] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'id_length',
		CONVERT(nvarchar(4000), OLD.[id_length], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[id_length] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_core_incrementing_property_config '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_core_incrementing_property_config Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_incrementing_property_config]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_core_incrementing_property_config]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_core_incrementing_property_config has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_core_incrementing_property_config cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[core_incrementing_property_id]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_core_incrementing_property_id]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_core_incrementing_property_id]
   PRINT 'Trigger dropped: tr_i_AUDIT_core_incrementing_property_id'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_core_incrementing_property_id] for Table [dbo].[core_incrementing_property_id]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_core_incrementing_property_id] for Table [dbo].[core_incrementing_property_id]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_incrementing_property_id]
ON [dbo].[core_incrementing_property_id]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_incrementing_property_id]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_incrementing_property_id]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_incrementing_property_id',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), NEW.[applies_to], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[applies_to] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'current',
		CONVERT(nvarchar(4000), NEW.[current], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[current] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'property_config',
		CONVERT(nvarchar(4000), NEW.[property_config], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[property_config] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_core_incrementing_property_id'
Else PRINT 'Trigger Failed: tr_i_AUDIT_core_incrementing_property_id Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_incrementing_property_id]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_core_incrementing_property_id]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_core_incrementing_property_id has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_core_incrementing_property_id cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_core_incrementing_property_id]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_core_incrementing_property_id]
	PRINT 'Trigger dropped: tr_u_AUDIT_core_incrementing_property_id '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_core_incrementing_property_id] for Table [dbo].[core_incrementing_property_id]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_core_incrementing_property_id] for Table [dbo].[core_incrementing_property_id]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_incrementing_property_id]
ON [dbo].[core_incrementing_property_id]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_incrementing_property_id]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_incrementing_property_id]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_incrementing_property_id',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([applies_to])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'applies_to',
			CONVERT(nvarchar(4000), OLD.[applies_to], 0),
			CONVERT(nvarchar(4000), NEW.[applies_to], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[applies_to] <>
					OLD.[applies_to]
				) Or
			
				(
					NEW.[applies_to] Is Null And
					OLD.[applies_to] Is Not Null
				) Or
				(
					NEW.[applies_to] Is Not Null And
					OLD.[applies_to] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([current])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'current',
			CONVERT(nvarchar(4000), OLD.[current], 0),
			CONVERT(nvarchar(4000), NEW.[current], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[current] <>
					OLD.[current]
				) Or
			
				(
					NEW.[current] Is Null And
					OLD.[current] Is Not Null
				) Or
				(
					NEW.[current] Is Not Null And
					OLD.[current] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([property_config])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'property_config',
			CONVERT(nvarchar(4000), OLD.[property_config], 0),
			CONVERT(nvarchar(4000), NEW.[property_config], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[property_config] <>
					OLD.[property_config]
				) Or
			
				(
					NEW.[property_config] Is Null And
					OLD.[property_config] Is Not Null
				) Or
				(
					NEW.[property_config] Is Not Null And
					OLD.[property_config] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_core_incrementing_property_id '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_core_incrementing_property_id Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_incrementing_property_id]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_core_incrementing_property_id]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_core_incrementing_property_id has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_core_incrementing_property_id cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_core_incrementing_property_id]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_core_incrementing_property_id]
	PRINT 'Trigger dropped: tr_d_AUDIT_core_incrementing_property_id '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_core_incrementing_property_id] for Table [dbo].[core_incrementing_property_id]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_core_incrementing_property_id] for Table [dbo].[core_incrementing_property_id]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_incrementing_property_id]
ON [dbo].[core_incrementing_property_id]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_incrementing_property_id]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_incrementing_property_id]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_incrementing_property_id',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), OLD.[applies_to], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[applies_to] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'current',
		CONVERT(nvarchar(4000), OLD.[current], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[current] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'property_config',
		CONVERT(nvarchar(4000), OLD.[property_config], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[property_config] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_core_incrementing_property_id '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_core_incrementing_property_id Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_incrementing_property_id]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_core_incrementing_property_id]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_core_incrementing_property_id has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_core_incrementing_property_id cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[core_incrementing_property_yearly_id]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_core_incrementing_property_yearly_id]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_core_incrementing_property_yearly_id]
   PRINT 'Trigger dropped: tr_i_AUDIT_core_incrementing_property_yearly_id'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_core_incrementing_property_yearly_id] for Table [dbo].[core_incrementing_property_yearly_id]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_core_incrementing_property_yearly_id] for Table [dbo].[core_incrementing_property_yearly_id]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_incrementing_property_yearly_id]
ON [dbo].[core_incrementing_property_yearly_id]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_incrementing_property_yearly_id]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_incrementing_property_yearly_id]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_incrementing_property_yearly_id',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'year',
		CONVERT(nvarchar(4000), NEW.[year], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[year] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'short_year',
		CONVERT(nvarchar(4000), NEW.[short_year], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[short_year] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), NEW.[applies_to], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[applies_to] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'current',
		CONVERT(nvarchar(4000), NEW.[current], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[current] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'property_config',
		CONVERT(nvarchar(4000), NEW.[property_config], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[property_config] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_core_incrementing_property_yearly_id'
Else PRINT 'Trigger Failed: tr_i_AUDIT_core_incrementing_property_yearly_id Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_incrementing_property_yearly_id]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_core_incrementing_property_yearly_id]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_core_incrementing_property_yearly_id has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_core_incrementing_property_yearly_id cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_core_incrementing_property_yearly_id]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_core_incrementing_property_yearly_id]
	PRINT 'Trigger dropped: tr_u_AUDIT_core_incrementing_property_yearly_id '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_core_incrementing_property_yearly_id] for Table [dbo].[core_incrementing_property_yearly_id]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_core_incrementing_property_yearly_id] for Table [dbo].[core_incrementing_property_yearly_id]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_incrementing_property_yearly_id]
ON [dbo].[core_incrementing_property_yearly_id]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_incrementing_property_yearly_id]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_incrementing_property_yearly_id]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_incrementing_property_yearly_id',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([year])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'year',
			CONVERT(nvarchar(4000), OLD.[year], 0),
			CONVERT(nvarchar(4000), NEW.[year], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[year] <>
					OLD.[year]
				) Or
			
				(
					NEW.[year] Is Null And
					OLD.[year] Is Not Null
				) Or
				(
					NEW.[year] Is Not Null And
					OLD.[year] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([short_year])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'short_year',
			CONVERT(nvarchar(4000), OLD.[short_year], 0),
			CONVERT(nvarchar(4000), NEW.[short_year], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[short_year] <>
					OLD.[short_year]
				) Or
			
				(
					NEW.[short_year] Is Null And
					OLD.[short_year] Is Not Null
				) Or
				(
					NEW.[short_year] Is Not Null And
					OLD.[short_year] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([applies_to])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'applies_to',
			CONVERT(nvarchar(4000), OLD.[applies_to], 0),
			CONVERT(nvarchar(4000), NEW.[applies_to], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[applies_to] <>
					OLD.[applies_to]
				) Or
			
				(
					NEW.[applies_to] Is Null And
					OLD.[applies_to] Is Not Null
				) Or
				(
					NEW.[applies_to] Is Not Null And
					OLD.[applies_to] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([current])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'current',
			CONVERT(nvarchar(4000), OLD.[current], 0),
			CONVERT(nvarchar(4000), NEW.[current], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[current] <>
					OLD.[current]
				) Or
			
				(
					NEW.[current] Is Null And
					OLD.[current] Is Not Null
				) Or
				(
					NEW.[current] Is Not Null And
					OLD.[current] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([property_config])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'property_config',
			CONVERT(nvarchar(4000), OLD.[property_config], 0),
			CONVERT(nvarchar(4000), NEW.[property_config], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[property_config] <>
					OLD.[property_config]
				) Or
			
				(
					NEW.[property_config] Is Null And
					OLD.[property_config] Is Not Null
				) Or
				(
					NEW.[property_config] Is Not Null And
					OLD.[property_config] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_core_incrementing_property_yearly_id '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_core_incrementing_property_yearly_id Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_incrementing_property_yearly_id]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_core_incrementing_property_yearly_id]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_core_incrementing_property_yearly_id has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_core_incrementing_property_yearly_id cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_core_incrementing_property_yearly_id]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_core_incrementing_property_yearly_id]
	PRINT 'Trigger dropped: tr_d_AUDIT_core_incrementing_property_yearly_id '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_core_incrementing_property_yearly_id] for Table [dbo].[core_incrementing_property_yearly_id]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_core_incrementing_property_yearly_id] for Table [dbo].[core_incrementing_property_yearly_id]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_incrementing_property_yearly_id]
ON [dbo].[core_incrementing_property_yearly_id]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_incrementing_property_yearly_id]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_incrementing_property_yearly_id]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_incrementing_property_yearly_id',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'year',
		CONVERT(nvarchar(4000), OLD.[year], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[year] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'short_year',
		CONVERT(nvarchar(4000), OLD.[short_year], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[short_year] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), OLD.[applies_to], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[applies_to] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'current',
		CONVERT(nvarchar(4000), OLD.[current], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[current] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'property_config',
		CONVERT(nvarchar(4000), OLD.[property_config], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[property_config] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_core_incrementing_property_yearly_id '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_core_incrementing_property_yearly_id Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_incrementing_property_yearly_id]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_core_incrementing_property_yearly_id]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_core_incrementing_property_yearly_id has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_core_incrementing_property_yearly_id cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[core_incrementing_yearly_id]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_core_incrementing_yearly_id]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_core_incrementing_yearly_id]
   PRINT 'Trigger dropped: tr_i_AUDIT_core_incrementing_yearly_id'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_core_incrementing_yearly_id] for Table [dbo].[core_incrementing_yearly_id]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_core_incrementing_yearly_id] for Table [dbo].[core_incrementing_yearly_id]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_incrementing_yearly_id]
ON [dbo].[core_incrementing_yearly_id]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_incrementing_yearly_id]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_incrementing_yearly_id]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_incrementing_yearly_id',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'year',
		CONVERT(nvarchar(4000), NEW.[year], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[year] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'short_year',
		CONVERT(nvarchar(4000), NEW.[short_year], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[short_year] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), NEW.[applies_to], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[applies_to] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'current',
		CONVERT(nvarchar(4000), NEW.[current], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[current] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_core_incrementing_yearly_id'
Else PRINT 'Trigger Failed: tr_i_AUDIT_core_incrementing_yearly_id Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_incrementing_yearly_id]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_core_incrementing_yearly_id]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_core_incrementing_yearly_id has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_core_incrementing_yearly_id cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_core_incrementing_yearly_id]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_core_incrementing_yearly_id]
	PRINT 'Trigger dropped: tr_u_AUDIT_core_incrementing_yearly_id '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_core_incrementing_yearly_id] for Table [dbo].[core_incrementing_yearly_id]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_core_incrementing_yearly_id] for Table [dbo].[core_incrementing_yearly_id]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_incrementing_yearly_id]
ON [dbo].[core_incrementing_yearly_id]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_incrementing_yearly_id]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_incrementing_yearly_id]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_incrementing_yearly_id',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([year])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'year',
			CONVERT(nvarchar(4000), OLD.[year], 0),
			CONVERT(nvarchar(4000), NEW.[year], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[year] <>
					OLD.[year]
				) Or
			
				(
					NEW.[year] Is Null And
					OLD.[year] Is Not Null
				) Or
				(
					NEW.[year] Is Not Null And
					OLD.[year] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([short_year])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'short_year',
			CONVERT(nvarchar(4000), OLD.[short_year], 0),
			CONVERT(nvarchar(4000), NEW.[short_year], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[short_year] <>
					OLD.[short_year]
				) Or
			
				(
					NEW.[short_year] Is Null And
					OLD.[short_year] Is Not Null
				) Or
				(
					NEW.[short_year] Is Not Null And
					OLD.[short_year] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([applies_to])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'applies_to',
			CONVERT(nvarchar(4000), OLD.[applies_to], 0),
			CONVERT(nvarchar(4000), NEW.[applies_to], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[applies_to] <>
					OLD.[applies_to]
				) Or
			
				(
					NEW.[applies_to] Is Null And
					OLD.[applies_to] Is Not Null
				) Or
				(
					NEW.[applies_to] Is Not Null And
					OLD.[applies_to] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([current])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'current',
			CONVERT(nvarchar(4000), OLD.[current], 0),
			CONVERT(nvarchar(4000), NEW.[current], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[current] <>
					OLD.[current]
				) Or
			
				(
					NEW.[current] Is Null And
					OLD.[current] Is Not Null
				) Or
				(
					NEW.[current] Is Not Null And
					OLD.[current] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_core_incrementing_yearly_id '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_core_incrementing_yearly_id Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_incrementing_yearly_id]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_core_incrementing_yearly_id]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_core_incrementing_yearly_id has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_core_incrementing_yearly_id cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_core_incrementing_yearly_id]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_core_incrementing_yearly_id]
	PRINT 'Trigger dropped: tr_d_AUDIT_core_incrementing_yearly_id '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_core_incrementing_yearly_id] for Table [dbo].[core_incrementing_yearly_id]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_core_incrementing_yearly_id] for Table [dbo].[core_incrementing_yearly_id]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_incrementing_yearly_id]
ON [dbo].[core_incrementing_yearly_id]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_incrementing_yearly_id]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_incrementing_yearly_id]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_incrementing_yearly_id',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'year',
		CONVERT(nvarchar(4000), OLD.[year], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[year] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'short_year',
		CONVERT(nvarchar(4000), OLD.[short_year], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[short_year] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), OLD.[applies_to], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[applies_to] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'current',
		CONVERT(nvarchar(4000), OLD.[current], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[current] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_core_incrementing_yearly_id '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_core_incrementing_yearly_id Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_incrementing_yearly_id]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_core_incrementing_yearly_id]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_core_incrementing_yearly_id has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_core_incrementing_yearly_id cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[core_log_entry]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_core_log_entry]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_core_log_entry]
   PRINT 'Trigger dropped: tr_i_AUDIT_core_log_entry'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_core_log_entry] for Table [dbo].[core_log_entry]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_core_log_entry] for Table [dbo].[core_log_entry]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_log_entry]
ON [dbo].[core_log_entry]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_log_entry]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_log_entry]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_log_entry',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'level',
		CONVERT(nvarchar(4000), NEW.[level], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[level] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'sub_system',
		CONVERT(nvarchar(4000), NEW.[sub_system], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[sub_system] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), NEW.[description], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[description] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'details',
		CONVERT(nvarchar(4000), NEW.[details], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[details] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'dismissed',
		CONVERT(nvarchar(4000), NEW.[dismissed], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[dismissed] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'date',
		CONVERT(nvarchar(4000), NEW.[date], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[date] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_core_log_entry'
Else PRINT 'Trigger Failed: tr_i_AUDIT_core_log_entry Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_log_entry]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_core_log_entry]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_core_log_entry has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_core_log_entry cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_core_log_entry]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_core_log_entry]
	PRINT 'Trigger dropped: tr_u_AUDIT_core_log_entry '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_core_log_entry] for Table [dbo].[core_log_entry]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_core_log_entry] for Table [dbo].[core_log_entry]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_log_entry]
ON [dbo].[core_log_entry]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_log_entry]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_log_entry]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_log_entry',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([level])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'level',
			CONVERT(nvarchar(4000), OLD.[level], 0),
			CONVERT(nvarchar(4000), NEW.[level], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[level] <>
					OLD.[level]
				) Or
			
				(
					NEW.[level] Is Null And
					OLD.[level] Is Not Null
				) Or
				(
					NEW.[level] Is Not Null And
					OLD.[level] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([sub_system])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'sub_system',
			CONVERT(nvarchar(4000), OLD.[sub_system], 0),
			CONVERT(nvarchar(4000), NEW.[sub_system], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[sub_system] <>
					OLD.[sub_system]
				) Or
			
				(
					NEW.[sub_system] Is Null And
					OLD.[sub_system] Is Not Null
				) Or
				(
					NEW.[sub_system] Is Not Null And
					OLD.[sub_system] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([description])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'description',
			CONVERT(nvarchar(4000), OLD.[description], 0),
			CONVERT(nvarchar(4000), NEW.[description], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[description] <>
					OLD.[description]
				) Or
			
				(
					NEW.[description] Is Null And
					OLD.[description] Is Not Null
				) Or
				(
					NEW.[description] Is Not Null And
					OLD.[description] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([details])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'details',
			CONVERT(nvarchar(4000), OLD.[details], 0),
			CONVERT(nvarchar(4000), NEW.[details], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[details] <>
					OLD.[details]
				) Or
			
				(
					NEW.[details] Is Null And
					OLD.[details] Is Not Null
				) Or
				(
					NEW.[details] Is Not Null And
					OLD.[details] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([dismissed])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'dismissed',
			CONVERT(nvarchar(4000), OLD.[dismissed], 0),
			CONVERT(nvarchar(4000), NEW.[dismissed], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[dismissed] <>
					OLD.[dismissed]
				) Or
			
				(
					NEW.[dismissed] Is Null And
					OLD.[dismissed] Is Not Null
				) Or
				(
					NEW.[dismissed] Is Not Null And
					OLD.[dismissed] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([date])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'date',
			CONVERT(nvarchar(4000), OLD.[date], 121),
			CONVERT(nvarchar(4000), NEW.[date], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[date] <>
					OLD.[date]
				) Or
			
				(
					NEW.[date] Is Null And
					OLD.[date] Is Not Null
				) Or
				(
					NEW.[date] Is Not Null And
					OLD.[date] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_core_log_entry '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_core_log_entry Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_log_entry]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_core_log_entry]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_core_log_entry has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_core_log_entry cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_core_log_entry]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_core_log_entry]
	PRINT 'Trigger dropped: tr_d_AUDIT_core_log_entry '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_core_log_entry] for Table [dbo].[core_log_entry]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_core_log_entry] for Table [dbo].[core_log_entry]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_log_entry]
ON [dbo].[core_log_entry]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_log_entry]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_log_entry]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_log_entry',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'level',
		CONVERT(nvarchar(4000), OLD.[level], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[level] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'sub_system',
		CONVERT(nvarchar(4000), OLD.[sub_system], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[sub_system] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), OLD.[description], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[description] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'details',
		CONVERT(nvarchar(4000), OLD.[details], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[details] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'dismissed',
		CONVERT(nvarchar(4000), OLD.[dismissed], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[dismissed] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'date',
		CONVERT(nvarchar(4000), OLD.[date], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[date] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_core_log_entry '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_core_log_entry Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_log_entry]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_core_log_entry]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_core_log_entry has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_core_log_entry cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[core_log_entry_viewed_by]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_core_log_entry_viewed_by]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_core_log_entry_viewed_by]
   PRINT 'Trigger dropped: tr_i_AUDIT_core_log_entry_viewed_by'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_core_log_entry_viewed_by] for Table [dbo].[core_log_entry_viewed_by]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_core_log_entry_viewed_by] for Table [dbo].[core_log_entry_viewed_by]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_log_entry_viewed_by]
ON [dbo].[core_log_entry_viewed_by]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_log_entry_viewed_by]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_log_entry_viewed_by]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_log_entry_viewed_by',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[log_entry]=N'''+replace(CONVERT(nvarchar(4000), NEW.[log_entry], 0), '''', '''''')+'''', '[log_entry] Is Null') + ' AND ' + IsNull('[user]=N'''+replace(CONVERT(nvarchar(4000), NEW.[user], 0), '''', '''''')+'''', '[user] Is Null')),
		'log_entry',
		CONVERT(nvarchar(4000), NEW.[log_entry], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[log_entry], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[user], 0))
	FROM inserted NEW
	WHERE NEW.[log_entry] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[log_entry]=N'''+replace(CONVERT(nvarchar(4000), NEW.[log_entry], 0), '''', '''''')+'''', '[log_entry] Is Null') + ' AND ' + IsNull('[user]=N'''+replace(CONVERT(nvarchar(4000), NEW.[user], 0), '''', '''''')+'''', '[user] Is Null')),
		'user',
		CONVERT(nvarchar(4000), NEW.[user], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[log_entry], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[user], 0))
	FROM inserted NEW
	WHERE NEW.[user] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_core_log_entry_viewed_by'
Else PRINT 'Trigger Failed: tr_i_AUDIT_core_log_entry_viewed_by Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_log_entry_viewed_by]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_core_log_entry_viewed_by]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_core_log_entry_viewed_by has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_core_log_entry_viewed_by cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_core_log_entry_viewed_by]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_core_log_entry_viewed_by]
	PRINT 'Trigger dropped: tr_u_AUDIT_core_log_entry_viewed_by '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_core_log_entry_viewed_by] for Table [dbo].[core_log_entry_viewed_by]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_core_log_entry_viewed_by] for Table [dbo].[core_log_entry_viewed_by]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_log_entry_viewed_by]
ON [dbo].[core_log_entry_viewed_by]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_log_entry_viewed_by]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_log_entry_viewed_by]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_log_entry_viewed_by',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([log_entry])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1, KEY2
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[log_entry]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[log_entry], NEW.[log_entry]), 0),'''' ,'''''')+'''', '[log_entry] Is Null')+' AND '+IsNull('[user]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[user], NEW.[user]), 0),'''' ,'''''')+'''', '[user] Is Null')),
		    'log_entry',
			CONVERT(nvarchar(4000), OLD.[log_entry], 0),
			CONVERT(nvarchar(4000), NEW.[log_entry], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[log_entry], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[log_entry], 0))), IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[user], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[user], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[log_entry], 0)=CONVERT(nvarchar(4000), OLD.[log_entry], 0) or (NEW.[log_entry] Is Null and OLD.[log_entry] Is Null)) AND (CONVERT(nvarchar(4000), NEW.[user], 0)=CONVERT(nvarchar(4000), OLD.[user], 0) or (NEW.[user] Is Null and OLD.[user] Is Null))
			WHERE (
			
			
				(
					NEW.[log_entry] <>
					OLD.[log_entry]
				) Or
			
				(
					NEW.[log_entry] Is Null And
					OLD.[log_entry] Is Not Null
				) Or
				(
					NEW.[log_entry] Is Not Null And
					OLD.[log_entry] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([user])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1, KEY2
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[log_entry]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[log_entry], NEW.[log_entry]), 0),'''' ,'''''')+'''', '[log_entry] Is Null')+' AND '+IsNull('[user]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[user], NEW.[user]), 0),'''' ,'''''')+'''', '[user] Is Null')),
		    'user',
			CONVERT(nvarchar(4000), OLD.[user], 0),
			CONVERT(nvarchar(4000), NEW.[user], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[log_entry], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[log_entry], 0))), IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[user], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[user], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[log_entry], 0)=CONVERT(nvarchar(4000), OLD.[log_entry], 0) or (NEW.[log_entry] Is Null and OLD.[log_entry] Is Null)) AND (CONVERT(nvarchar(4000), NEW.[user], 0)=CONVERT(nvarchar(4000), OLD.[user], 0) or (NEW.[user] Is Null and OLD.[user] Is Null))
			WHERE (
			
			
				(
					NEW.[user] <>
					OLD.[user]
				) Or
			
				(
					NEW.[user] Is Null And
					OLD.[user] Is Not Null
				) Or
				(
					NEW.[user] Is Not Null And
					OLD.[user] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_core_log_entry_viewed_by '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_core_log_entry_viewed_by Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_log_entry_viewed_by]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_core_log_entry_viewed_by]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_core_log_entry_viewed_by has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_core_log_entry_viewed_by cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_core_log_entry_viewed_by]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_core_log_entry_viewed_by]
	PRINT 'Trigger dropped: tr_d_AUDIT_core_log_entry_viewed_by '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_core_log_entry_viewed_by] for Table [dbo].[core_log_entry_viewed_by]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_core_log_entry_viewed_by] for Table [dbo].[core_log_entry_viewed_by]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_log_entry_viewed_by]
ON [dbo].[core_log_entry_viewed_by]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_log_entry_viewed_by]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:06
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_log_entry_viewed_by]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_log_entry_viewed_by',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[log_entry]=N'''+replace(CONVERT(nvarchar(4000), OLD.[log_entry], 0), '''', '''''')+'''', '[log_entry] Is Null') + ' AND ' + IsNull('[user]=N'''+replace(CONVERT(nvarchar(4000), OLD.[user], 0), '''', '''''')+'''', '[user] Is Null')),
		'log_entry',
		CONVERT(nvarchar(4000), OLD.[log_entry], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[log_entry], 0)),  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[user], 0))
	FROM deleted OLD
	WHERE
		OLD.[log_entry] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[log_entry]=N'''+replace(CONVERT(nvarchar(4000), OLD.[log_entry], 0), '''', '''''')+'''', '[log_entry] Is Null') + ' AND ' + IsNull('[user]=N'''+replace(CONVERT(nvarchar(4000), OLD.[user], 0), '''', '''''')+'''', '[user] Is Null')),
		'user',
		CONVERT(nvarchar(4000), OLD.[user], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[log_entry], 0)),  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[user], 0))
	FROM deleted OLD
	WHERE
		OLD.[user] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_core_log_entry_viewed_by '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_core_log_entry_viewed_by Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_log_entry_viewed_by]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_core_log_entry_viewed_by]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_core_log_entry_viewed_by has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_core_log_entry_viewed_by cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[core_profile]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_core_profile]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_core_profile]
   PRINT 'Trigger dropped: tr_i_AUDIT_core_profile'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_core_profile] for Table [dbo].[core_profile]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_core_profile] for Table [dbo].[core_profile]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_profile]
ON [dbo].[core_profile]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_profile]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_profile]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_profile',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'option',
		CONVERT(nvarchar(4000), NEW.[option], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[option] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'application',
		CONVERT(nvarchar(4000), NEW.[application], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[application] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'user',
		CONVERT(nvarchar(4000), NEW.[user], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[user] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_core_profile'
Else PRINT 'Trigger Failed: tr_i_AUDIT_core_profile Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_profile]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_core_profile]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_core_profile has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_core_profile cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_core_profile]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_core_profile]
	PRINT 'Trigger dropped: tr_u_AUDIT_core_profile '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_core_profile] for Table [dbo].[core_profile]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_core_profile] for Table [dbo].[core_profile]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_profile]
ON [dbo].[core_profile]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_profile]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_profile]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_profile',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([option])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'option',
			CONVERT(nvarchar(4000), OLD.[option], 0),
			CONVERT(nvarchar(4000), NEW.[option], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[option] <>
					OLD.[option]
				) Or
			
				(
					NEW.[option] Is Null And
					OLD.[option] Is Not Null
				) Or
				(
					NEW.[option] Is Not Null And
					OLD.[option] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([application])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'application',
			CONVERT(nvarchar(4000), OLD.[application], 0),
			CONVERT(nvarchar(4000), NEW.[application], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[application] <>
					OLD.[application]
				) Or
			
				(
					NEW.[application] Is Null And
					OLD.[application] Is Not Null
				) Or
				(
					NEW.[application] Is Not Null And
					OLD.[application] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([user])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'user',
			CONVERT(nvarchar(4000), OLD.[user], 0),
			CONVERT(nvarchar(4000), NEW.[user], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[user] <>
					OLD.[user]
				) Or
			
				(
					NEW.[user] Is Null And
					OLD.[user] Is Not Null
				) Or
				(
					NEW.[user] Is Not Null And
					OLD.[user] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_core_profile '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_core_profile Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_profile]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_core_profile]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_core_profile has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_core_profile cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_core_profile]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_core_profile]
	PRINT 'Trigger dropped: tr_d_AUDIT_core_profile '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_core_profile] for Table [dbo].[core_profile]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_core_profile] for Table [dbo].[core_profile]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_profile]
ON [dbo].[core_profile]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_profile]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_profile]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_profile',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'option',
		CONVERT(nvarchar(4000), OLD.[option], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[option] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'application',
		CONVERT(nvarchar(4000), OLD.[application], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[application] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'user',
		CONVERT(nvarchar(4000), OLD.[user], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[user] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_core_profile '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_core_profile Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_profile]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_core_profile]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_core_profile has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_core_profile cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[core_profile_items]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_core_profile_items]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_core_profile_items]
   PRINT 'Trigger dropped: tr_i_AUDIT_core_profile_items'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_core_profile_items] for Table [dbo].[core_profile_items]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_core_profile_items] for Table [dbo].[core_profile_items]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_profile_items]
ON [dbo].[core_profile_items]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_profile_items]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_profile_items]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_profile_items',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[profile]=N'''+replace(CONVERT(nvarchar(4000), NEW.[profile], 0), '''', '''''')+'''', '[profile] Is Null') + ' AND ' + IsNull('[key]=N'''+replace(CONVERT(nvarchar(4000), NEW.[key], 0), '''', '''''')+'''', '[key] Is Null')),
		'profile',
		CONVERT(nvarchar(4000), NEW.[profile], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[profile], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[key], 0))
	FROM inserted NEW
	WHERE NEW.[profile] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[profile]=N'''+replace(CONVERT(nvarchar(4000), NEW.[profile], 0), '''', '''''')+'''', '[profile] Is Null') + ' AND ' + IsNull('[key]=N'''+replace(CONVERT(nvarchar(4000), NEW.[key], 0), '''', '''''')+'''', '[key] Is Null')),
		'value',
		CONVERT(nvarchar(4000), NEW.[value], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[profile], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[key], 0))
	FROM inserted NEW
	WHERE NEW.[value] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[profile]=N'''+replace(CONVERT(nvarchar(4000), NEW.[profile], 0), '''', '''''')+'''', '[profile] Is Null') + ' AND ' + IsNull('[key]=N'''+replace(CONVERT(nvarchar(4000), NEW.[key], 0), '''', '''''')+'''', '[key] Is Null')),
		'key',
		CONVERT(nvarchar(4000), NEW.[key], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[profile], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[key], 0))
	FROM inserted NEW
	WHERE NEW.[key] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_core_profile_items'
Else PRINT 'Trigger Failed: tr_i_AUDIT_core_profile_items Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_profile_items]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_core_profile_items]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_core_profile_items has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_core_profile_items cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_core_profile_items]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_core_profile_items]
	PRINT 'Trigger dropped: tr_u_AUDIT_core_profile_items '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_core_profile_items] for Table [dbo].[core_profile_items]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_core_profile_items] for Table [dbo].[core_profile_items]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_profile_items]
ON [dbo].[core_profile_items]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_profile_items]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_profile_items]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_profile_items',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([profile])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1, KEY2
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[profile]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[profile], NEW.[profile]), 0),'''' ,'''''')+'''', '[profile] Is Null')+' AND '+IsNull('[key]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[key], NEW.[key]), 0),'''' ,'''''')+'''', '[key] Is Null')),
		    'profile',
			CONVERT(nvarchar(4000), OLD.[profile], 0),
			CONVERT(nvarchar(4000), NEW.[profile], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[profile], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[profile], 0))), IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[key], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[key], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[profile], 0)=CONVERT(nvarchar(4000), OLD.[profile], 0) or (NEW.[profile] Is Null and OLD.[profile] Is Null)) AND (CONVERT(nvarchar(4000), NEW.[key], 0)=CONVERT(nvarchar(4000), OLD.[key], 0) or (NEW.[key] Is Null and OLD.[key] Is Null))
			WHERE (
			
			
				(
					NEW.[profile] <>
					OLD.[profile]
				) Or
			
				(
					NEW.[profile] Is Null And
					OLD.[profile] Is Not Null
				) Or
				(
					NEW.[profile] Is Not Null And
					OLD.[profile] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([value])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1, KEY2
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[profile]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[profile], NEW.[profile]), 0),'''' ,'''''')+'''', '[profile] Is Null')+' AND '+IsNull('[key]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[key], NEW.[key]), 0),'''' ,'''''')+'''', '[key] Is Null')),
		    'value',
			CONVERT(nvarchar(4000), OLD.[value], 0),
			CONVERT(nvarchar(4000), NEW.[value], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[profile], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[profile], 0))), IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[key], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[key], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[profile], 0)=CONVERT(nvarchar(4000), OLD.[profile], 0) or (NEW.[profile] Is Null and OLD.[profile] Is Null)) AND (CONVERT(nvarchar(4000), NEW.[key], 0)=CONVERT(nvarchar(4000), OLD.[key], 0) or (NEW.[key] Is Null and OLD.[key] Is Null))
			where (
			
			
				(
					NEW.[value] <>
					OLD.[value]
				) Or
			
				(
					NEW.[value] Is Null And
					OLD.[value] Is Not Null
				) Or
				(
					NEW.[value] Is Not Null And
					OLD.[value] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([key])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1, KEY2
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[profile]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[profile], NEW.[profile]), 0),'''' ,'''''')+'''', '[profile] Is Null')+' AND '+IsNull('[key]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[key], NEW.[key]), 0),'''' ,'''''')+'''', '[key] Is Null')),
		    'key',
			CONVERT(nvarchar(4000), OLD.[key], 0),
			CONVERT(nvarchar(4000), NEW.[key], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[profile], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[profile], 0))), IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[key], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[key], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[profile], 0)=CONVERT(nvarchar(4000), OLD.[profile], 0) or (NEW.[profile] Is Null and OLD.[profile] Is Null)) AND (CONVERT(nvarchar(4000), NEW.[key], 0)=CONVERT(nvarchar(4000), OLD.[key], 0) or (NEW.[key] Is Null and OLD.[key] Is Null))
			WHERE (
			
			
				(
					NEW.[key] <>
					OLD.[key]
				) Or
			
				(
					NEW.[key] Is Null And
					OLD.[key] Is Not Null
				) Or
				(
					NEW.[key] Is Not Null And
					OLD.[key] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_core_profile_items '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_core_profile_items Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_profile_items]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_core_profile_items]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_core_profile_items has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_core_profile_items cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_core_profile_items]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_core_profile_items]
	PRINT 'Trigger dropped: tr_d_AUDIT_core_profile_items '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_core_profile_items] for Table [dbo].[core_profile_items]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_core_profile_items] for Table [dbo].[core_profile_items]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_profile_items]
ON [dbo].[core_profile_items]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_profile_items]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_profile_items]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_profile_items',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[profile]=N'''+replace(CONVERT(nvarchar(4000), OLD.[profile], 0), '''', '''''')+'''', '[profile] Is Null') + ' AND ' + IsNull('[key]=N'''+replace(CONVERT(nvarchar(4000), OLD.[key], 0), '''', '''''')+'''', '[key] Is Null')),
		'profile',
		CONVERT(nvarchar(4000), OLD.[profile], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[profile], 0)),  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[key], 0))
	FROM deleted OLD
	WHERE
		OLD.[profile] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[profile]=N'''+replace(CONVERT(nvarchar(4000), OLD.[profile], 0), '''', '''''')+'''', '[profile] Is Null') + ' AND ' + IsNull('[key]=N'''+replace(CONVERT(nvarchar(4000), OLD.[key], 0), '''', '''''')+'''', '[key] Is Null')),
		'value',
		CONVERT(nvarchar(4000), OLD.[value], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[profile], 0)),  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[key], 0))
	FROM deleted OLD
	WHERE
		OLD.[value] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[profile]=N'''+replace(CONVERT(nvarchar(4000), OLD.[profile], 0), '''', '''''')+'''', '[profile] Is Null') + ' AND ' + IsNull('[key]=N'''+replace(CONVERT(nvarchar(4000), OLD.[key], 0), '''', '''''')+'''', '[key] Is Null')),
		'key',
		CONVERT(nvarchar(4000), OLD.[key], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[profile], 0)),  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[key], 0))
	FROM deleted OLD
	WHERE
		OLD.[key] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_core_profile_items '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_core_profile_items Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_profile_items]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_core_profile_items]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_core_profile_items has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_core_profile_items cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[core_property_description]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_core_property_description]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_core_property_description]
   PRINT 'Trigger dropped: tr_i_AUDIT_core_property_description'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_core_property_description] for Table [dbo].[core_property_description]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_core_property_description] for Table [dbo].[core_property_description]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_property_description]
ON [dbo].[core_property_description]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_property_description]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_property_description]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_property_description',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'class_type',
		CONVERT(nvarchar(4000), NEW.[class_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[class_type] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'property',
		CONVERT(nvarchar(4000), NEW.[property], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[property] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), NEW.[description], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[description] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_core_property_description'
Else PRINT 'Trigger Failed: tr_i_AUDIT_core_property_description Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_property_description]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_core_property_description]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_core_property_description has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_core_property_description cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_core_property_description]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_core_property_description]
	PRINT 'Trigger dropped: tr_u_AUDIT_core_property_description '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_core_property_description] for Table [dbo].[core_property_description]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_core_property_description] for Table [dbo].[core_property_description]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_property_description]
ON [dbo].[core_property_description]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_property_description]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_property_description]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_property_description',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([class_type])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'class_type',
			CONVERT(nvarchar(4000), OLD.[class_type], 0),
			CONVERT(nvarchar(4000), NEW.[class_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[class_type] <>
					OLD.[class_type]
				) Or
			
				(
					NEW.[class_type] Is Null And
					OLD.[class_type] Is Not Null
				) Or
				(
					NEW.[class_type] Is Not Null And
					OLD.[class_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([property])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'property',
			CONVERT(nvarchar(4000), OLD.[property], 0),
			CONVERT(nvarchar(4000), NEW.[property], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[property] <>
					OLD.[property]
				) Or
			
				(
					NEW.[property] Is Null And
					OLD.[property] Is Not Null
				) Or
				(
					NEW.[property] Is Not Null And
					OLD.[property] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([description])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'description',
			CONVERT(nvarchar(4000), OLD.[description], 0),
			CONVERT(nvarchar(4000), NEW.[description], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[description] <>
					OLD.[description]
				) Or
			
				(
					NEW.[description] Is Null And
					OLD.[description] Is Not Null
				) Or
				(
					NEW.[description] Is Not Null And
					OLD.[description] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_core_property_description '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_core_property_description Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_property_description]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_core_property_description]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_core_property_description has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_core_property_description cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_core_property_description]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_core_property_description]
	PRINT 'Trigger dropped: tr_d_AUDIT_core_property_description '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_core_property_description] for Table [dbo].[core_property_description]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_core_property_description] for Table [dbo].[core_property_description]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_property_description]
ON [dbo].[core_property_description]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_property_description]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_property_description]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_property_description',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'class_type',
		CONVERT(nvarchar(4000), OLD.[class_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[class_type] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'property',
		CONVERT(nvarchar(4000), OLD.[property], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[property] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), OLD.[description], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[description] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_core_property_description '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_core_property_description Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_property_description]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_core_property_description]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_core_property_description has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_core_property_description cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[core_role]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_core_role]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_core_role]
   PRINT 'Trigger dropped: tr_i_AUDIT_core_role'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_core_role] for Table [dbo].[core_role]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_core_role] for Table [dbo].[core_role]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_role]
ON [dbo].[core_role]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_role]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_role]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_role',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), NEW.[name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[name] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), NEW.[active], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[active] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), NEW.[description], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[description] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'default_access',
		CONVERT(nvarchar(4000), NEW.[default_access], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[default_access] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_core_role'
Else PRINT 'Trigger Failed: tr_i_AUDIT_core_role Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_role]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_core_role]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_core_role has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_core_role cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_core_role]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_core_role]
	PRINT 'Trigger dropped: tr_u_AUDIT_core_role '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_core_role] for Table [dbo].[core_role]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_core_role] for Table [dbo].[core_role]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_role]
ON [dbo].[core_role]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_role]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_role]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_role',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([name])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'name',
			CONVERT(nvarchar(4000), OLD.[name], 0),
			CONVERT(nvarchar(4000), NEW.[name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[name] <>
					OLD.[name]
				) Or
			
				(
					NEW.[name] Is Null And
					OLD.[name] Is Not Null
				) Or
				(
					NEW.[name] Is Not Null And
					OLD.[name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([active])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'active',
			CONVERT(nvarchar(4000), OLD.[active], 0),
			CONVERT(nvarchar(4000), NEW.[active], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[active] <>
					OLD.[active]
				) Or
			
				(
					NEW.[active] Is Null And
					OLD.[active] Is Not Null
				) Or
				(
					NEW.[active] Is Not Null And
					OLD.[active] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([description])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'description',
			CONVERT(nvarchar(4000), OLD.[description], 0),
			CONVERT(nvarchar(4000), NEW.[description], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[description] <>
					OLD.[description]
				) Or
			
				(
					NEW.[description] Is Null And
					OLD.[description] Is Not Null
				) Or
				(
					NEW.[description] Is Not Null And
					OLD.[description] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([default_access])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'default_access',
			CONVERT(nvarchar(4000), OLD.[default_access], 0),
			CONVERT(nvarchar(4000), NEW.[default_access], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[default_access] <>
					OLD.[default_access]
				) Or
			
				(
					NEW.[default_access] Is Null And
					OLD.[default_access] Is Not Null
				) Or
				(
					NEW.[default_access] Is Not Null And
					OLD.[default_access] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_core_role '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_core_role Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_role]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_core_role]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_core_role has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_core_role cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_core_role]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_core_role]
	PRINT 'Trigger dropped: tr_d_AUDIT_core_role '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_core_role] for Table [dbo].[core_role]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_core_role] for Table [dbo].[core_role]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_role]
ON [dbo].[core_role]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_role]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_role]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_role',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), OLD.[name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[name] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), OLD.[active], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[active] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), OLD.[description], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[description] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'default_access',
		CONVERT(nvarchar(4000), OLD.[default_access], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[default_access] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_core_role '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_core_role Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_role]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_core_role]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_core_role has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_core_role cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[core_role_function_access]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_core_role_function_access]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_core_role_function_access]
   PRINT 'Trigger dropped: tr_i_AUDIT_core_role_function_access'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_core_role_function_access] for Table [dbo].[core_role_function_access]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_core_role_function_access] for Table [dbo].[core_role_function_access]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_role_function_access]
ON [dbo].[core_role_function_access]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_role_function_access]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_role_function_access]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_role_function_access',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), NEW.[role], 0), '''', '''''')+'''', '[role] Is Null') + ' AND ' + IsNull('[function]=N'''+replace(CONVERT(nvarchar(4000), NEW.[function], 0), '''', '''''')+'''', '[function] Is Null')),
		'role',
		CONVERT(nvarchar(4000), NEW.[role], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[role], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[function], 0))
	FROM inserted NEW
	WHERE NEW.[role] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), NEW.[role], 0), '''', '''''')+'''', '[role] Is Null') + ' AND ' + IsNull('[function]=N'''+replace(CONVERT(nvarchar(4000), NEW.[function], 0), '''', '''''')+'''', '[function] Is Null')),
		'function',
		CONVERT(nvarchar(4000), NEW.[function], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[role], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[function], 0))
	FROM inserted NEW
	WHERE NEW.[function] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_core_role_function_access'
Else PRINT 'Trigger Failed: tr_i_AUDIT_core_role_function_access Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_role_function_access]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_core_role_function_access]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_core_role_function_access has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_core_role_function_access cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_core_role_function_access]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_core_role_function_access]
	PRINT 'Trigger dropped: tr_u_AUDIT_core_role_function_access '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_core_role_function_access] for Table [dbo].[core_role_function_access]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_core_role_function_access] for Table [dbo].[core_role_function_access]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_role_function_access]
ON [dbo].[core_role_function_access]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_role_function_access]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_role_function_access]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_role_function_access',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([role])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1, KEY2
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[role], NEW.[role]), 0),'''' ,'''''')+'''', '[role] Is Null')+' AND '+IsNull('[function]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[function], NEW.[function]), 0),'''' ,'''''')+'''', '[function] Is Null')),
		    'role',
			CONVERT(nvarchar(4000), OLD.[role], 0),
			CONVERT(nvarchar(4000), NEW.[role], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[role], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[role], 0))), IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[function], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[function], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[role], 0)=CONVERT(nvarchar(4000), OLD.[role], 0) or (NEW.[role] Is Null and OLD.[role] Is Null)) AND (CONVERT(nvarchar(4000), NEW.[function], 0)=CONVERT(nvarchar(4000), OLD.[function], 0) or (NEW.[function] Is Null and OLD.[function] Is Null))
			WHERE (
			
			
				(
					NEW.[role] <>
					OLD.[role]
				) Or
			
				(
					NEW.[role] Is Null And
					OLD.[role] Is Not Null
				) Or
				(
					NEW.[role] Is Not Null And
					OLD.[role] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([function])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1, KEY2
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[role], NEW.[role]), 0),'''' ,'''''')+'''', '[role] Is Null')+' AND '+IsNull('[function]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[function], NEW.[function]), 0),'''' ,'''''')+'''', '[function] Is Null')),
		    'function',
			CONVERT(nvarchar(4000), OLD.[function], 0),
			CONVERT(nvarchar(4000), NEW.[function], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[role], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[role], 0))), IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[function], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[function], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[role], 0)=CONVERT(nvarchar(4000), OLD.[role], 0) or (NEW.[role] Is Null and OLD.[role] Is Null)) AND (CONVERT(nvarchar(4000), NEW.[function], 0)=CONVERT(nvarchar(4000), OLD.[function], 0) or (NEW.[function] Is Null and OLD.[function] Is Null))
			WHERE (
			
			
				(
					NEW.[function] <>
					OLD.[function]
				) Or
			
				(
					NEW.[function] Is Null And
					OLD.[function] Is Not Null
				) Or
				(
					NEW.[function] Is Not Null And
					OLD.[function] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_core_role_function_access '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_core_role_function_access Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_role_function_access]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_core_role_function_access]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_core_role_function_access has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_core_role_function_access cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_core_role_function_access]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_core_role_function_access]
	PRINT 'Trigger dropped: tr_d_AUDIT_core_role_function_access '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_core_role_function_access] for Table [dbo].[core_role_function_access]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_core_role_function_access] for Table [dbo].[core_role_function_access]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_role_function_access]
ON [dbo].[core_role_function_access]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_role_function_access]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_role_function_access]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_role_function_access',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), OLD.[role], 0), '''', '''''')+'''', '[role] Is Null') + ' AND ' + IsNull('[function]=N'''+replace(CONVERT(nvarchar(4000), OLD.[function], 0), '''', '''''')+'''', '[function] Is Null')),
		'role',
		CONVERT(nvarchar(4000), OLD.[role], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[role], 0)),  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[function], 0))
	FROM deleted OLD
	WHERE
		OLD.[role] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), OLD.[role], 0), '''', '''''')+'''', '[role] Is Null') + ' AND ' + IsNull('[function]=N'''+replace(CONVERT(nvarchar(4000), OLD.[function], 0), '''', '''''')+'''', '[function] Is Null')),
		'function',
		CONVERT(nvarchar(4000), OLD.[function], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[role], 0)),  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[function], 0))
	FROM deleted OLD
	WHERE
		OLD.[function] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_core_role_function_access '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_core_role_function_access Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_role_function_access]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_core_role_function_access]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_core_role_function_access has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_core_role_function_access cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[core_role_start_page_commands]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_core_role_start_page_commands]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_core_role_start_page_commands]
   PRINT 'Trigger dropped: tr_i_AUDIT_core_role_start_page_commands'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_core_role_start_page_commands] for Table [dbo].[core_role_start_page_commands]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_core_role_start_page_commands] for Table [dbo].[core_role_start_page_commands]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_role_start_page_commands]
ON [dbo].[core_role_start_page_commands]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_role_start_page_commands]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_role_start_page_commands]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_role_start_page_commands',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), NEW.[role], 0), '''', '''''')+'''', '[role] Is Null') + ' AND ' + IsNull('[order]='+CONVERT(nvarchar(4000), NEW.[order], 0), '[order] Is Null')),
		'role',
		CONVERT(nvarchar(4000), NEW.[role], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[role], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[order], 0))
	FROM inserted NEW
	WHERE NEW.[role] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), NEW.[role], 0), '''', '''''')+'''', '[role] Is Null') + ' AND ' + IsNull('[order]='+CONVERT(nvarchar(4000), NEW.[order], 0), '[order] Is Null')),
		'command',
		CONVERT(nvarchar(4000), NEW.[command], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[role], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[order], 0))
	FROM inserted NEW
	WHERE NEW.[command] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), NEW.[role], 0), '''', '''''')+'''', '[role] Is Null') + ' AND ' + IsNull('[order]='+CONVERT(nvarchar(4000), NEW.[order], 0), '[order] Is Null')),
		'order',
		CONVERT(nvarchar(4000), NEW.[order], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[role], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[order], 0))
	FROM inserted NEW
	WHERE NEW.[order] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_core_role_start_page_commands'
Else PRINT 'Trigger Failed: tr_i_AUDIT_core_role_start_page_commands Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_role_start_page_commands]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_core_role_start_page_commands]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_core_role_start_page_commands has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_core_role_start_page_commands cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_core_role_start_page_commands]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_core_role_start_page_commands]
	PRINT 'Trigger dropped: tr_u_AUDIT_core_role_start_page_commands '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_core_role_start_page_commands] for Table [dbo].[core_role_start_page_commands]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_core_role_start_page_commands] for Table [dbo].[core_role_start_page_commands]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_role_start_page_commands]
ON [dbo].[core_role_start_page_commands]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_role_start_page_commands]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_role_start_page_commands]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_role_start_page_commands',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([role])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1, KEY2
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[role], NEW.[role]), 0),'''' ,'''''')+'''', '[role] Is Null')+' AND '+IsNull('[order]='+CONVERT(nvarchar(4000), IsNull(OLD.[order], NEW.[order]), 0), '[order] Is Null')),
		    'role',
			CONVERT(nvarchar(4000), OLD.[role], 0),
			CONVERT(nvarchar(4000), NEW.[role], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[role], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[role], 0))), IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[order], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[order], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[role], 0)=CONVERT(nvarchar(4000), OLD.[role], 0) or (NEW.[role] Is Null and OLD.[role] Is Null)) AND (CONVERT(nvarchar(4000), NEW.[order], 0)=CONVERT(nvarchar(4000), OLD.[order], 0) or (NEW.[order] Is Null and OLD.[order] Is Null))
			WHERE (
			
			
				(
					NEW.[role] <>
					OLD.[role]
				) Or
			
				(
					NEW.[role] Is Null And
					OLD.[role] Is Not Null
				) Or
				(
					NEW.[role] Is Not Null And
					OLD.[role] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([command])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1, KEY2
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[role], NEW.[role]), 0),'''' ,'''''')+'''', '[role] Is Null')+' AND '+IsNull('[order]='+CONVERT(nvarchar(4000), IsNull(OLD.[order], NEW.[order]), 0), '[order] Is Null')),
		    'command',
			CONVERT(nvarchar(4000), OLD.[command], 0),
			CONVERT(nvarchar(4000), NEW.[command], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[role], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[role], 0))), IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[order], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[order], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[role], 0)=CONVERT(nvarchar(4000), OLD.[role], 0) or (NEW.[role] Is Null and OLD.[role] Is Null)) AND (CONVERT(nvarchar(4000), NEW.[order], 0)=CONVERT(nvarchar(4000), OLD.[order], 0) or (NEW.[order] Is Null and OLD.[order] Is Null))
			where (
			
			
				(
					NEW.[command] <>
					OLD.[command]
				) Or
			
				(
					NEW.[command] Is Null And
					OLD.[command] Is Not Null
				) Or
				(
					NEW.[command] Is Not Null And
					OLD.[command] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([order])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1, KEY2
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[role], NEW.[role]), 0),'''' ,'''''')+'''', '[role] Is Null')+' AND '+IsNull('[order]='+CONVERT(nvarchar(4000), IsNull(OLD.[order], NEW.[order]), 0), '[order] Is Null')),
		    'order',
			CONVERT(nvarchar(4000), OLD.[order], 0),
			CONVERT(nvarchar(4000), NEW.[order], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[role], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[role], 0))), IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[order], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[order], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[role], 0)=CONVERT(nvarchar(4000), OLD.[role], 0) or (NEW.[role] Is Null and OLD.[role] Is Null)) AND (CONVERT(nvarchar(4000), NEW.[order], 0)=CONVERT(nvarchar(4000), OLD.[order], 0) or (NEW.[order] Is Null and OLD.[order] Is Null))
			WHERE (
			
			
				(
					NEW.[order] <>
					OLD.[order]
				) Or
			
				(
					NEW.[order] Is Null And
					OLD.[order] Is Not Null
				) Or
				(
					NEW.[order] Is Not Null And
					OLD.[order] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_core_role_start_page_commands '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_core_role_start_page_commands Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_role_start_page_commands]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_core_role_start_page_commands]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_core_role_start_page_commands has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_core_role_start_page_commands cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_core_role_start_page_commands]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_core_role_start_page_commands]
	PRINT 'Trigger dropped: tr_d_AUDIT_core_role_start_page_commands '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_core_role_start_page_commands] for Table [dbo].[core_role_start_page_commands]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_core_role_start_page_commands] for Table [dbo].[core_role_start_page_commands]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_role_start_page_commands]
ON [dbo].[core_role_start_page_commands]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_role_start_page_commands]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_role_start_page_commands]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_role_start_page_commands',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), OLD.[role], 0), '''', '''''')+'''', '[role] Is Null') + ' AND ' + IsNull('[order]='+CONVERT(nvarchar(4000), OLD.[order], 0), '[order] Is Null')),
		'role',
		CONVERT(nvarchar(4000), OLD.[role], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[role], 0)),  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[order], 0))
	FROM deleted OLD
	WHERE
		OLD.[role] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), OLD.[role], 0), '''', '''''')+'''', '[role] Is Null') + ' AND ' + IsNull('[order]='+CONVERT(nvarchar(4000), OLD.[order], 0), '[order] Is Null')),
		'command',
		CONVERT(nvarchar(4000), OLD.[command], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[role], 0)),  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[order], 0))
	FROM deleted OLD
	WHERE
		OLD.[command] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), OLD.[role], 0), '''', '''''')+'''', '[role] Is Null') + ' AND ' + IsNull('[order]='+CONVERT(nvarchar(4000), OLD.[order], 0), '[order] Is Null')),
		'order',
		CONVERT(nvarchar(4000), OLD.[order], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[role], 0)),  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[order], 0))
	FROM deleted OLD
	WHERE
		OLD.[order] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_core_role_start_page_commands '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_core_role_start_page_commands Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_role_start_page_commands]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_core_role_start_page_commands]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_core_role_start_page_commands has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_core_role_start_page_commands cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[core_search_spec]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_core_search_spec]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_core_search_spec]
   PRINT 'Trigger dropped: tr_i_AUDIT_core_search_spec'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_core_search_spec] for Table [dbo].[core_search_spec]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_core_search_spec] for Table [dbo].[core_search_spec]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_search_spec]
ON [dbo].[core_search_spec]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_search_spec]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_search_spec]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_search_spec',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'header_fields',
		CONVERT(nvarchar(4000), NEW.[header_fields], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[header_fields] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'command_class',
		CONVERT(nvarchar(4000), NEW.[command_class], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[command_class] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), NEW.[description], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[description] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), NEW.[applies_to], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[applies_to] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'display_index',
		CONVERT(nvarchar(4000), NEW.[display_index], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[display_index] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_core_search_spec'
Else PRINT 'Trigger Failed: tr_i_AUDIT_core_search_spec Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_search_spec]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_core_search_spec]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_core_search_spec has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_core_search_spec cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_core_search_spec]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_core_search_spec]
	PRINT 'Trigger dropped: tr_u_AUDIT_core_search_spec '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_core_search_spec] for Table [dbo].[core_search_spec]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_core_search_spec] for Table [dbo].[core_search_spec]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_search_spec]
ON [dbo].[core_search_spec]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_search_spec]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_search_spec]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_search_spec',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([header_fields])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'header_fields',
			CONVERT(nvarchar(4000), OLD.[header_fields], 0),
			CONVERT(nvarchar(4000), NEW.[header_fields], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[header_fields] <>
					OLD.[header_fields]
				) Or
			
				(
					NEW.[header_fields] Is Null And
					OLD.[header_fields] Is Not Null
				) Or
				(
					NEW.[header_fields] Is Not Null And
					OLD.[header_fields] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([command_class])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'command_class',
			CONVERT(nvarchar(4000), OLD.[command_class], 0),
			CONVERT(nvarchar(4000), NEW.[command_class], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[command_class] <>
					OLD.[command_class]
				) Or
			
				(
					NEW.[command_class] Is Null And
					OLD.[command_class] Is Not Null
				) Or
				(
					NEW.[command_class] Is Not Null And
					OLD.[command_class] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([description])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'description',
			CONVERT(nvarchar(4000), OLD.[description], 0),
			CONVERT(nvarchar(4000), NEW.[description], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[description] <>
					OLD.[description]
				) Or
			
				(
					NEW.[description] Is Null And
					OLD.[description] Is Not Null
				) Or
				(
					NEW.[description] Is Not Null And
					OLD.[description] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([applies_to])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'applies_to',
			CONVERT(nvarchar(4000), OLD.[applies_to], 0),
			CONVERT(nvarchar(4000), NEW.[applies_to], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[applies_to] <>
					OLD.[applies_to]
				) Or
			
				(
					NEW.[applies_to] Is Null And
					OLD.[applies_to] Is Not Null
				) Or
				(
					NEW.[applies_to] Is Not Null And
					OLD.[applies_to] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([display_index])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'display_index',
			CONVERT(nvarchar(4000), OLD.[display_index], 0),
			CONVERT(nvarchar(4000), NEW.[display_index], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[display_index] <>
					OLD.[display_index]
				) Or
			
				(
					NEW.[display_index] Is Null And
					OLD.[display_index] Is Not Null
				) Or
				(
					NEW.[display_index] Is Not Null And
					OLD.[display_index] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_core_search_spec '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_core_search_spec Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_search_spec]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_core_search_spec]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_core_search_spec has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_core_search_spec cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_core_search_spec]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_core_search_spec]
	PRINT 'Trigger dropped: tr_d_AUDIT_core_search_spec '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_core_search_spec] for Table [dbo].[core_search_spec]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_core_search_spec] for Table [dbo].[core_search_spec]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_search_spec]
ON [dbo].[core_search_spec]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_search_spec]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_search_spec]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_search_spec',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'header_fields',
		CONVERT(nvarchar(4000), OLD.[header_fields], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[header_fields] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'command_class',
		CONVERT(nvarchar(4000), OLD.[command_class], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[command_class] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), OLD.[description], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[description] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), OLD.[applies_to], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[applies_to] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'display_index',
		CONVERT(nvarchar(4000), OLD.[display_index], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[display_index] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_core_search_spec '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_core_search_spec Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_search_spec]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_core_search_spec]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_core_search_spec has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_core_search_spec cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[core_system_info]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_core_system_info]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_core_system_info]
   PRINT 'Trigger dropped: tr_i_AUDIT_core_system_info'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_core_system_info] for Table [dbo].[core_system_info]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_core_system_info] for Table [dbo].[core_system_info]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_system_info]
ON [dbo].[core_system_info]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_system_info]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_system_info]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_system_info',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'application_name',
		CONVERT(nvarchar(4000), NEW.[application_name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[application_name] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'customer_name',
		CONVERT(nvarchar(4000), NEW.[customer_name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[customer_name] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'ver_major',
		CONVERT(nvarchar(4000), NEW.[ver_major], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[ver_major] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'ver_minor',
		CONVERT(nvarchar(4000), NEW.[ver_minor], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[ver_minor] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'ver_schema',
		CONVERT(nvarchar(4000), NEW.[ver_schema], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[ver_schema] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'ver_build',
		CONVERT(nvarchar(4000), NEW.[ver_build], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[ver_build] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_core_system_info'
Else PRINT 'Trigger Failed: tr_i_AUDIT_core_system_info Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_system_info]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_core_system_info]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_core_system_info has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_core_system_info cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_core_system_info]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_core_system_info]
	PRINT 'Trigger dropped: tr_u_AUDIT_core_system_info '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_core_system_info] for Table [dbo].[core_system_info]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_core_system_info] for Table [dbo].[core_system_info]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_system_info]
ON [dbo].[core_system_info]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_system_info]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_system_info]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_system_info',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([application_name])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'application_name',
			CONVERT(nvarchar(4000), OLD.[application_name], 0),
			CONVERT(nvarchar(4000), NEW.[application_name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[application_name] <>
					OLD.[application_name]
				) Or
			
				(
					NEW.[application_name] Is Null And
					OLD.[application_name] Is Not Null
				) Or
				(
					NEW.[application_name] Is Not Null And
					OLD.[application_name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([customer_name])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'customer_name',
			CONVERT(nvarchar(4000), OLD.[customer_name], 0),
			CONVERT(nvarchar(4000), NEW.[customer_name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[customer_name] <>
					OLD.[customer_name]
				) Or
			
				(
					NEW.[customer_name] Is Null And
					OLD.[customer_name] Is Not Null
				) Or
				(
					NEW.[customer_name] Is Not Null And
					OLD.[customer_name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([ver_major])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'ver_major',
			CONVERT(nvarchar(4000), OLD.[ver_major], 0),
			CONVERT(nvarchar(4000), NEW.[ver_major], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[ver_major] <>
					OLD.[ver_major]
				) Or
			
				(
					NEW.[ver_major] Is Null And
					OLD.[ver_major] Is Not Null
				) Or
				(
					NEW.[ver_major] Is Not Null And
					OLD.[ver_major] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([ver_minor])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'ver_minor',
			CONVERT(nvarchar(4000), OLD.[ver_minor], 0),
			CONVERT(nvarchar(4000), NEW.[ver_minor], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[ver_minor] <>
					OLD.[ver_minor]
				) Or
			
				(
					NEW.[ver_minor] Is Null And
					OLD.[ver_minor] Is Not Null
				) Or
				(
					NEW.[ver_minor] Is Not Null And
					OLD.[ver_minor] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([ver_schema])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'ver_schema',
			CONVERT(nvarchar(4000), OLD.[ver_schema], 0),
			CONVERT(nvarchar(4000), NEW.[ver_schema], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[ver_schema] <>
					OLD.[ver_schema]
				) Or
			
				(
					NEW.[ver_schema] Is Null And
					OLD.[ver_schema] Is Not Null
				) Or
				(
					NEW.[ver_schema] Is Not Null And
					OLD.[ver_schema] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([ver_build])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'ver_build',
			CONVERT(nvarchar(4000), OLD.[ver_build], 0),
			CONVERT(nvarchar(4000), NEW.[ver_build], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[ver_build] <>
					OLD.[ver_build]
				) Or
			
				(
					NEW.[ver_build] Is Null And
					OLD.[ver_build] Is Not Null
				) Or
				(
					NEW.[ver_build] Is Not Null And
					OLD.[ver_build] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_core_system_info '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_core_system_info Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_system_info]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_core_system_info]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_core_system_info has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_core_system_info cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_core_system_info]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_core_system_info]
	PRINT 'Trigger dropped: tr_d_AUDIT_core_system_info '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_core_system_info] for Table [dbo].[core_system_info]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_core_system_info] for Table [dbo].[core_system_info]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_system_info]
ON [dbo].[core_system_info]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_system_info]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_system_info]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_system_info',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'application_name',
		CONVERT(nvarchar(4000), OLD.[application_name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[application_name] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'customer_name',
		CONVERT(nvarchar(4000), OLD.[customer_name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[customer_name] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'ver_major',
		CONVERT(nvarchar(4000), OLD.[ver_major], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[ver_major] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'ver_minor',
		CONVERT(nvarchar(4000), OLD.[ver_minor], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[ver_minor] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'ver_schema',
		CONVERT(nvarchar(4000), OLD.[ver_schema], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[ver_schema] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'ver_build',
		CONVERT(nvarchar(4000), OLD.[ver_build], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[ver_build] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_core_system_info '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_core_system_info Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_system_info]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_core_system_info]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_core_system_info has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_core_system_info cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[core_user]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_core_user]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_core_user]
   PRINT 'Trigger dropped: tr_i_AUDIT_core_user'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_core_user] for Table [dbo].[core_user]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_core_user] for Table [dbo].[core_user]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_user]
ON [dbo].[core_user]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_user]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_user]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_user',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'login',
		CONVERT(nvarchar(4000), NEW.[login], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[login] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'password',
		CONVERT(nvarchar(4000), NEW.[password], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[password] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'full_name',
		CONVERT(nvarchar(4000), NEW.[full_name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[full_name] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'email',
		CONVERT(nvarchar(4000), NEW.[email], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[email] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'title',
		CONVERT(nvarchar(4000), NEW.[title], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[title] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no_of_failed_logins',
		CONVERT(nvarchar(4000), NEW.[no_of_failed_logins], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[no_of_failed_logins] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'account_locked',
		CONVERT(nvarchar(4000), NEW.[account_locked], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[account_locked] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'is_active',
		CONVERT(nvarchar(4000), NEW.[is_active], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[is_active] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_core_user'
Else PRINT 'Trigger Failed: tr_i_AUDIT_core_user Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_user]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_core_user]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_core_user has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_core_user cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_core_user]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_core_user]
	PRINT 'Trigger dropped: tr_u_AUDIT_core_user '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_core_user] for Table [dbo].[core_user]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_core_user] for Table [dbo].[core_user]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_user]
ON [dbo].[core_user]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_user]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_user]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_user',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([login])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'login',
			CONVERT(nvarchar(4000), OLD.[login], 0),
			CONVERT(nvarchar(4000), NEW.[login], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[login] <>
					OLD.[login]
				) Or
			
				(
					NEW.[login] Is Null And
					OLD.[login] Is Not Null
				) Or
				(
					NEW.[login] Is Not Null And
					OLD.[login] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([password])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'password',
			CONVERT(nvarchar(4000), OLD.[password], 0),
			CONVERT(nvarchar(4000), NEW.[password], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[password] <>
					OLD.[password]
				) Or
			
				(
					NEW.[password] Is Null And
					OLD.[password] Is Not Null
				) Or
				(
					NEW.[password] Is Not Null And
					OLD.[password] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([full_name])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'full_name',
			CONVERT(nvarchar(4000), OLD.[full_name], 0),
			CONVERT(nvarchar(4000), NEW.[full_name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[full_name] <>
					OLD.[full_name]
				) Or
			
				(
					NEW.[full_name] Is Null And
					OLD.[full_name] Is Not Null
				) Or
				(
					NEW.[full_name] Is Not Null And
					OLD.[full_name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([email])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'email',
			CONVERT(nvarchar(4000), OLD.[email], 0),
			CONVERT(nvarchar(4000), NEW.[email], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[email] <>
					OLD.[email]
				) Or
			
				(
					NEW.[email] Is Null And
					OLD.[email] Is Not Null
				) Or
				(
					NEW.[email] Is Not Null And
					OLD.[email] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([title])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'title',
			CONVERT(nvarchar(4000), OLD.[title], 0),
			CONVERT(nvarchar(4000), NEW.[title], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[title] <>
					OLD.[title]
				) Or
			
				(
					NEW.[title] Is Null And
					OLD.[title] Is Not Null
				) Or
				(
					NEW.[title] Is Not Null And
					OLD.[title] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([no_of_failed_logins])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'no_of_failed_logins',
			CONVERT(nvarchar(4000), OLD.[no_of_failed_logins], 0),
			CONVERT(nvarchar(4000), NEW.[no_of_failed_logins], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[no_of_failed_logins] <>
					OLD.[no_of_failed_logins]
				) Or
			
				(
					NEW.[no_of_failed_logins] Is Null And
					OLD.[no_of_failed_logins] Is Not Null
				) Or
				(
					NEW.[no_of_failed_logins] Is Not Null And
					OLD.[no_of_failed_logins] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([account_locked])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'account_locked',
			CONVERT(nvarchar(4000), OLD.[account_locked], 0),
			CONVERT(nvarchar(4000), NEW.[account_locked], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[account_locked] <>
					OLD.[account_locked]
				) Or
			
				(
					NEW.[account_locked] Is Null And
					OLD.[account_locked] Is Not Null
				) Or
				(
					NEW.[account_locked] Is Not Null And
					OLD.[account_locked] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([is_active])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'is_active',
			CONVERT(nvarchar(4000), OLD.[is_active], 0),
			CONVERT(nvarchar(4000), NEW.[is_active], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[is_active] <>
					OLD.[is_active]
				) Or
			
				(
					NEW.[is_active] Is Null And
					OLD.[is_active] Is Not Null
				) Or
				(
					NEW.[is_active] Is Not Null And
					OLD.[is_active] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_core_user '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_core_user Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_user]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_core_user]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_core_user has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_core_user cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_core_user]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_core_user]
	PRINT 'Trigger dropped: tr_d_AUDIT_core_user '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_core_user] for Table [dbo].[core_user]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_core_user] for Table [dbo].[core_user]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_user]
ON [dbo].[core_user]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_user]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_user]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_user',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'login',
		CONVERT(nvarchar(4000), OLD.[login], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[login] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'password',
		CONVERT(nvarchar(4000), OLD.[password], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[password] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'full_name',
		CONVERT(nvarchar(4000), OLD.[full_name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[full_name] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'email',
		CONVERT(nvarchar(4000), OLD.[email], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[email] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'title',
		CONVERT(nvarchar(4000), OLD.[title], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[title] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no_of_failed_logins',
		CONVERT(nvarchar(4000), OLD.[no_of_failed_logins], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[no_of_failed_logins] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'account_locked',
		CONVERT(nvarchar(4000), OLD.[account_locked], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[account_locked] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'is_active',
		CONVERT(nvarchar(4000), OLD.[is_active], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[is_active] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_core_user '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_core_user Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_user]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_core_user]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_core_user has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_core_user cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[core_user_roles]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_core_user_roles]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_core_user_roles]
   PRINT 'Trigger dropped: tr_i_AUDIT_core_user_roles'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_core_user_roles] for Table [dbo].[core_user_roles]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_core_user_roles] for Table [dbo].[core_user_roles]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_user_roles]
ON [dbo].[core_user_roles]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_user_roles]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_user_roles]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_user_roles',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[user]=N'''+replace(CONVERT(nvarchar(4000), NEW.[user], 0), '''', '''''')+'''', '[user] Is Null') + ' AND ' + IsNull('[order]='+CONVERT(nvarchar(4000), NEW.[order], 0), '[order] Is Null')),
		'user',
		CONVERT(nvarchar(4000), NEW.[user], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[user], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[order], 0))
	FROM inserted NEW
	WHERE NEW.[user] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[user]=N'''+replace(CONVERT(nvarchar(4000), NEW.[user], 0), '''', '''''')+'''', '[user] Is Null') + ' AND ' + IsNull('[order]='+CONVERT(nvarchar(4000), NEW.[order], 0), '[order] Is Null')),
		'role',
		CONVERT(nvarchar(4000), NEW.[role], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[user], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[order], 0))
	FROM inserted NEW
	WHERE NEW.[role] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[user]=N'''+replace(CONVERT(nvarchar(4000), NEW.[user], 0), '''', '''''')+'''', '[user] Is Null') + ' AND ' + IsNull('[order]='+CONVERT(nvarchar(4000), NEW.[order], 0), '[order] Is Null')),
		'order',
		CONVERT(nvarchar(4000), NEW.[order], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[user], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[order], 0))
	FROM inserted NEW
	WHERE NEW.[order] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_core_user_roles'
Else PRINT 'Trigger Failed: tr_i_AUDIT_core_user_roles Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_user_roles]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_core_user_roles]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_core_user_roles has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_core_user_roles cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_core_user_roles]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_core_user_roles]
	PRINT 'Trigger dropped: tr_u_AUDIT_core_user_roles '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_core_user_roles] for Table [dbo].[core_user_roles]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_core_user_roles] for Table [dbo].[core_user_roles]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_user_roles]
ON [dbo].[core_user_roles]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_user_roles]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_user_roles]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_user_roles',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([user])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1, KEY2
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[user]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[user], NEW.[user]), 0),'''' ,'''''')+'''', '[user] Is Null')+' AND '+IsNull('[order]='+CONVERT(nvarchar(4000), IsNull(OLD.[order], NEW.[order]), 0), '[order] Is Null')),
		    'user',
			CONVERT(nvarchar(4000), OLD.[user], 0),
			CONVERT(nvarchar(4000), NEW.[user], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[user], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[user], 0))), IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[order], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[order], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[user], 0)=CONVERT(nvarchar(4000), OLD.[user], 0) or (NEW.[user] Is Null and OLD.[user] Is Null)) AND (CONVERT(nvarchar(4000), NEW.[order], 0)=CONVERT(nvarchar(4000), OLD.[order], 0) or (NEW.[order] Is Null and OLD.[order] Is Null))
			WHERE (
			
			
				(
					NEW.[user] <>
					OLD.[user]
				) Or
			
				(
					NEW.[user] Is Null And
					OLD.[user] Is Not Null
				) Or
				(
					NEW.[user] Is Not Null And
					OLD.[user] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([role])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1, KEY2
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[user]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[user], NEW.[user]), 0),'''' ,'''''')+'''', '[user] Is Null')+' AND '+IsNull('[order]='+CONVERT(nvarchar(4000), IsNull(OLD.[order], NEW.[order]), 0), '[order] Is Null')),
		    'role',
			CONVERT(nvarchar(4000), OLD.[role], 0),
			CONVERT(nvarchar(4000), NEW.[role], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[user], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[user], 0))), IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[order], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[order], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[user], 0)=CONVERT(nvarchar(4000), OLD.[user], 0) or (NEW.[user] Is Null and OLD.[user] Is Null)) AND (CONVERT(nvarchar(4000), NEW.[order], 0)=CONVERT(nvarchar(4000), OLD.[order], 0) or (NEW.[order] Is Null and OLD.[order] Is Null))
			where (
			
			
				(
					NEW.[role] <>
					OLD.[role]
				) Or
			
				(
					NEW.[role] Is Null And
					OLD.[role] Is Not Null
				) Or
				(
					NEW.[role] Is Not Null And
					OLD.[role] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([order])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1, KEY2
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[user]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[user], NEW.[user]), 0),'''' ,'''''')+'''', '[user] Is Null')+' AND '+IsNull('[order]='+CONVERT(nvarchar(4000), IsNull(OLD.[order], NEW.[order]), 0), '[order] Is Null')),
		    'order',
			CONVERT(nvarchar(4000), OLD.[order], 0),
			CONVERT(nvarchar(4000), NEW.[order], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[user], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[user], 0))), IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[order], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[order], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[user], 0)=CONVERT(nvarchar(4000), OLD.[user], 0) or (NEW.[user] Is Null and OLD.[user] Is Null)) AND (CONVERT(nvarchar(4000), NEW.[order], 0)=CONVERT(nvarchar(4000), OLD.[order], 0) or (NEW.[order] Is Null and OLD.[order] Is Null))
			WHERE (
			
			
				(
					NEW.[order] <>
					OLD.[order]
				) Or
			
				(
					NEW.[order] Is Null And
					OLD.[order] Is Not Null
				) Or
				(
					NEW.[order] Is Not Null And
					OLD.[order] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_core_user_roles '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_core_user_roles Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_user_roles]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_core_user_roles]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_core_user_roles has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_core_user_roles cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_core_user_roles]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_core_user_roles]
	PRINT 'Trigger dropped: tr_d_AUDIT_core_user_roles '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_core_user_roles] for Table [dbo].[core_user_roles]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_core_user_roles] for Table [dbo].[core_user_roles]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_user_roles]
ON [dbo].[core_user_roles]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_user_roles]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_user_roles]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_user_roles',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[user]=N'''+replace(CONVERT(nvarchar(4000), OLD.[user], 0), '''', '''''')+'''', '[user] Is Null') + ' AND ' + IsNull('[order]='+CONVERT(nvarchar(4000), OLD.[order], 0), '[order] Is Null')),
		'user',
		CONVERT(nvarchar(4000), OLD.[user], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[user], 0)),  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[order], 0))
	FROM deleted OLD
	WHERE
		OLD.[user] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[user]=N'''+replace(CONVERT(nvarchar(4000), OLD.[user], 0), '''', '''''')+'''', '[user] Is Null') + ' AND ' + IsNull('[order]='+CONVERT(nvarchar(4000), OLD.[order], 0), '[order] Is Null')),
		'role',
		CONVERT(nvarchar(4000), OLD.[role], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[user], 0)),  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[order], 0))
	FROM deleted OLD
	WHERE
		OLD.[role] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[user]=N'''+replace(CONVERT(nvarchar(4000), OLD.[user], 0), '''', '''''')+'''', '[user] Is Null') + ' AND ' + IsNull('[order]='+CONVERT(nvarchar(4000), OLD.[order], 0), '[order] Is Null')),
		'order',
		CONVERT(nvarchar(4000), OLD.[order], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[user], 0)),  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[order], 0))
	FROM deleted OLD
	WHERE
		OLD.[order] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_core_user_roles '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_core_user_roles Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_user_roles]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_core_user_roles]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_core_user_roles has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_core_user_roles cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[core_version_info]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_core_version_info]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_core_version_info]
   PRINT 'Trigger dropped: tr_i_AUDIT_core_version_info'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_core_version_info] for Table [dbo].[core_version_info]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_core_version_info] for Table [dbo].[core_version_info]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_version_info]
ON [dbo].[core_version_info]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_version_info]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_version_info]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_version_info',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'database_version',
		CONVERT(nvarchar(4000), NEW.[database_version], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[database_version] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'software_version',
		CONVERT(nvarchar(4000), NEW.[software_version], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[software_version] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_core_version_info'
Else PRINT 'Trigger Failed: tr_i_AUDIT_core_version_info Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_version_info]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_core_version_info]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_core_version_info has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_core_version_info cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_core_version_info]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_core_version_info]
	PRINT 'Trigger dropped: tr_u_AUDIT_core_version_info '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_core_version_info] for Table [dbo].[core_version_info]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_core_version_info] for Table [dbo].[core_version_info]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_version_info]
ON [dbo].[core_version_info]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_version_info]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_version_info]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_version_info',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([database_version])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'database_version',
			CONVERT(nvarchar(4000), OLD.[database_version], 0),
			CONVERT(nvarchar(4000), NEW.[database_version], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[database_version] <>
					OLD.[database_version]
				) Or
			
				(
					NEW.[database_version] Is Null And
					OLD.[database_version] Is Not Null
				) Or
				(
					NEW.[database_version] Is Not Null And
					OLD.[database_version] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([software_version])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'software_version',
			CONVERT(nvarchar(4000), OLD.[software_version], 0),
			CONVERT(nvarchar(4000), NEW.[software_version], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[software_version] <>
					OLD.[software_version]
				) Or
			
				(
					NEW.[software_version] Is Null And
					OLD.[software_version] Is Not Null
				) Or
				(
					NEW.[software_version] Is Not Null And
					OLD.[software_version] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_core_version_info '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_core_version_info Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_version_info]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_core_version_info]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_core_version_info has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_core_version_info cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_core_version_info]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_core_version_info]
	PRINT 'Trigger dropped: tr_d_AUDIT_core_version_info '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_core_version_info] for Table [dbo].[core_version_info]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_core_version_info] for Table [dbo].[core_version_info]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_version_info]
ON [dbo].[core_version_info]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_version_info]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_version_info]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_version_info',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'database_version',
		CONVERT(nvarchar(4000), OLD.[database_version], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[database_version] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'software_version',
		CONVERT(nvarchar(4000), OLD.[software_version], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[software_version] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_core_version_info '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_core_version_info Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[core_version_info]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_core_version_info]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_core_version_info has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_core_version_info cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[documents_attached_document]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_documents_attached_document]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_documents_attached_document]
   PRINT 'Trigger dropped: tr_i_AUDIT_documents_attached_document'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_documents_attached_document] for Table [dbo].[documents_attached_document]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_documents_attached_document] for Table [dbo].[documents_attached_document]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_documents_attached_document]
ON [dbo].[documents_attached_document]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[documents_attached_document]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[documents_attached_document]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'documents_attached_document',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), NEW.[applies_to], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[applies_to] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to_oid',
		CONVERT(nvarchar(4000), NEW.[applies_to_oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[applies_to_oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'record_type_oid',
		CONVERT(nvarchar(4000), NEW.[record_type_oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[record_type_oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'date_added',
		CONVERT(nvarchar(4000), NEW.[date_added], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[date_added] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'file',
		CONVERT(nvarchar(4000), NEW.[file], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[file] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_documents_attached_document'
Else PRINT 'Trigger Failed: tr_i_AUDIT_documents_attached_document Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[documents_attached_document]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_documents_attached_document]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_documents_attached_document has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_documents_attached_document cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_documents_attached_document]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_documents_attached_document]
	PRINT 'Trigger dropped: tr_u_AUDIT_documents_attached_document '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_documents_attached_document] for Table [dbo].[documents_attached_document]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_documents_attached_document] for Table [dbo].[documents_attached_document]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_documents_attached_document]
ON [dbo].[documents_attached_document]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[documents_attached_document]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[documents_attached_document]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'documents_attached_document',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([applies_to])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'applies_to',
			CONVERT(nvarchar(4000), OLD.[applies_to], 0),
			CONVERT(nvarchar(4000), NEW.[applies_to], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[applies_to] <>
					OLD.[applies_to]
				) Or
			
				(
					NEW.[applies_to] Is Null And
					OLD.[applies_to] Is Not Null
				) Or
				(
					NEW.[applies_to] Is Not Null And
					OLD.[applies_to] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([applies_to_oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'applies_to_oid',
			CONVERT(nvarchar(4000), OLD.[applies_to_oid], 0),
			CONVERT(nvarchar(4000), NEW.[applies_to_oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[applies_to_oid] <>
					OLD.[applies_to_oid]
				) Or
			
				(
					NEW.[applies_to_oid] Is Null And
					OLD.[applies_to_oid] Is Not Null
				) Or
				(
					NEW.[applies_to_oid] Is Not Null And
					OLD.[applies_to_oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([record_type_oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'record_type_oid',
			CONVERT(nvarchar(4000), OLD.[record_type_oid], 0),
			CONVERT(nvarchar(4000), NEW.[record_type_oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[record_type_oid] <>
					OLD.[record_type_oid]
				) Or
			
				(
					NEW.[record_type_oid] Is Null And
					OLD.[record_type_oid] Is Not Null
				) Or
				(
					NEW.[record_type_oid] Is Not Null And
					OLD.[record_type_oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([date_added])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'date_added',
			CONVERT(nvarchar(4000), OLD.[date_added], 121),
			CONVERT(nvarchar(4000), NEW.[date_added], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[date_added] <>
					OLD.[date_added]
				) Or
			
				(
					NEW.[date_added] Is Null And
					OLD.[date_added] Is Not Null
				) Or
				(
					NEW.[date_added] Is Not Null And
					OLD.[date_added] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([file])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'file',
			CONVERT(nvarchar(4000), OLD.[file], 0),
			CONVERT(nvarchar(4000), NEW.[file], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[file] <>
					OLD.[file]
				) Or
			
				(
					NEW.[file] Is Null And
					OLD.[file] Is Not Null
				) Or
				(
					NEW.[file] Is Not Null And
					OLD.[file] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_documents_attached_document '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_documents_attached_document Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[documents_attached_document]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_documents_attached_document]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_documents_attached_document has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_documents_attached_document cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_documents_attached_document]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_documents_attached_document]
	PRINT 'Trigger dropped: tr_d_AUDIT_documents_attached_document '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_documents_attached_document] for Table [dbo].[documents_attached_document]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_documents_attached_document] for Table [dbo].[documents_attached_document]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_documents_attached_document]
ON [dbo].[documents_attached_document]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[documents_attached_document]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[documents_attached_document]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'documents_attached_document',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), OLD.[applies_to], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[applies_to] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to_oid',
		CONVERT(nvarchar(4000), OLD.[applies_to_oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[applies_to_oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'record_type_oid',
		CONVERT(nvarchar(4000), OLD.[record_type_oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[record_type_oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'date_added',
		CONVERT(nvarchar(4000), OLD.[date_added], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[date_added] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'file',
		CONVERT(nvarchar(4000), OLD.[file], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[file] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_documents_attached_document '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_documents_attached_document Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[documents_attached_document]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_documents_attached_document]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_documents_attached_document has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_documents_attached_document cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[documents_scanned_document]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_documents_scanned_document]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_documents_scanned_document]
   PRINT 'Trigger dropped: tr_i_AUDIT_documents_scanned_document'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_documents_scanned_document] for Table [dbo].[documents_scanned_document]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_documents_scanned_document] for Table [dbo].[documents_scanned_document]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_documents_scanned_document]
ON [dbo].[documents_scanned_document]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[documents_scanned_document]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[documents_scanned_document]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'documents_scanned_document',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), NEW.[applies_to], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[applies_to] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to_oid',
		CONVERT(nvarchar(4000), NEW.[applies_to_oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[applies_to_oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'date_added',
		CONVERT(nvarchar(4000), NEW.[date_added], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[date_added] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'reference',
		CONVERT(nvarchar(4000), NEW.[reference], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[reference] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'sub_path',
		CONVERT(nvarchar(4000), NEW.[sub_path], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[sub_path] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'document_type',
		CONVERT(nvarchar(4000), NEW.[document_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[document_type] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'module',
		CONVERT(nvarchar(4000), NEW.[module], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[module] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'module_description',
		CONVERT(nvarchar(4000), NEW.[module_description], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[module_description] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_documents_scanned_document'
Else PRINT 'Trigger Failed: tr_i_AUDIT_documents_scanned_document Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[documents_scanned_document]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_documents_scanned_document]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_documents_scanned_document has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_documents_scanned_document cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_documents_scanned_document]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_documents_scanned_document]
	PRINT 'Trigger dropped: tr_u_AUDIT_documents_scanned_document '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_documents_scanned_document] for Table [dbo].[documents_scanned_document]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_documents_scanned_document] for Table [dbo].[documents_scanned_document]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_documents_scanned_document]
ON [dbo].[documents_scanned_document]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[documents_scanned_document]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:07
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[documents_scanned_document]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'documents_scanned_document',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([applies_to])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'applies_to',
			CONVERT(nvarchar(4000), OLD.[applies_to], 0),
			CONVERT(nvarchar(4000), NEW.[applies_to], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[applies_to] <>
					OLD.[applies_to]
				) Or
			
				(
					NEW.[applies_to] Is Null And
					OLD.[applies_to] Is Not Null
				) Or
				(
					NEW.[applies_to] Is Not Null And
					OLD.[applies_to] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([applies_to_oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'applies_to_oid',
			CONVERT(nvarchar(4000), OLD.[applies_to_oid], 0),
			CONVERT(nvarchar(4000), NEW.[applies_to_oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[applies_to_oid] <>
					OLD.[applies_to_oid]
				) Or
			
				(
					NEW.[applies_to_oid] Is Null And
					OLD.[applies_to_oid] Is Not Null
				) Or
				(
					NEW.[applies_to_oid] Is Not Null And
					OLD.[applies_to_oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([date_added])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'date_added',
			CONVERT(nvarchar(4000), OLD.[date_added], 121),
			CONVERT(nvarchar(4000), NEW.[date_added], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[date_added] <>
					OLD.[date_added]
				) Or
			
				(
					NEW.[date_added] Is Null And
					OLD.[date_added] Is Not Null
				) Or
				(
					NEW.[date_added] Is Not Null And
					OLD.[date_added] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([reference])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'reference',
			CONVERT(nvarchar(4000), OLD.[reference], 0),
			CONVERT(nvarchar(4000), NEW.[reference], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[reference] <>
					OLD.[reference]
				) Or
			
				(
					NEW.[reference] Is Null And
					OLD.[reference] Is Not Null
				) Or
				(
					NEW.[reference] Is Not Null And
					OLD.[reference] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([sub_path])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'sub_path',
			CONVERT(nvarchar(4000), OLD.[sub_path], 0),
			CONVERT(nvarchar(4000), NEW.[sub_path], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[sub_path] <>
					OLD.[sub_path]
				) Or
			
				(
					NEW.[sub_path] Is Null And
					OLD.[sub_path] Is Not Null
				) Or
				(
					NEW.[sub_path] Is Not Null And
					OLD.[sub_path] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([document_type])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'document_type',
			CONVERT(nvarchar(4000), OLD.[document_type], 0),
			CONVERT(nvarchar(4000), NEW.[document_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[document_type] <>
					OLD.[document_type]
				) Or
			
				(
					NEW.[document_type] Is Null And
					OLD.[document_type] Is Not Null
				) Or
				(
					NEW.[document_type] Is Not Null And
					OLD.[document_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([module])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'module',
			CONVERT(nvarchar(4000), OLD.[module], 0),
			CONVERT(nvarchar(4000), NEW.[module], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[module] <>
					OLD.[module]
				) Or
			
				(
					NEW.[module] Is Null And
					OLD.[module] Is Not Null
				) Or
				(
					NEW.[module] Is Not Null And
					OLD.[module] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([module_description])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'module_description',
			CONVERT(nvarchar(4000), OLD.[module_description], 0),
			CONVERT(nvarchar(4000), NEW.[module_description], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[module_description] <>
					OLD.[module_description]
				) Or
			
				(
					NEW.[module_description] Is Null And
					OLD.[module_description] Is Not Null
				) Or
				(
					NEW.[module_description] Is Not Null And
					OLD.[module_description] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_documents_scanned_document '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_documents_scanned_document Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[documents_scanned_document]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_documents_scanned_document]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_documents_scanned_document has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_documents_scanned_document cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_documents_scanned_document]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_documents_scanned_document]
	PRINT 'Trigger dropped: tr_d_AUDIT_documents_scanned_document '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_documents_scanned_document] for Table [dbo].[documents_scanned_document]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_documents_scanned_document] for Table [dbo].[documents_scanned_document]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_documents_scanned_document]
ON [dbo].[documents_scanned_document]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[documents_scanned_document]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:08
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[documents_scanned_document]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'documents_scanned_document',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), OLD.[applies_to], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[applies_to] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to_oid',
		CONVERT(nvarchar(4000), OLD.[applies_to_oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[applies_to_oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'date_added',
		CONVERT(nvarchar(4000), OLD.[date_added], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[date_added] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'reference',
		CONVERT(nvarchar(4000), OLD.[reference], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[reference] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'sub_path',
		CONVERT(nvarchar(4000), OLD.[sub_path], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[sub_path] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'document_type',
		CONVERT(nvarchar(4000), OLD.[document_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[document_type] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'module',
		CONVERT(nvarchar(4000), OLD.[module], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[module] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'module_description',
		CONVERT(nvarchar(4000), OLD.[module_description], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[module_description] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_documents_scanned_document '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_documents_scanned_document Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[documents_scanned_document]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_documents_scanned_document]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_documents_scanned_document has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_documents_scanned_document cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[documents_stored_file]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:08
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_documents_stored_file]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_documents_stored_file]
   PRINT 'Trigger dropped: tr_i_AUDIT_documents_stored_file'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_documents_stored_file] for Table [dbo].[documents_stored_file]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_documents_stored_file] for Table [dbo].[documents_stored_file]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_documents_stored_file]
ON [dbo].[documents_stored_file]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[documents_stored_file]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:08
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[documents_stored_file]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'documents_stored_file',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'type',
		CONVERT(nvarchar(4000), NEW.[type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[type] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'mime_type',
		CONVERT(nvarchar(4000), NEW.[mime_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[mime_type] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), NEW.[name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[name] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'data',
		dbo.AUDIT_fn_HexToStr(NEW.[data]),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[data] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'sub_path',
		CONVERT(nvarchar(4000), NEW.[sub_path], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[sub_path] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'type_path_configuration',
		CONVERT(nvarchar(4000), NEW.[type_path_configuration], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[type_path_configuration] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'key',
		CONVERT(nvarchar(4000), NEW.[key], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[key] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_documents_stored_file'
Else PRINT 'Trigger Failed: tr_i_AUDIT_documents_stored_file Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[documents_stored_file]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_documents_stored_file]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_documents_stored_file has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_documents_stored_file cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_documents_stored_file]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_documents_stored_file]
	PRINT 'Trigger dropped: tr_u_AUDIT_documents_stored_file '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_documents_stored_file] for Table [dbo].[documents_stored_file]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_documents_stored_file] for Table [dbo].[documents_stored_file]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_documents_stored_file]
ON [dbo].[documents_stored_file]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[documents_stored_file]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:08
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[documents_stored_file]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'documents_stored_file',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([type])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'type',
			CONVERT(nvarchar(4000), OLD.[type], 0),
			CONVERT(nvarchar(4000), NEW.[type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[type] <>
					OLD.[type]
				) Or
			
				(
					NEW.[type] Is Null And
					OLD.[type] Is Not Null
				) Or
				(
					NEW.[type] Is Not Null And
					OLD.[type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([mime_type])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'mime_type',
			CONVERT(nvarchar(4000), OLD.[mime_type], 0),
			CONVERT(nvarchar(4000), NEW.[mime_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[mime_type] <>
					OLD.[mime_type]
				) Or
			
				(
					NEW.[mime_type] Is Null And
					OLD.[mime_type] Is Not Null
				) Or
				(
					NEW.[mime_type] Is Not Null And
					OLD.[mime_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([name])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'name',
			CONVERT(nvarchar(4000), OLD.[name], 0),
			CONVERT(nvarchar(4000), NEW.[name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[name] <>
					OLD.[name]
				) Or
			
				(
					NEW.[name] Is Null And
					OLD.[name] Is Not Null
				) Or
				(
					NEW.[name] Is Not Null And
					OLD.[name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([data])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'data',
			dbo.AUDIT_fn_HexToStr(OLD.[data]),
			dbo.AUDIT_fn_HexToStr(NEW.[data]),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[data] <>
					OLD.[data]
				) Or
			
				(
					NEW.[data] Is Null And
					OLD.[data] Is Not Null
				) Or
				(
					NEW.[data] Is Not Null And
					OLD.[data] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([sub_path])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'sub_path',
			CONVERT(nvarchar(4000), OLD.[sub_path], 0),
			CONVERT(nvarchar(4000), NEW.[sub_path], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[sub_path] <>
					OLD.[sub_path]
				) Or
			
				(
					NEW.[sub_path] Is Null And
					OLD.[sub_path] Is Not Null
				) Or
				(
					NEW.[sub_path] Is Not Null And
					OLD.[sub_path] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([type_path_configuration])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'type_path_configuration',
			CONVERT(nvarchar(4000), OLD.[type_path_configuration], 0),
			CONVERT(nvarchar(4000), NEW.[type_path_configuration], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[type_path_configuration] <>
					OLD.[type_path_configuration]
				) Or
			
				(
					NEW.[type_path_configuration] Is Null And
					OLD.[type_path_configuration] Is Not Null
				) Or
				(
					NEW.[type_path_configuration] Is Not Null And
					OLD.[type_path_configuration] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([key])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'key',
			CONVERT(nvarchar(4000), OLD.[key], 0),
			CONVERT(nvarchar(4000), NEW.[key], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[key] <>
					OLD.[key]
				) Or
			
				(
					NEW.[key] Is Null And
					OLD.[key] Is Not Null
				) Or
				(
					NEW.[key] Is Not Null And
					OLD.[key] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_documents_stored_file '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_documents_stored_file Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[documents_stored_file]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_documents_stored_file]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_documents_stored_file has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_documents_stored_file cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_documents_stored_file]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_documents_stored_file]
	PRINT 'Trigger dropped: tr_d_AUDIT_documents_stored_file '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_documents_stored_file] for Table [dbo].[documents_stored_file]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_documents_stored_file] for Table [dbo].[documents_stored_file]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_documents_stored_file]
ON [dbo].[documents_stored_file]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[documents_stored_file]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:08
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[documents_stored_file]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'documents_stored_file',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'type',
		CONVERT(nvarchar(4000), OLD.[type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[type] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'mime_type',
		CONVERT(nvarchar(4000), OLD.[mime_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[mime_type] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), OLD.[name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[name] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'data',
		dbo.AUDIT_fn_HexToStr(OLD.[data]),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[data] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'sub_path',
		CONVERT(nvarchar(4000), OLD.[sub_path], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[sub_path] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'type_path_configuration',
		CONVERT(nvarchar(4000), OLD.[type_path_configuration], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[type_path_configuration] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'key',
		CONVERT(nvarchar(4000), OLD.[key], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[key] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_documents_stored_file '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_documents_stored_file Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[documents_stored_file]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_documents_stored_file]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_documents_stored_file has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_documents_stored_file cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO



-- --------------------------------------------------------------------------------------------------------------
-- Legal:       You may freely edit and modify this template and make copies of it.
-- Description: Audit Triggers For table: [dbo].[documents_type_path_configuration]
-- Author:      ApexSQL Software
-- Date:        22/02/2017 11:37:08
-- --------------------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_i_AUDIT_documents_type_path_configuration]','TR') IS NOT NULL
BEGIN
   DROP TRIGGER [dbo].[tr_i_AUDIT_documents_type_path_configuration]
   PRINT 'Trigger dropped: tr_i_AUDIT_documents_type_path_configuration'
END
GO
-- Create INSERT trigger [dbo].[tr_i_AUDIT_documents_type_path_configuration] for Table [dbo].[documents_type_path_configuration]
Print 'Create INSERT trigger [dbo].[tr_i_AUDIT_documents_type_path_configuration] for Table [dbo].[documents_type_path_configuration]'
go
CREATE TRIGGER [dbo].[tr_i_AUDIT_documents_type_path_configuration]
ON [dbo].[documents_type_path_configuration]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[documents_type_path_configuration]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:08
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[documents_type_path_configuration]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'documents_type_path_configuration',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'type',
		CONVERT(nvarchar(4000), NEW.[type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[type] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), NEW.[applies_to], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[applies_to] Is Not Null
    
	INSERT INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'path_config',
		CONVERT(nvarchar(4000), NEW.[path_config], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[path_config] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End
GO

-- Display the status of Trigger Created 
If @@Error = 0 PRINT 'Trigger created: tr_i_AUDIT_documents_type_path_configuration'
Else PRINT 'Trigger Failed: tr_i_AUDIT_documents_type_path_configuration Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[documents_type_path_configuration]') AND OBJECTPROPERTY(id,'ExecIsLastInsertTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_i_AUDIT_documents_type_path_configuration]', 'Last', 'Insert'
  If @ISERROR = 0 PRINT 'Trigger tr_i_AUDIT_documents_type_path_configuration has been marked as Last'
  ELSE PRINT 'Trigger tr_i_AUDIT_documents_type_path_configuration cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_u_AUDIT_documents_type_path_configuration]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_u_AUDIT_documents_type_path_configuration]
	PRINT 'Trigger dropped: tr_u_AUDIT_documents_type_path_configuration '
END
GO

-- Create UPDATE trigger [dbo].[tr_u_AUDIT_documents_type_path_configuration] for Table [dbo].[documents_type_path_configuration]
Print 'Create UPDATE trigger [dbo].[tr_u_AUDIT_documents_type_path_configuration] for Table [dbo].[documents_type_path_configuration]'
go
CREATE TRIGGER [dbo].[tr_u_AUDIT_documents_type_path_configuration]
ON [dbo].[documents_type_path_configuration]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[documents_type_path_configuration]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:08
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[documents_type_path_configuration]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'documents_type_path_configuration',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([type])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'type',
			CONVERT(nvarchar(4000), OLD.[type], 0),
			CONVERT(nvarchar(4000), NEW.[type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[type] <>
					OLD.[type]
				) Or
			
				(
					NEW.[type] Is Null And
					OLD.[type] Is Not Null
				) Or
				(
					NEW.[type] Is Not Null And
					OLD.[type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([applies_to])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'applies_to',
			CONVERT(nvarchar(4000), OLD.[applies_to], 0),
			CONVERT(nvarchar(4000), NEW.[applies_to], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[applies_to] <>
					OLD.[applies_to]
				) Or
			
				(
					NEW.[applies_to] Is Null And
					OLD.[applies_to] Is Not Null
				) Or
				(
					NEW.[applies_to] Is Not Null And
					OLD.[applies_to] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([path_config])
	BEGIN
    
		INSERT
		INTO dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'path_config',
			CONVERT(nvarchar(4000), OLD.[path_config], 0),
			CONVERT(nvarchar(4000), NEW.[path_config], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[path_config] <>
					OLD.[path_config]
				) Or
			
				(
					NEW.[path_config] Is Null And
					OLD.[path_config] Is Not Null
				) Or
				(
					NEW.[path_config] Is Not Null And
					OLD.[path_config] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_u_AUDIT_documents_type_path_configuration '
ELSE PRINT 'Trigger Failed: tr_u_AUDIT_documents_type_path_configuration Error on Creation'
GO

-- mark the trigger as last 

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[documents_type_path_configuration]') AND OBJECTPROPERTY(id,'ExecIsLastUpdateTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT  
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_u_AUDIT_documents_type_path_configuration]', 'Last', 'Update'
  If @ISERROR = 0 PRINT 'Trigger tr_u_AUDIT_documents_type_path_configuration has been marked as Last'
  ELSE PRINT 'Trigger tr_u_AUDIT_documents_type_path_configuration cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END

GO

BEGIN TRANSACTION
IF OBJECT_ID('[dbo].[tr_d_AUDIT_documents_type_path_configuration]','TR') IS NOT NULL
BEGIN
	DROP TRIGGER [dbo].[tr_d_AUDIT_documents_type_path_configuration]
	PRINT 'Trigger dropped: tr_d_AUDIT_documents_type_path_configuration '
END
GO
-- Create DELETE trigger [dbo].[tr_d_AUDIT_documents_type_path_configuration] for Table [dbo].[documents_type_path_configuration]
Print 'Create DELETE trigger [dbo].[tr_d_AUDIT_documents_type_path_configuration] for Table [dbo].[documents_type_path_configuration]'
go
CREATE TRIGGER [dbo].[tr_d_AUDIT_documents_type_path_configuration]
ON [dbo].[documents_type_path_configuration]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[documents_type_path_configuration]
-- Author:       ApexSQL Software
-- Date:		 22/02/2017 11:37:08
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[documents_type_path_configuration]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'documents_type_path_configuration',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		dbo.fnc_Audit_UserGetCurrent(),
		GETDATE(),
		@ROWS_COUNT,
		'Diamond Fire'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'type',
		CONVERT(nvarchar(4000), OLD.[type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[type] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), OLD.[applies_to], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[applies_to] Is Not Null

	INSERT
	INTO dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'path_config',
		CONVERT(nvarchar(4000), OLD.[path_config], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[path_config] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END
GO

-- Display the status of Trigger Created
IF @@Error = 0 PRINT 'Trigger created: tr_d_AUDIT_documents_type_path_configuration '
ELSE PRINT 'Trigger Failed: tr_d_AUDIT_documents_type_path_configuration Error on Creation'
GO

-- mark the trigger as last

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE parent_obj=OBJECT_ID('[dbo].[documents_type_path_configuration]') AND OBJECTPROPERTY(id,'ExecIsLastDeleteTrigger')=1 AND xtype='TR')
BEGIN
  DECLARE @ISERROR INT
  EXEC @ISERROR = sp_settriggerorder '[dbo].[tr_d_AUDIT_documents_type_path_configuration]', 'Last', 'Delete'  
  If @ISERROR = 0 PRINT 'Trigger tr_d_AUDIT_documents_type_path_configuration has been marked as Last'
  ELSE PRINT 'Trigger tr_d_AUDIT_documents_type_path_configuration cannot be marked as Last'+ CHAR(10)+'Trigger creation is rolled back'
  IF @ISERROR <> 0 ROLLBACK ELSE COMMIT
END
GO


