/****** Object:  StoredProcedure [dbo].[AUDIT_prc_AggregateReport]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[AUDIT_prc_AggregateReport]
	@DATE_FROM 			nvarchar(50)	= NULL,
	@DATE_TO 			nvarchar(50)	= NULL,
    @WHERE				nvarchar(4000)	= NULL,
	@ROW_COUNT 			int 			= NULL,
	@GroupByDate 		tinyint 		= 1,
	@GroupByTableName 	bit 			= 0,
	@GroupByMODIFIED_BY bit 			= 0,
	@GroupByACTION 		bit 			= 0,
	@GroupByAPPLICATION bit 			= 0,
	@GroupByCOMPUTER 	bit 			= 0
AS
DECLARE	@sqlstr nvarchar(4000)
DECLARE	@DateExpression varchar(8000)
DECLARE	@DateFieldName varchar(20)
DECLARE @SearcheableName nvarchar(261)
declare @len int
declare @ver7 bit
declare @ver2000 bit
declare @WhereSql nvarchar(4000)
declare @cmptlvl int

Select @cmptlvl = t1.cmptlevel 
from master.dbo.sysdatabases t1
where t1.[name]=DB_NAME()

set @ver7 = 0
IF @cmptlvl < 80 set @ver7 = 1
set @ver2000 = 0
IF @cmptlvl < 90 set @ver2000 = 1

IF @GroupByDate not in (0,1,2,3,4) 
BEGIN
  RAISERROR ('@GroupByDate must be one of: 0,1,2,3,4',16,1)
  RETURN -1
END
if (select count(*) from ##Filter where [index]='DATABASE') = 0
	insert into ##Filter([index], [value]) values('DATABASE', '%')
if (select count(*) from ##Filter where [index]='TABLE_NAME') = 0
	insert into ##Filter([index], [value]) values('TABLE_NAME', '%')
if (select count(*) from ##Filter where [index]='TABLE_OWNER') = 0
	insert into ##Filter([index], [value]) values('TABLE_OWNER', '%')
if (select count(*) from ##Filter where [index]='USER_NAME') = 0
	insert into ##Filter([index], [value]) values('USER_NAME', '%')
if (select count(*) from ##Filter where [index]='ACTION_ID') = 0
	insert into ##Filter([index], [value]) values('ACTION_ID', '%')
if (select count(*) from ##Filter where [index]='HOST_NAME') = 0
	insert into ##Filter([index], [value]) values('HOST_NAME', '%')
if (select count(*) from ##Filter where [index]='APP_NAME') = 0
	insert into ##Filter([index], [value]) values('APP_NAME', '%')
SET @DateExpression = 
  CASE
   WHEN @GroupByDate = 0 
    THEN ''
   WHEN @GroupByDate = 1 
    THEN 'LEFT(CONVERT(varchar(20), convert(datetime,MODIFIED_DATE), 100),14) + RIGHT(CONVERT(varchar(20), convert(datetime,MODIFIED_DATE), 100),2) '
   WHEN @GroupByDate = 2
    THEN 'CONVERT(varchar(20), CONVERT(datetime,MODIFIED_DATE), 107) '
   WHEN @GroupByDate = 3 
    THEN 'LEFT(CONVERT(varchar(20), CONVERT(datetime,MODIFIED_DATE), 107),4)+RIGHT(CONVERT(varchar(20), CONVERT(datetime,MODIFIED_DATE), 107),4) '
   WHEN @GroupByDate = 4
    THEN 'RIGHT(CONVERT(varchar(20), CONVERT(datetime,MODIFIED_DATE), 107),4) '
  END  
SET @DateFieldName = 
  CASE
   WHEN @GroupByDate = 0 
    THEN ''
   WHEN @GroupByDate = 1 
    THEN ' AS ''Hour'''
   WHEN @GroupByDate = 2
    THEN ' AS ''Date'''
   WHEN @GroupByDate = 3 
    THEN ' AS ''Month'''
   WHEN @GroupByDate = 4
    THEN ' AS ''Year'''
  END  
SET @sqlstr = '
select TOP'+STR(CASE WHEN @ROW_COUNT is null THEN 99999 ELSE @ROW_COUNT END)+' * from (
SELECT sum(DATA_COUNT) AS [#], t.[DATABASE] as ''Database'''+
 CASE
  WHEN @GroupByTableName = 0 THEN ''
  ELSE ', TABLE_NAME as [Table name], TABLE_SCHEMA as [' +
	CASE @ver2000 WHEN 1 THEN 'Owner' ELSE 'Table schema' END +']'
 END +
 CASE
  WHEN @GroupByMODIFIED_BY = 0 THEN ''
  ELSE ', MODIFIED_BY as [Modified by]'
 END +
 CASE
  WHEN @GroupByACTION = 0 THEN ''
  ELSE ', CASE t.AUDIT_ACTION_ID 
              WHEN 1 THEN ''Update'' 
              WHEN 2 THEN ''Insert'' 
              WHEN 3 THEN ''Delete'' 
          END AS [Action]'
 END +
 CASE
  WHEN @GroupByAPPLICATION = 0 THEN ''
  ELSE ', APPLICATION as [Application]'
 END +
 CASE
  WHEN @GroupByCOMPUTER = 0 THEN ''
  ELSE ', COMPUTER as [Computer]'
 END +
 CASE
  WHEN @DateExpression <> '' 
  THEN ', '
  ELSE ''
 END +
@DateExpression+
@DateFieldName
set @sqlstr = @sqlstr +
 ' FROM (
		SELECT 
			  [DATABASE],
			  TABLE_NAME,
			  TABLE_SCHEMA,
			  AUDIT_ACTION_ID, 
			  MODIFIED_BY, 
			  CONVERT(varchar(20), MODIFIED_DATE, 113) AS MODIFIED_DATE,
			  HOST_NAME AS COMPUTER,
			  APP_NAME as APPLICATION,
   			  count(distinct convert(nvarchar(100), t.AUDIT_LOG_TRANSACTION_ID)) [DATA_COUNT]
		from dbo.AUDIT_LOG_TRANSACTIONS t 
			inner join dbo.AUDIT_LOG_DATA d
			on t.AUDIT_LOG_TRANSACTION_ID=d.AUDIT_LOG_TRANSACTION_ID
		group by 
			[DATABASE] ,
			[TABLE_NAME] ,
			[TABLE_SCHEMA] ,
			[AUDIT_ACTION_ID] ,
			[HOST_NAME] ,
			[APP_NAME] ,
			[MODIFIED_BY] ,
			[MODIFIED_DATE] 
	) t
	inner join ##Filter f1 on f1.[index]=''TABLE_NAME'' and t.TABLE_NAME like Replace(f1.[value]' + case @ver7 when 0 then ' collate database_default' else '' end + ', ''['', ''[[]'')
	inner join ##Filter f2 on f2.[index]=''TABLE_OWNER'' and t.TABLE_SCHEMA like Replace(f2.[value]' + case @ver7 when 0 then ' collate database_default' else '' end + ', ''['', ''[[]'')
	inner join ##Filter f3 on f3.[index]=''APP_NAME'' and t.APPLICATION like Replace(f3.[value]' + case @ver7 when 0 then ' collate database_default' else '' end + ', ''['', ''[[]'')
	inner join ##Filter f4 on f4.[index]=''HOST_NAME'' and t.COMPUTER like Replace(f4.[value]' + case @ver7 when 0 then ' collate database_default' else '' end + ', ''['', ''[[]'')
	inner join ##Filter f5 on f5.[index]=''USER_NAME'' and t.MODIFIED_BY like Replace(f5.[value]' + case @ver7 when 0 then ' collate database_default' else '' end + ', ''['', ''[[]'')
	inner join ##Filter f6 on f6.[index]=''ACTION_ID'' and Cast(t.AUDIT_ACTION_ID as char(1)) like Replace(f6.[value]' + case @ver7 when 0 then ' collate database_default' else '' end + ', ''['', ''[[]'')
	inner join ##Filter f7 on f7.[index]=''DATABASE'' and t.[DATABASE] like Replace(f7.[value]' + case @ver7 when 0 then ' collate database_default' else '' end + ', ''['', ''[[]'')
	where [DATA_COUNT]=[DATA_COUNT]
' +
 CASE
  WHEN @DATE_FROM is NULL THEN ''
  ELSE ' AND CONVERT(DATETIME,MODIFIED_DATE) >= '''+CONVERT(varchar(20),@DATE_FROM,120)+''''
 END +
 CASE
  WHEN @DATE_TO is NULL THEN ''
  ELSE ' AND CONVERT(DATETIME,MODIFIED_DATE) < '''+CONVERT(varchar(20),@DATE_TO,120)+''''
 END +
CASE
  WHEN @DateExpression = ''  THEN ' GROUP BY '
  ELSE ' GROUP BY ' + @DateExpression + ','
 END
 + '[DATABASE], ' +
 CASE WHEN @GroupByTableName 	= 1 	THEN ' TABLE_SCHEMA, TABLE_NAME,' 	ELSE '' END +
 CASE WHEN @GroupByMODIFIED_BY 	= 1 	THEN ' MODIFIED_BY,' 	ELSE '' END +
 CASE WHEN @GroupByACTION 	= 1 	THEN ' AUDIT_ACTION_ID,' 	ELSE '' END +
 CASE WHEN @GroupByAPPLICATION 	= 1 	THEN ' APPLICATION,' 	ELSE '' END +
 CASE WHEN @GroupByCOMPUTER 	= 1 	THEN ' COMPUTER,' 	ELSE '' END
set @len = len(@sqlstr)
if substring(@sqlstr, @len, 1) = ','
begin
	set @sqlstr = substring(@sqlstr,1,@len-1)
end
set @sqlstr = @sqlstr + ') [table]'
if @WHERE IS NOT NULL
begin
	set @WhereSql = @sqlstr+' where '+@WHERE
	exec sp_executesql @WhereSql
end
else
begin
	exec sp_executesql @sqlstr
end
RETURN @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[AUDIT_prc_Analyze]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[AUDIT_prc_Analyze]
	@DDL	  	bit	output,
	@Identity 	bit	output,
	@View	  	bit	output,
	@standard 	bit	output,
	@aggregate 	bit	output,
	@ddl_report	bit	output,
	@purge	  	bit	output,
  @undo	  	bit	output, -- Retained for compatibility with previous architecture 
	@Delete		bit	output,
	@Analyze	bit	output

as
	declare @cmptlvl int

    set @Identity=1 --now always
	Select @cmptlvl = t1.cmptlevel 
		from master.dbo.sysdatabases t1
		where t1.[name]=DB_NAME()

	--	DDL

	set @DDL=1	
		
		if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[AUDIT_prc_ReportingEnd]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
		BEGIN
			set @standard  = 0
			PRINT '     AUDIT_prc_ReportingEnd is Missing'
		END
		if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[AUDIT_prc_ReportingStart]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
		BEGIN
			set @standard  = 0
			PRINT '     AUDIT_prc_ReportingStart is Missing'
		END
		if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[AUDIT_prc_ReportingAddFilterValue]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
		BEGIN
			set @standard  = 0
			PRINT '     AUDIT_prc_ReportingAddFilterValue is Missing'
		END
    
		if NOT EXISTS (select * from dbo.sysobjects where id = object_id(N'[dbo].[AUDIT_LOG_DATA]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
		BEGIN
			set @DDL = 0
			PRINT '     AUDIT_LOG_DATA is Missing'
		END
	
		if NOT EXISTS (select * from dbo.sysobjects where id = object_id(N'[dbo].[AUDIT_LOG_TRANSACTIONS]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
		BEGIN
			set @DDL = 0
			PRINT '     AUDIT_LOG_TRANSACTIONS is Missing'
		END
		
		IF @cmptlvl > 70
		BEGIN
		
		IF OBJECTPROPERTY(OBJECT_ID('dbo.AUDIT_fn_HexToStr'), 'IsScalarFunction') IS NULL 
		BEGIN
			set @DDL = 0
			PRINT '     dbo.AUDIT_fn_HexToStr is Missing'
		END
		IF OBJECTPROPERTY(OBJECT_ID('dbo.AUDIT_fn_SqlVariantToString'), 'IsScalarFunction') IS NULL
		BEGIN
			set @DDL = 0
			PRINT '     dbo.AUDIT_fn_SqlVariantToString is Missing'
		END
		END

				IF @DDL = 0 
				BEGIN
					PRINT 'Internal DDL Script(s) Missing or Incomplete'
				END
				ELSE
				BEGIN
					PRINT 'Internal DDL Script(s) OK'
				END
			

	--	Indentity

	set @View = 1

		if NOT EXISTS (select * from dbo.sysobjects where id = object_id(N'[dbo].[AUDIT_VIEW]') and OBJECTPROPERTY(id, N'IsView') = 1)
		BEGIN
			set @View = 0
			PRINT '     AUDIT_VIEW is Missing'
		END
		
					IF @View = 0 
					BEGIN
						PRINT 'Audit View Script(s) Missing or Incomplete'
					END
					ELSE
					BEGIN
						PRINT 'Audit View Script(s) OK'
					END


	set @aggregate = 1

		if NOT EXISTS (select * from dbo.sysobjects where id = object_id(N'[dbo].[AUDIT_prc_AggregateReport]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
		BEGIN
			set @aggregate  = 0
			PRINT '     AUDIT_prc_AggregateReport is Missing'
		END
		
		if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[AUDIT_prc_ReportingStart]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
		BEGIN
			set @aggregate  = 0
			PRINT '     AUDIT_prc_ReportingStart is Missing'
		END
		if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[AUDIT_prc_ReportingEnd]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
		BEGIN
			set @aggregate  = 0
			PRINT '     AUDIT_prc_ReportingEnd is Missing'
		END
		if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[AUDIT_prc_ReportingAddFilterValue]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
		BEGIN
			set @aggregate  = 0
			PRINT '     AUDIT_prc_ReportingAddFilterValue is Missing'
		END

				IF @aggregate = 0 
				BEGIN
					PRINT 'Aggregate Reporting Script(s) Missing or Incomplete'
				END
				ELSE
				BEGIN
					PRINT 'Aggregate Reporting Script(s) OK'
				END

	set @standard = 1

		if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[AUDIT_prc_StandardReport]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
		BEGIN
			set @standard = 0
			PRINT '     AUDIT_prc_StandardReport is Missing'
		END
		
		if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[AUDIT_prc_ReportingEnd]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
		BEGIN
			set @standard  = 0
			PRINT '     AUDIT_prc_ReportingEnd is Missing'
		END
		if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[AUDIT_prc_ReportingStart]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
		BEGIN
			set @standard  = 0
			PRINT '     AUDIT_prc_ReportingStart is Missing'
		END
		if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[AUDIT_prc_ReportingAddFilterValue]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
		BEGIN
			set @standard  = 0
			PRINT '     AUDIT_prc_ReportingAddFilterValue is Missing'
		END

				IF @standard = 0 
				BEGIN
					PRINT 'Standard Reporting Script(s) Missing or Incomplete'
				END
				ELSE
				BEGIN
					PRINT 'Standard Reporting Script(s) OK'
				END
				
	set @ddl_report = 1

		if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[AUDIT_prc_DDLReport]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
		BEGIN
			set @ddl_report = 0
			PRINT '     AUDIT_prc_DDLReport is Missing'
		END
		
		if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[AUDIT_prc_ReportingEnd]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
		BEGIN
			set @ddl_report  = 0
			PRINT '     AUDIT_prc_ReportingEnd is Missing'
		END
		if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[AUDIT_prc_ReportingStart]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
		BEGIN
			set @ddl_report  = 0
			PRINT '     AUDIT_prc_ReportingStart is Missing'
		END
		if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[AUDIT_prc_ReportingAddFilterValue]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
		BEGIN
			set @ddl_report  = 0
			PRINT '     AUDIT_prc_ReportingAddFilterValue is Missing'
		END

				IF @ddl_report = 0 
				BEGIN
					PRINT 'DDL Reporting Script(s) Missing or Incomplete'
				END
				ELSE
				BEGIN
					PRINT 'DDL Reporting Script(s) OK'
				END

	set @purge = 1


		if NOT exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[AUDIT_prc_Purge_AUDIT_LOG]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
		BEGIN
			set @purge = 0
			PRINT '     AUDIT_prc_Purge_AUDIT_LOG'
		END
		
				IF @purge = 0 
				BEGIN
					PRINT 'Audit Data Purge Script(s) Missing or Incomplete'
				END
				ELSE
				BEGIN
					PRINT 'Audit Data Purge Script(s) OK'
				END

	set @Delete = 1

		if NOT EXISTS (select * from dbo.sysobjects where name = 'AUDIT_prc_DeleteArchitecture')
		BEGIN			
			set @Delete = 0
			PRINT '     AUDIT_prc_DeleteArchitecture is Missing'
		END
			
				IF @Delete = 0 
				BEGIN
					PRINT 'Delete Architecture Script(s) Missing or Incomplete'
				END
				ELSE
				BEGIN
					PRINT 'Delete Architecture Script(s) OK'
				END
			
	set @Analyze = 1

		if NOT EXISTS (select * from dbo.sysobjects where id = object_id(N'[dbo].[AUDIT_prc_Analyze]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
		BEGIN
			set @Delete = 0
			PRINT '     AUDIT_prc_Analyze is Missing'
		END
			
				IF @Analyze = 0 
				BEGIN
					PRINT 'Analyze Script(s) Missing or Incomplete'
				END
				ELSE
				BEGIN
					PRINT 'Analyze Script(s) OK'
				END


GO
/****** Object:  StoredProcedure [dbo].[AUDIT_prc_Purge_AUDIT_LOG]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

/* ------------------------------------------------------------

   PROCEDURE:     AUDIT_prc_Purge_AUDIT_LOG

   AUTHOR:        ApexSQL 
    
   UPDATED:	  	  19 Apr 2004

   CHANGES:       Version 2.10
   
		  		  Added @DELETE_ALL Parameter which will delete ALL Audit 
		  		  Log data regardless of what other parameters were specifiec
		  		  
		  		  Fixed some problems where data in AUDIT_LOG_DATA was not being deleted only AUDIT_LOG_TRANSACTIONS

------------------------------------------------------------ */


CREATE PROCEDURE [dbo].[AUDIT_prc_Purge_AUDIT_LOG]
(
	@DELETE_ALL BIT,			--	This will delete all data
	@OLDER_THAN INT = NULL,			--	pass NULL to skip this check
	@OLDER_THAN_TYPE TINYINT = NULL,	-- 	1 - DAY, 2 - WEEK, 3 - MONTH; if @older_than is NULL, this parameter is not important
	@MAX_ROWS INT = NULL			--	pass NULL to skip this check
)
AS
BEGIN
  
  DECLARE @DDLExists BIT
  SET @DDLExists = 0
  
  BEGIN
    IF EXISTS (select * from dbo.sysobjects where id = object_id(N'[dbo].[AUDIT_LOG_DDL]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
		  BEGIN
			  set @DDLExists = 1
		  END
  END
  
  -- Delete all data from auditing tables
	If @DELETE_ALL = 1 
	BEGIN
		DELETE FROM dbo.AUDIT_LOG_DATA
		DELETE FROM dbo.AUDIT_LOG_TRANSACTIONS
    IF @DDLExists = 1
    BEGIN
      DELETE FROM dbo.AUDIT_LOG_DDL
    END
	END


	IF @OLDER_THAN IS NOT NULL
	BEGIN
		-- Get the cut off date and time
		DECLARE @CUTOFF_DATETIME DATETIME
		SET @CUTOFF_DATETIME =
			CASE @OLDER_THAN_TYPE
				WHEN 1 THEN DATEADD(DAY, -@OLDER_THAN, GETDATE())
				WHEN 2 THEN DATEADD(WEEK,-@OLDER_THAN, GETDATE())
				WHEN 3 THEN DATEADD(MONTH, -@OLDER_THAN, GETDATE())
			END

		-- Delete all rows from auditing tables that are older than n day(s)
		PRINT CONVERT(VARCHAR,@CUTOFF_DATETIME)

		DELETE
		FROM dbo.AUDIT_LOG_DATA
		WHERE AUDIT_LOG_TRANSACTION_ID IN
		(SELECT AUDIT_LOG_TRANSACTION_ID FROM dbo.AUDIT_LOG_TRANSACTIONS
		WHERE	MODIFIED_DATE < @CUTOFF_DATETIME)

		DELETE
		FROM dbo.AUDIT_LOG_TRANSACTIONS
		WHERE
			MODIFIED_DATE < @CUTOFF_DATETIME
      
    IF @DDLExists = 1
    BEGIN
      DELETE
		  FROM dbo.AUDIT_LOG_DDL
		  WHERE
		  	MODIFIED_DATE < @CUTOFF_DATETIME
    END
	END

    -- Check if we should check for max number of rows
	IF @MAX_ROWS IS NOT NULL
	BEGIN
		-- Get AUDIT_LOG_TRANSACTIONS row count
		DECLARE @ROW_COUNT INT
		SELECT @ROW_COUNT = COUNT(*)
		FROM dbo.AUDIT_LOG_TRANSACTIONS

		-- Check if there are more than @MAX_ROWS rows in the database
		IF @ROW_COUNT > @MAX_ROWS
		BEGIN
			-- Create temporary tables to hold ids of records to be purged
			CREATE TABLE #AUDIT_LOG_PURGE_PROCESS_TEMP_TABLE (AUDIT_LOG_TRANSACTION_ID nvarchar(100))
      IF @DDLExists = 1
      BEGIN
        CREATE TABLE #AUDIT_LOG_PURGE_PROCESS_DDL_TEMP_TABLE (LogId int)
      END
      
			-- Create dynamic queries to fill the temporary tables
			DECLARE @SQL NVARCHAR(4000)
			SET @SQL ='
			INSERT
			INTO #AUDIT_LOG_PURGE_PROCESS_TEMP_TABLE
			SELECT TOP ' + CAST((@ROW_COUNT - @MAX_ROWS) AS varchar(10)) + ' AUDIT_LOG_TRANSACTION_ID
			FROM dbo.AUDIT_LOG_TRANSACTIONS
			ORDER BY MODIFIED_DATE'
      
      IF @DDLExists = 1
      BEGIN
        DECLARE @SQL_DDL NVARCHAR(4000)
		  	SET @SQL_DDL ='
		  	INSERT 
		  	INTO #AUDIT_LOG_PURGE_PROCESS_DDL_TEMP_TABLE
		  	SELECT TOP ' + CAST((@ROW_COUNT - @MAX_ROWS) AS varchar(10)) + ' LogId
		  	FROM dbo.AUDIT_LOG_DDL
		  	ORDER BY MODIFIED_DATE'
      END
			--PRINT @SQL
      --PRINT @SQL_DDL

			-- Fill temporary tables
			EXEC sp_executesql @SQL
      
      IF @DDLExists = 1
      BEGIN
        EXEC sp_executesql @SQL_DDL
      END

			-- Delete records from auditing tables
			DELETE
			FROM dbo.AUDIT_LOG_DATA
			WHERE AUDIT_LOG_TRANSACTION_ID IN
				    (SELECT AUDIT_LOG_TRANSACTION_ID
					 FROM #AUDIT_LOG_PURGE_PROCESS_TEMP_TABLE)

			DELETE
			FROM dbo.AUDIT_LOG_TRANSACTIONS
			WHERE AUDIT_LOG_TRANSACTION_ID IN
				(SELECT AUDIT_LOG_TRANSACTION_ID
				 FROM #AUDIT_LOG_PURGE_PROCESS_TEMP_TABLE)
        
      IF @DDLExists = 1
      BEGIN
        DELETE 
			  FROM dbo.AUDIT_LOG_DDL
			  WHERE LogId IN
			  	(SELECT LogId
			  	FROM #AUDIT_LOG_PURGE_PROCESS_DDL_TEMP_TABLE)
        
        --Drop temp table
        DROP TABLE #AUDIT_LOG_PURGE_PROCESS_DDL_TEMP_TABLE
      END
      
			-- Drop temporary tables
			DROP TABLE #AUDIT_LOG_PURGE_PROCESS_TEMP_TABLE
      
		END
	END
END

GO
/****** Object:  StoredProcedure [dbo].[AUDIT_prc_ReportingAddFilterValue]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

create procedure [dbo].[AUDIT_prc_ReportingAddFilterValue]
@index nvarchar(100),
@value nvarchar(4000)
as
begin
if not exists (select [value] from ##Filter where [index]=@index and [value] like Replace(@value collate database_default, '[', '[[]'))
	insert into ##Filter([index], [value]) values(@index, @value)
end

GO
/****** Object:  StoredProcedure [dbo].[AUDIT_prc_ReportingEnd]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
create procedure [dbo].[AUDIT_prc_ReportingEnd]
as
begin
drop table ##Filter
end

GO
/****** Object:  StoredProcedure [dbo].[AUDIT_prc_ReportingStart]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
create procedure [dbo].[AUDIT_prc_ReportingStart]
as
begin
create table ##Filter([index] nvarchar(20), [value] nvarchar(4000))
end

GO
/****** Object:  StoredProcedure [dbo].[AUDIT_prc_StandardReport]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[AUDIT_prc_StandardReport]

  (	@DATE_FROM 			nvarchar(50)	= NULL,
	@DATE_TO 			nvarchar(50)	= NULL,
    @OLD_VALUE			nvarchar(4000)    = NULL,    
    @NEW_VALUE			nvarchar(4000)    = NULL,    
    @WHERE				nvarchar(4000)   = NULL,
    @ROW_COUNT			int              = NULL)
   
AS
declare 
@strSql nvarchar(4000),
@ver7 bit,
@ver2000 bit,
@WhereSql nvarchar(4000),
@cmptlvl int

Select @cmptlvl = t1.cmptlevel 
from master.dbo.sysdatabases t1
where t1.[name]=DB_NAME()

set @ver7 = 0
IF @cmptlvl < 80 set @ver7 = 1
set @ver2000 = 0
IF @cmptlvl < 90 set @ver2000 = 1

set nocount on
/* Set replacement values for filter parameter */
if (select count(*) from ##Filter where [index]='DATABASE') = 0
	insert into ##Filter([index], [value]) values('DATABASE', '%')
if (select count(*) from ##Filter where [index]='TABLE_OWNER') = 0
	insert into ##Filter([index], [value]) values('TABLE_OWNER', '%')
if (select count(*) from ##Filter where [index]='TABLE_NAME') = 0
	insert into ##Filter([index], [value]) values('TABLE_NAME', '%')
if (select count(*) from ##Filter where [index]='FIELD_NAME') = 0
	insert into ##Filter([index], [value]) values('FIELD_NAME', '%')
if (select count(*) from ##Filter where [index]='USER_NAME') = 0
	insert into ##Filter([index], [value]) values('USER_NAME', '%')
if (select count(*) from ##Filter where [index]='ACTION_ID') = 0
	insert into ##Filter([index], [value]) values('ACTION_ID', '%')
if (select count(*) from ##Filter where [index]='HOST_NAME') = 0
	insert into ##Filter([index], [value]) values('HOST_NAME', '%')
if (select count(*) from ##Filter where [index]='APP_NAME') = 0
	insert into ##Filter([index], [value]) values('APP_NAME', '%')

IF @DATE_FROM IS NULL
   SET @DATE_FROM= '1/1/1900'

IF @DATE_TO IS NULL
   SET @DATE_TO = '1/1/3900'

IF @OLD_VALUE IS NULL
   SET @OLD_VALUE = '%'

IF @NEW_VALUE IS NULL
   SET @NEW_VALUE = '%'

IF @ROW_COUNT IS NULL
   SET @ROW_COUNT = 99999

/* Get Object ID */
--SELECT @obj_id = object_id(@full_table_name)

set @strSql = '
declare
@DATE_FROM      datetime,
@DATE_TO        datetime,
@OLD_VALUE      varchar(8000),
@NEW_VALUE      varchar(8000),
@ROW_COUNT      int
set @DATE_FROM = '''+convert(nvarchar(100), @DATE_FROM, 120)+'''
set @DATE_TO = '''+convert(nvarchar(100), @DATE_TO, 120)+'''
set @OLD_VALUE = '''+@OLD_VALUE+'''
set @NEW_VALUE = '''+@NEW_VALUE+'''
set @ROW_COUNT = '+cast(@ROW_COUNT as nvarchar(100))+'

select top '+cast(@ROW_COUNT as nvarchar(100))+' * from (
   SELECT  t.[DATABASE] ''Database'',
		   t.TABLE_NAME ''Table name'',
		   t.TABLE_SCHEMA ''' +
	CASE @ver2000 WHEN 1 THEN 'Owner' ELSE 'Table schema' END +''',
           CASE    t.AUDIT_ACTION_ID
               WHEN 2 then ''Insert''
               WHEN 1 then ''Update''
               WHEN 3 then ''Delete''
           END         ''Action'',
           KEY1 as ''Key 1'',
           KEY2 as ''Key 2'',
           KEY3 as ''Key 3'',
           KEY4 as ''Key 4'',
           d.COL_NAME ''Column name'',
           d.OLD_VALUE ''Old value'',
           d.NEW_VALUE ''New value'',
           t.MODIFIED_BY ''Modified by'',
           t.MODIFIED_DATE ''Modified date'',
           t.HOST_NAME ''Computer'',
           t.APP_NAME ''Application''
    FROM dbo.AUDIT_LOG_TRANSACTIONS t
    JOIN dbo.AUDIT_LOG_DATA d ON d.AUDIT_LOG_TRANSACTION_ID = t.AUDIT_LOG_TRANSACTION_ID,
	(select [value] from ##Filter where [index]=''DATABASE'') t_db,-- database
	(select [value] from ##Filter where [index]=''TABLE_OWNER'') t_owners,-- owners
	(select [value] from ##Filter where [index]=''TABLE_NAME'') t_tables,-- tables
	(select [value] from ##Filter where [index]=''FIELD_NAME'') t_columns,-- columns
	(select [value] from ##Filter where [index]=''USER_NAME'') t_users,-- users
	(select [value] from ##Filter where [index]=''ACTION_ID'') t_actions,-- actions
	(select [value] from ##Filter where [index]=''HOST_NAME'') t_hosts,-- hosts
	(select [value] from ##Filter where [index]=''APP_NAME'') t_apps -- applications
    WHERE  
	t.[DATABASE] like Replace(t_db.[value] ' +
	case @ver7 when 0 then ' collate database_default'
		else '' end +
		', ''['', ''[[]'') 
	  AND t.TABLE_SCHEMA like Replace(t_owners.[value] ' +
	case @ver7 when 0 then ' collate database_default'
		else '' end +
		', ''['', ''[[]'') 
	  AND t.TABLE_NAME like Replace(t_tables.[value] ' +
	case @ver7 when 0 then ' collate database_default'
		else '' end +
		', ''['', ''[[]'') 
      AND d.COL_NAME like Replace(t_columns.[value] 
	' +
	case @ver7 when 0 then ' collate database_default'
		else '' end +
		', ''['', ''[[]'')
      AND t.MODIFIED_BY like Replace(t_users.[value] ' +
	case @ver7 when 0 then ' collate database_default'
		else '' end +
		', ''['', ''[[]'')
      AND t.MODIFIED_DATE >= @DATE_FROM
      AND t.MODIFIED_DATE < @DATE_TO
      AND Cast(t.AUDIT_ACTION_ID as char(1)) like Replace(t_actions.[value] ' +
	case @ver7 when 0 then ' collate database_default'
		else '' end +
		', ''['', ''[[]'')
      AND ((d.OLD_VALUE IS NULL AND @OLD_VALUE = ''%'') OR (d.OLD_VALUE LIKE @OLD_VALUE))
      AND ((d.NEW_VALUE IS NULL AND @NEW_VALUE = ''%'') OR (d.NEW_VALUE LIKE @NEW_VALUE))
      AND t.HOST_NAME like Replace(t_hosts.[value] ' +
	case @ver7 when 0 then ' collate database_default'
		else '' end +
		', ''['', ''[[]'')
      AND t.APP_NAME like Replace(t_apps.[value] ' +
	case @ver7 when 0 then ' collate database_default'
		else '' end +
		', ''['', ''[[]'')
) [table]'

if @WHERE IS NOT NULL
begin
	set @WhereSql = @strSql+' where '+@WHERE
	exec sp_executesql @WhereSql
end
else
	exec sp_executesql @strSql

RETURN @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[ELMAH_GetErrorsXml]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ELMAH_GetErrorsXml]
(
    @Application NVARCHAR(60),
    @PageIndex INT = 0,
    @PageSize INT = 15,
    @TotalCount INT OUTPUT
)
AS 

    SET NOCOUNT ON

    DECLARE @FirstTimeUTC DATETIME
    DECLARE @FirstSequence INT
    DECLARE @StartRow INT
    DECLARE @StartRowIndex INT

    SELECT 
        @TotalCount = COUNT(1) 
    FROM 
        [ELMAH_Error]
    WHERE 
        [Application] = @Application

    -- Get the ID of the first error for the requested page

    SET @StartRowIndex = @PageIndex * @PageSize + 1

    IF @StartRowIndex <= @TotalCount
    BEGIN

        SET ROWCOUNT @StartRowIndex

        SELECT  
            @FirstTimeUTC = [TimeUtc],
            @FirstSequence = [Sequence]
        FROM 
            [ELMAH_Error]
        WHERE   
            [Application] = @Application
        ORDER BY 
            [TimeUtc] DESC, 
            [Sequence] DESC

    END
    ELSE
    BEGIN

        SET @PageSize = 0

    END

    -- Now set the row count to the requested page size and get
    -- all records below it for the pertaining application.

    SET ROWCOUNT @PageSize

    SELECT 
        errorId     = [ErrorId], 
        application = [Application],
        host        = [Host], 
        type        = [Type],
        source      = [Source],
        message     = [Message],
        [user]      = [User],
        statusCode  = [StatusCode], 
        time        = CONVERT(VARCHAR(50), [TimeUtc], 126) + 'Z'
    FROM 
        [ELMAH_Error] error
    WHERE
        [Application] = @Application
    AND
        [TimeUtc] <= @FirstTimeUTC
    AND 
        [Sequence] <= @FirstSequence
    ORDER BY
        [TimeUtc] DESC, 
        [Sequence] DESC
    FOR
        XML AUTO


GO
/****** Object:  StoredProcedure [dbo].[ELMAH_GetErrorXml]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ELMAH_GetErrorXml]
(
    @Application NVARCHAR(60),
    @ErrorId UNIQUEIDENTIFIER
)
AS

    SET NOCOUNT ON

    SELECT 
        [AllXml]
    FROM 
        [ELMAH_Error]
    WHERE
        [ErrorId] = @ErrorId
    AND
        [Application] = @Application


GO
/****** Object:  StoredProcedure [dbo].[ELMAH_LogError]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ELMAH_LogError]
(
    @ErrorId UNIQUEIDENTIFIER,
    @Application NVARCHAR(60),
    @Host NVARCHAR(30),
    @Type NVARCHAR(100),
    @Source NVARCHAR(60),
    @Message NVARCHAR(500),
    @User NVARCHAR(50),
    @AllXml NTEXT,
    @StatusCode INT,
    @TimeUtc DATETIME
)
AS

    SET NOCOUNT ON

    INSERT
    INTO
        [ELMAH_Error]
        (
            [ErrorId],
            [Application],
            [Host],
            [Type],
            [Source],
            [Message],
            [User],
            [AllXml],
            [StatusCode],
            [TimeUtc]
        )
    VALUES
        (
            @ErrorId,
            @Application,
            @Host,
            @Type,
            @Source,
            @Message,
            @User,
            @AllXml,
            @StatusCode,
            @TimeUtc
        )


GO
/****** Object:  StoredProcedure [dbo].[sp_Audit_DisableAuditTriggers]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		Brendan Sheehy
-- Create date: 30 May 2016
-- Description:	Use to disable all ApexSQL Audit Triggers - useful when importing data into existing 
--              database where audit is on.
-- =============================================
CREATE PROCEDURE [dbo].[sp_Audit_DisableAuditTriggers]

AS
BEGIN
  DECLARE @tblAuditTriggers TABLE
  (
    id INT,
    trigger_name NVARCHAR(200),
    table_schema NVARCHAR(200),   
    table_name NVARCHAR(200),
    isProcessed BIT
  )

  INSERT INTO @tblAuditTriggers (id,trigger_name,table_schema,table_name,isProcessed)
  --Get all ApexSQL AuditTriggers
  SELECT 
      sysobjects.id
      ,sysobjects.name AS trigger_name 
      ,s.name AS table_schema 
      ,OBJECT_NAME(parent_obj) AS table_name 
      ,isProcessed = 0
  FROM sysobjects 
  INNER JOIN sysusers 
      ON sysobjects.uid = sysusers.uid 
  INNER JOIN sys.tables t 
      ON sysobjects.parent_obj = t.object_id 
  INNER JOIN sys.schemas s 
      ON t.schema_id = s.schema_id 
  WHERE sysobjects.type = 'TR' AND (sysobjects.name like 'tr_d_AUDIT_%' OR sysobjects.name like 'tr_i_AUDIT_%' OR sysobjects.name like 'tr_u_AUDIT_%') 
  ORDER BY sysobjects.name
    

  --Iterate through the table   
  DECLARE @SQL VARCHAR(8000)
  Declare @Id int
  Declare @trigger_name NVARCHAR(200)
  Declare @table_schema NVARCHAR(200)
  Declare @table_name NVARCHAR(200)

  WHILE (SELECT Count(*) FROM @tblAuditTriggers WHERE isProcessed = 0) > 0
  BEGIN
      Select Top 1 @Id = id, @trigger_name = trigger_name,@table_schema = table_schema,@table_name = table_name From @tblAuditTriggers Where isProcessed = 0
      
       SET @SQL ='ALTER TABLE '+ @table_name + ' DISABLE TRIGGER ' + @trigger_name
			EXEC (@SQL)
      
      Update @tblAuditTriggers Set isProcessed = 1 Where id = @Id 

  END
END



GO
/****** Object:  StoredProcedure [dbo].[sp_Audit_EnableAuditTriggers]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		Brendan Sheehy
-- Create date: 30 May 2016
-- Description:	Use to enable all ApexSQL Audit Triggers - useful when importing data into existing 
--              database where audit is on.
-- =============================================
CREATE PROCEDURE [dbo].[sp_Audit_EnableAuditTriggers]

AS
BEGIN
  DECLARE @tblAuditTriggers TABLE
  (
    id INT,
    trigger_name NVARCHAR(200),
    table_schema NVARCHAR(200),   
    table_name NVARCHAR(200),
    isProcessed BIT
  )

  INSERT INTO @tblAuditTriggers (id,trigger_name,table_schema,table_name,isProcessed)
  --Get all ApexSQL AuditTriggers
  SELECT 
      sysobjects.id
      ,sysobjects.name AS trigger_name 
      ,s.name AS table_schema 
      ,OBJECT_NAME(parent_obj) AS table_name 
      ,isProcessed = 0
  FROM sysobjects 
  --INNER JOIN sysusers 
  --    ON sysobjects.uid = sysusers.uid 
  INNER JOIN sys.tables t 
      ON sysobjects.parent_obj = t.object_id 
  INNER JOIN sys.schemas s 
      ON t.schema_id = s.schema_id 
  WHERE sysobjects.type = 'TR' AND (sysobjects.name like 'tr_d_AUDIT_%' OR sysobjects.name like 'tr_i_AUDIT_%' OR sysobjects.name like 'tr_u_AUDIT_%') 
  ORDER BY sysobjects.name
    

  --Iterate through the table   
  DECLARE @SQL VARCHAR(8000)
  Declare @Id int
  Declare @trigger_name NVARCHAR(200)
  Declare @table_schema NVARCHAR(200)
  Declare @table_name NVARCHAR(200)

  WHILE (SELECT Count(*) FROM @tblAuditTriggers WHERE isProcessed = 0) > 0
  BEGIN
      Select Top 1 @Id = id, @trigger_name = trigger_name,@table_schema = table_schema,@table_name = table_name From @tblAuditTriggers Where isProcessed = 0
      
      SET @SQL ='ALTER TABLE '+ @table_name + ' ENABLE TRIGGER ' + @trigger_name
			EXEC (@SQL)
      
      Update @tblAuditTriggers Set isProcessed = 1 Where id = @Id 

  END
END



GO
/****** Object:  StoredProcedure [dbo].[sp_Audit_LookupApplication]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Brendan Sheehy
-- Create date: 09 March 2016
-- Description:	Used by Audit functionality to return lookup data for Audit search
-- =============================================
CREATE PROCEDURE [dbo].[sp_Audit_LookupApplication]
  @StartsWith NVARCHAR(255) = NULL
AS
BEGIN
  SELECT DISTINCT APP_NAME AS Val FROM dbo.AUDIT_LOG_TRANSACTIONS
  WHERE 1 = 1 AND (@StartsWith IS NULL OR APP_NAME LIKE @StartsWith + '%')
  ORDER BY APP_NAME
END


GO
/****** Object:  StoredProcedure [dbo].[sp_Audit_LookupColumnName]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Brendan Sheehy
-- Create date: 09 March 2016
-- Description:	Used by Audit functionality to return lookup data for Audit search
-- =============================================
CREATE PROCEDURE [dbo].[sp_Audit_LookupColumnName]
  @StartsWith NVARCHAR(255) = NULL
AS
BEGIN
  SELECT DISTINCT COL_NAME AS Val FROM dbo.AUDIT_LOG_DATA
  WHERE 1 = 1 AND (@StartsWith IS NULL OR COL_NAME LIKE @StartsWith + '%')
  ORDER BY COL_NAME
END


GO
/****** Object:  StoredProcedure [dbo].[sp_Audit_LookupHostName]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Brendan Sheehy
-- Create date: 09 March 2016
-- Description:	Used by Audit functionality to return lookup data for Audit search
-- =============================================
CREATE PROCEDURE [dbo].[sp_Audit_LookupHostName]
  @StartsWith NVARCHAR(255) = NULL
AS
BEGIN
  SELECT DISTINCT HOST_NAME AS Val FROM dbo.AUDIT_LOG_TRANSACTIONS
  WHERE 1 = 1 AND (@StartsWith IS NULL OR HOST_NAME LIKE @StartsWith + '%')
  ORDER BY HOST_NAME
END


GO
/****** Object:  StoredProcedure [dbo].[sp_Audit_LookupModifiedBy]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		Brendan Sheehy
-- Create date: 09 March 2016
-- Description:	Used by Audit functionality to return lookup data for Audit search
-- =============================================
CREATE PROCEDURE [dbo].[sp_Audit_LookupModifiedBy]
  @StartsWith NVARCHAR(255) = NULL
AS
BEGIN
  SELECT DISTINCT MODIFIED_BY AS Val FROM dbo.AUDIT_LOG_TRANSACTIONS
  WHERE 1 = 1 AND (@StartsWith IS NULL OR MODIFIED_BY LIKE @StartsWith + '%')
  ORDER BY MODIFIED_BY
END


GO
/****** Object:  StoredProcedure [dbo].[sp_Audit_LookupTableName]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		Brendan Sheehy
-- Create date: 09 March 2016
-- Description:	Used by Audit functionality to return lookup data for Audit search
-- =============================================
CREATE PROCEDURE [dbo].[sp_Audit_LookupTableName]
  @StartsWith NVARCHAR(255) = NULL
AS
BEGIN
  SELECT DISTINCT TABLE_NAME AS Val FROM dbo.AUDIT_LOG_TRANSACTIONS
  WHERE 1 = 1 AND (@StartsWith IS NULL OR TABLE_NAME LIKE @StartsWith + '%')
  ORDER BY TABLE_NAME
END


GO
/****** Object:  StoredProcedure [dbo].[sp_Audit_StandardReport]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Brendan Sheehy
-- Create date: 18 March 2016
-- Description:	Used by Audit functionality - its a copy of the AUDIT_prc_StandardReport with the following changes:
--              1. Adds the AUDIT_LOG_TRANSACTION_ID so that transactions can be GROUPED
--              2. Add Order By t.AUDIT_LOG_TRANSACTION_ID DESC
-- =============================================
CREATE PROCEDURE [dbo].[sp_Audit_StandardReport]
  (	@DATE_FROM 			nvarchar(50)	= NULL,
	  @DATE_TO 			nvarchar(50)	= NULL,
    @OLD_VALUE			nvarchar(4000)    = NULL,    
    @NEW_VALUE			nvarchar(4000)    = NULL,    
    @WHERE				nvarchar(4000)   = NULL,
    @ROW_COUNT			int              = NULL)
AS
declare 
@strSql nvarchar(4000),
@ver7 bit,
@ver2000 bit,
@WhereSql nvarchar(4000),
@cmptlvl int
Select @cmptlvl = t1.cmptlevel 
from master.dbo.sysdatabases t1
where t1.[name]=DB_NAME()
set @ver7 = 0
IF @cmptlvl < 80 set @ver7 = 1
set @ver2000 = 0
IF @cmptlvl < 90 set @ver2000 = 1
set nocount on
/* Set replacement values for filter parameter */
if (select count(*) from ##Filter where [index]='DATABASE') = 0
	insert into ##Filter([index], [value]) values('DATABASE', '%')
if (select count(*) from ##Filter where [index]='TABLE_OWNER') = 0
	insert into ##Filter([index], [value]) values('TABLE_OWNER', '%')
if (select count(*) from ##Filter where [index]='TABLE_NAME') = 0
	insert into ##Filter([index], [value]) values('TABLE_NAME', '%')
if (select count(*) from ##Filter where [index]='FIELD_NAME') = 0
	insert into ##Filter([index], [value]) values('FIELD_NAME', '%')
if (select count(*) from ##Filter where [index]='USER_NAME') = 0
	insert into ##Filter([index], [value]) values('USER_NAME', '%')
if (select count(*) from ##Filter where [index]='ACTION_ID') = 0
	insert into ##Filter([index], [value]) values('ACTION_ID', '%')
if (select count(*) from ##Filter where [index]='HOST_NAME') = 0
	insert into ##Filter([index], [value]) values('HOST_NAME', '%')
if (select count(*) from ##Filter where [index]='APP_NAME') = 0
	insert into ##Filter([index], [value]) values('APP_NAME', '%')
IF @DATE_FROM IS NULL
   SET @DATE_FROM= '1/1/1900'
IF @DATE_TO IS NULL
   SET @DATE_TO = '1/1/3900'
IF @OLD_VALUE IS NULL
   SET @OLD_VALUE = '%'
IF @NEW_VALUE IS NULL
   SET @NEW_VALUE = '%'
IF @ROW_COUNT IS NULL
   SET @ROW_COUNT = 99999
/* Get Object ID */
--SELECT @obj_id = object_id(@full_table_name)
set @strSql = '
declare
@DATE_FROM      datetime,
@DATE_TO        datetime,
@OLD_VALUE      varchar(8000),
@NEW_VALUE      varchar(8000),
@ROW_COUNT      int
set @DATE_FROM = '''+convert(nvarchar(100), @DATE_FROM, 120)+'''
set @DATE_TO = '''+convert(nvarchar(100), @DATE_TO, 120)+'''
set @OLD_VALUE = '''+@OLD_VALUE+'''
set @NEW_VALUE = '''+@NEW_VALUE+'''
set @ROW_COUNT = '+cast(@ROW_COUNT as nvarchar(100))+'
select top '+cast(@ROW_COUNT as nvarchar(100))+' * from (
   SELECT
       t.[AUDIT_LOG_TRANSACTION_ID],  
       t.[DATABASE] ''Database'',
		   t.TABLE_NAME ''Table name'',
		   t.TABLE_SCHEMA ''' +
	CASE @ver2000 WHEN 1 THEN 'Owner' ELSE 'Table schema' END +''',
           CASE    t.AUDIT_ACTION_ID
               WHEN 2 then ''Insert''
               WHEN 1 then ''Update''
               WHEN 3 then ''Delete''
           END         ''Action'',
           KEY1 as ''Key 1'',
           KEY2 as ''Key 2'',
           KEY3 as ''Key 3'',
           KEY4 as ''Key 4'',
           d.COL_NAME ''Column name'',
           d.OLD_VALUE ''Old value'',
           d.NEW_VALUE ''New value'',
           t.MODIFIED_BY ''Modified by'',
           t.MODIFIED_DATE ''Modified date'',
           t.HOST_NAME ''Computer'',
           t.APP_NAME ''Application''
    FROM dbo.AUDIT_LOG_TRANSACTIONS t
    JOIN dbo.AUDIT_LOG_DATA d ON d.AUDIT_LOG_TRANSACTION_ID = t.AUDIT_LOG_TRANSACTION_ID,
	(select [value] from ##Filter where [index]=''DATABASE'') t_db,-- database
	(select [value] from ##Filter where [index]=''TABLE_OWNER'') t_owners,-- owners
	(select [value] from ##Filter where [index]=''TABLE_NAME'') t_tables,-- tables
	(select [value] from ##Filter where [index]=''FIELD_NAME'') t_columns,-- columns
	(select [value] from ##Filter where [index]=''USER_NAME'') t_users,-- users
	(select [value] from ##Filter where [index]=''ACTION_ID'') t_actions,-- actions
	(select [value] from ##Filter where [index]=''HOST_NAME'') t_hosts,-- hosts
	(select [value] from ##Filter where [index]=''APP_NAME'') t_apps -- applications
    WHERE  
	t.[DATABASE] like Replace(t_db.[value] ' +
	case @ver7 when 0 then ' collate database_default'
		else '' end +
		', ''['', ''[[]'') 
	  AND t.TABLE_SCHEMA like Replace(t_owners.[value] ' +
	case @ver7 when 0 then ' collate database_default'
		else '' end +
		', ''['', ''[[]'') 
	  AND t.TABLE_NAME like Replace(t_tables.[value] ' +
	case @ver7 when 0 then ' collate database_default'
		else '' end +
		', ''['', ''[[]'') 
      AND d.COL_NAME like Replace(t_columns.[value] 
	' +
	case @ver7 when 0 then ' collate database_default'
		else '' end +
		', ''['', ''[[]'')
      AND t.MODIFIED_BY like Replace(t_users.[value] ' +
	case @ver7 when 0 then ' collate database_default'
		else '' end +
		', ''['', ''[[]'')
      AND t.MODIFIED_DATE >= @DATE_FROM
      AND t.MODIFIED_DATE < @DATE_TO
      AND Cast(t.AUDIT_ACTION_ID as char(1)) like Replace(t_actions.[value] ' +
	case @ver7 when 0 then ' collate database_default'
		else '' end +
		', ''['', ''[[]'')
      AND ((d.OLD_VALUE IS NULL AND @OLD_VALUE = ''%'') OR (d.OLD_VALUE LIKE @OLD_VALUE))
      AND ((d.NEW_VALUE IS NULL AND @NEW_VALUE = ''%'') OR (d.NEW_VALUE LIKE @NEW_VALUE))
      AND t.HOST_NAME like Replace(t_hosts.[value] ' +
	case @ver7 when 0 then ' collate database_default'
		else '' end +
		', ''['', ''[[]'')
      AND t.APP_NAME like Replace(t_apps.[value] ' +
	case @ver7 when 0 then ' collate database_default'
		else '' end +
		', ''['', ''[[]'')
) [table]'
if @WHERE IS NOT NULL
begin
	set @WhereSql = @strSql+' where '+@WHERE + ' ORDER BY AUDIT_LOG_TRANSACTION_ID DESC' 
	exec sp_executesql @WhereSql
end
else
  SET @strSql= @strSql + ' ORDER BY AUDIT_LOG_TRANSACTION_ID DESC' 
	exec sp_executesql @strSql
RETURN @@ERROR


GO
/****** Object:  StoredProcedure [dbo].[sp_DisableAllTriggers]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Brendan Sheehy
-- Create date: 30/June/2015
-- Description:	Used to disabe all Triggers on a database.
--				Use this at the start of the data import from existing Diamond Fire database
--				then use sp_EnableAllTriggers at  end of import.
-- =============================================
CREATE PROCEDURE [dbo].[sp_DisableAllTriggers]
AS
	DECLARE @string VARCHAR(8000)
	DECLARE @tableName NVARCHAR(500)
	DECLARE cur CURSOR
	FOR SELECT name AS tbname FROM sysobjects WHERE id IN(SELECT parent_obj FROM sysobjects WHERE xtype='tr')
	OPEN cur
		FETCH next FROM cur INTO @tableName
		WHILE @@fetch_status = 0
		BEGIN
			SET @string ='Alter table '+ @tableName + ' Disable trigger all'
			EXEC (@string)
			FETCH next FROM cur INTO @tableName
		END
		CLOSE cur
	DEALLOCATE cur


GO
/****** Object:  StoredProcedure [dbo].[sp_EnableAllTriggers]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Brendan Sheehy
-- Create date: 30/June/2015
-- Description:	Used to enable all Triggers on a database.
--				Use this at the end of the data import from existing Diamond Fire database
--				- at the start all Triggers were disabled
-- =============================================
CREATE PROCEDURE [dbo].[sp_EnableAllTriggers]
AS
	DECLARE @string VARCHAR(8000)
	DECLARE @tableName NVARCHAR(500)
	DECLARE cur CURSOR
	FOR SELECT name AS tbname FROM sysobjects WHERE id IN(SELECT parent_obj FROM sysobjects WHERE xtype='tr')
	OPEN cur
		FETCH next FROM cur INTO @tableName
		WHILE @@fetch_status = 0
		BEGIN
			SET @string ='Alter table '+ @tableName + ' Enable trigger all'
			EXEC (@string)
			FETCH next FROM cur INTO @tableName
		END
		CLOSE cur
	DEALLOCATE cur


GO
/****** Object:  StoredProcedure [dbo].[sp_LottoTicketDirectDebitGetWinners]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Brendan Sheehy
-- Create date: 24 December 2016
-- Description:	Returns data about tickets where there are 3 or more matches.
-- =============================================
CREATE PROCEDURE [dbo].[sp_LottoTicketDirectDebitGetWinners]
	@No1 INT , 
  @No2 INT , 
  @No3 INT , 
  @No4 INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

  ;WITH tblWinningTickets AS 
  (
	  SELECT 
		  tblA.[oid] ,tblA.[person], tblA.[no1], tblA.[no2], tblA.[no3], tblA.[no4],
		  tblPerson.forename, tblPerson.surname,
		  CASE  
			   WHEN tblA.[no1] IN (@No1,@No2,@No3,@No4) THEN 1 
			   ELSE 0 
		  END AS Match1,
		  CASE  
			   WHEN tblA.[no2] IN (@No1,@No2,@No3,@No4) THEN 1 
			   ELSE 0 
		  END AS Match2,
		  CASE  
			   WHEN tblA.[no3] IN (@No1,@No2,@No3,@No4) THEN 1 
			   ELSE 0 
		  END AS Match3,
		  CASE  
			   WHEN tblA.[no4] IN (@No1,@No2,@No3,@No4) THEN 1 
			   ELSE 0 
		  END AS Match4,
			  CASE WHEN tblA.[no1] IN (@No1,@No2,@No3,@No4) THEN 1 ELSE 0 END + 
			  CASE WHEN tblA.[no2] IN (@No1,@No2,@No3,@No4) THEN 1 ELSE 0 END + 
			  CASE WHEN tblA.[no3] IN (@No1,@No2,@No3,@No4) THEN 1 ELSE 0 END + 
			  CASE WHEN tblA.[no4] IN (@No1,@No2,@No3,@No4) THEN 1 ELSE 0 END
		  AS TotalMatches
	  FROM [dbo].[club_lotto_ticket_direct_debit] tblA
	  INNER JOIN [dbo].[club_person] tblPerson ON tblPerson.oid = tblA.person
  )
  SELECT * FROM tblWinningTickets
  WHERE TotalMatches>=3
  ORDER BY TotalMatches DESC
END

GO
/****** Object:  UserDefinedFunction [dbo].[AUDIT_fn_HexToStr]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

create function [dbo].[AUDIT_fn_HexToStr](@hex varbinary(8000))
returns varchar(8000)
as
begin
declare 
	@len int,
	@counter int,
	@res varchar(8000),
	@string char(16),
	@byte binary(1)

	set @string = '0123456789ABCDEF'
	set @res = '0x'
	set @len = datalength(@hex)
	set @counter = 1
	while(@counter <= @len)
	begin
		set @byte = substring(@hex, @counter, 1)
		set @res = @res + substring(@string, 1 + @byte/16, 1) + substring(@string, 1 + @byte - (@byte/16)*16, 1)
		set @counter = @counter + 1
	end
	return @res
end

GO
/****** Object:  UserDefinedFunction [dbo].[AUDIT_fn_SqlVariantToString]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

create function [dbo].[AUDIT_fn_SqlVariantToString](@var sql_variant, @string bit)
returns nvarchar(4000)
as
begin
declare
@type varchar(20),
@result nvarchar(4000)

set @type = cast(SQL_VARIANT_PROPERTY(@var,'BaseType') as varchar(20))
if (@type='binary' or @type='varbinary')
	set @result = cast(dbo.AUDIT_fn_HexToStr(cast(@var as varbinary(8000))) as nvarchar(4000))
else if (@type='float' or @type='real')
	set @result = convert(nvarchar(4000), @var, 3)
else if (@type='int'
	or @type='tinyint'
	or @type='smallint'
	or @type='bigint'
	or @type='bit'
	or @type='decimal'
	or @type='numeric'
	)
	set @result = convert(nvarchar(4000), @var)
else if (@type='timestamp')
	set @result = convert(nvarchar(4000), convert(bigint, @var))
else if (@string = 1)
	set @result = 'N''' + convert(nvarchar(4000), @var) + ''''
else
	set @result = convert(nvarchar(4000), @var)
return @result
end

GO
/****** Object:  Table [dbo].[AUDIT_LOG_DATA]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[AUDIT_LOG_DATA](
	[AUDIT_LOG_DATA_ID] [int] IDENTITY(1,1) NOT NULL,
	[AUDIT_LOG_TRANSACTION_ID] [int] NOT NULL,
	[PRIMARY_KEY_DATA] [nvarchar](1500) NOT NULL,
	[COL_NAME] [nvarchar](128) NOT NULL,
	[OLD_VALUE_LONG] [ntext] NULL,
	[NEW_VALUE_LONG] [ntext] NULL,
	[NEW_VALUE_BLOB] [image] NULL,
	[NEW_VALUE]  AS (isnull(CONVERT([nvarchar](4000),[NEW_VALUE_LONG]),CONVERT([varchar](8000),CONVERT([varbinary](8000),substring([NEW_VALUE_BLOB],(1),(8000)))))),
	[OLD_VALUE]  AS (CONVERT([nvarchar](4000),[OLD_VALUE_LONG])),
	[PRIMARY_KEY]  AS ([PRIMARY_KEY_DATA]),
	[DATA_TYPE] [char](1) NOT NULL,
	[KEY1] [nvarchar](500) NULL,
	[KEY2] [nvarchar](500) NULL,
	[KEY3] [nvarchar](500) NULL,
	[KEY4] [nvarchar](500) NULL,
PRIMARY KEY CLUSTERED 
(
	[AUDIT_LOG_DATA_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[AUDIT_LOG_TRANSACTIONS]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[AUDIT_LOG_TRANSACTIONS](
	[AUDIT_LOG_TRANSACTION_ID] [int] IDENTITY(1,1) NOT NULL,
	[DATABASE] [nvarchar](128) NOT NULL,
	[TABLE_NAME] [nvarchar](261) NOT NULL,
	[TABLE_SCHEMA] [nvarchar](261) NOT NULL,
	[AUDIT_ACTION_ID] [tinyint] NOT NULL,
	[HOST_NAME] [varchar](128) NOT NULL,
	[APP_NAME] [varchar](128) NOT NULL,
	[MODIFIED_BY] [varchar](128) NOT NULL,
	[MODIFIED_DATE] [datetime] NOT NULL,
	[AFFECTED_ROWS] [int] NOT NULL,
	[SYSOBJ_ID]  AS (object_id([TABLE_NAME])),
PRIMARY KEY CLUSTERED 
(
	[AUDIT_LOG_TRANSACTION_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[club_club_details]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[club_club_details](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[key] [int] NOT NULL DEFAULT ((0)),
	[name] [nvarchar](255) NOT NULL,
	[description] [nvarchar](255) NULL,
	[history] [nvarchar](max) NULL,
	[address_number] [nvarchar](200) NULL,
	[address_street] [nvarchar](200) NULL,
	[address_town] [nvarchar](200) NULL,
	[address_county] [nvarchar](200) NULL,
	[address_country] [nvarchar](200) NULL,
	[address_post_code] [nvarchar](255) NULL,
	[address_xlng_coord] [float] NULL,
	[address_ylat_coord] [float] NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[club_committee]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[club_committee](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[name] [nvarchar](255) NOT NULL,
	[year] [int] NOT NULL DEFAULT ((0)),
	[description] [nvarchar](255) NULL,
	[start_date] [datetime] NULL,
	[end_date] [datetime] NULL,
	[active] [bit] NOT NULL DEFAULT ((1)),
	[time_type] [nchar](1) NOT NULL DEFAULT ((0)),
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[name] ASC,
	[year] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[club_committee_admin]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[club_committee_admin](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[user] [uniqueidentifier] NOT NULL,
	[committee] [uniqueidentifier] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[club_committee_member]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[club_committee_member](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[person] [uniqueidentifier] NOT NULL,
	[committee] [uniqueidentifier] NOT NULL,
	[committee_member_type] [uniqueidentifier] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[club_committee_member_type]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[club_committee_member_type](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[active] [bit] NOT NULL DEFAULT ((1)),
	[default] [bit] NOT NULL DEFAULT ((0)),
	[name] [nvarchar](255) NOT NULL,
	[description] [nvarchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[club_committee_minute]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[club_committee_minute](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[date] [datetime] NOT NULL,
	[minutes_text] [nvarchar](max) NULL,
	[active] [bit] NOT NULL,
	[committee] [uniqueidentifier] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[club_lotto]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[club_lotto](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[lotto_draw_date] [datetime] NOT NULL,
	[message] [nvarchar](255) NULL,
	[jackpot] [decimal](19, 5) NOT NULL,
	[lotto_result] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[club_lotto_result]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[club_lotto_result](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[no1] [int] NOT NULL,
	[no2] [int] NOT NULL,
	[no3] [int] NOT NULL,
	[no4] [int] NOT NULL,
	[no5] [int] NOT NULL,
	[lotto] [uniqueidentifier] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[club_lotto_result_winner]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[club_lotto_result_winner](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[message] [nvarchar](255) NULL,
	[matches] [int] NOT NULL,
	[no1] [int] NOT NULL,
	[no2] [int] NOT NULL,
	[no3] [int] NOT NULL,
	[no4] [int] NOT NULL,
	[lotto_result] [uniqueidentifier] NOT NULL,
	[person] [uniqueidentifier] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[club_lotto_ticket_direct_debit]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[club_lotto_ticket_direct_debit](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[key] [int] NOT NULL DEFAULT ((0)),
	[no1] [int] NOT NULL DEFAULT ((0)),
	[no2] [int] NOT NULL DEFAULT ((0)),
	[no3] [int] NOT NULL DEFAULT ((0)),
	[no4] [int] NOT NULL DEFAULT ((0)),
	[active] [bit] NOT NULL DEFAULT ((1)),
	[start_date] [datetime] NOT NULL,
	[end_date] [datetime] NULL,
	[person] [uniqueidentifier] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[club_membership_type]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[club_membership_type](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[name] [nvarchar](255) NOT NULL,
	[year] [int] NOT NULL DEFAULT ((0)),
	[time_type] [nchar](1) NOT NULL DEFAULT ((0)),
	[sex] [nchar](1) NOT NULL DEFAULT ((0)),
	[key] [int] NOT NULL DEFAULT ((0)),
	[active] [bit] NOT NULL DEFAULT ((1)),
	[start_date] [datetime] NULL,
	[end_date] [datetime] NULL,
	[cost] [float] NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[name] ASC,
	[year] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[club_person]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[club_person](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[key] [int] IDENTITY(1,1) NOT NULL,
	[sex] [nchar](1) NOT NULL DEFAULT ((0)),
	[active] [bit] NOT NULL DEFAULT ((1)),
	[forename] [nvarchar](255) NOT NULL,
	[surname] [nvarchar](255) NOT NULL,
	[dob] [datetime] NULL,
	[phone] [nvarchar](255) NULL,
	[mobile_no] [nvarchar](255) NULL,
	[email] [nvarchar](255) NULL,
	[alergies] [bit] NOT NULL DEFAULT ((1)),
	[alergies_details] [nvarchar](255) NULL,
	[comments] [nvarchar](255) NULL,
	[player_profile] [nvarchar](2000) NULL,
	[address_number] [nvarchar](200) NULL,
	[address_street] [nvarchar](200) NULL,
	[address_town] [nvarchar](200) NULL,
	[address_county] [nvarchar](200) NULL,
	[address_country] [nvarchar](200) NULL,
	[address_post_code] [nvarchar](255) NULL,
	[address_xlng_coord] [float] NULL,
	[address_ylat_coord] [float] NULL,
	[title] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[club_person_guardian]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[club_person_guardian](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[person] [uniqueidentifier] NOT NULL,
	[guardian] [uniqueidentifier] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[club_person_membership_type]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[club_person_membership_type](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[date] [datetime] NOT NULL,
	[active] [bit] NOT NULL,
	[person] [uniqueidentifier] NOT NULL,
	[membership_type] [uniqueidentifier] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[club_person_qualification]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[club_person_qualification](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[date_taken] [datetime] NOT NULL,
	[active] [bit] NOT NULL,
	[result] [nvarchar](255) NULL,
	[person] [uniqueidentifier] NOT NULL,
	[qualification] [uniqueidentifier] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[club_person_title]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[club_person_title](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[description] [nvarchar](10) NULL,
	[active] [bit] NOT NULL DEFAULT ((1)),
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[club_qualification]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[club_qualification](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[name] [nvarchar](255) NOT NULL,
	[active] [bit] NOT NULL DEFAULT ((1)),
	[description] [nvarchar](1000) NULL,
	[cost] [float] NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[club_team]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[club_team](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[active] [bit] NOT NULL DEFAULT ((1)),
	[name] [nvarchar](255) NOT NULL,
	[time_type] [nchar](1) NOT NULL DEFAULT ((0)),
	[sex] [nchar](1) NOT NULL DEFAULT ((0)),
	[year] [int] NOT NULL DEFAULT ((0)),
	[start_date] [datetime] NULL,
	[end_date] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[club_team_admin]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[club_team_admin](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[user] [uniqueidentifier] NOT NULL,
	[team] [uniqueidentifier] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[club_team_member]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[club_team_member](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[person] [uniqueidentifier] NOT NULL,
	[team] [uniqueidentifier] NOT NULL,
	[team_member_type] [uniqueidentifier] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[club_team_member_type]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[club_team_member_type](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[active] [bit] NOT NULL DEFAULT ((1)),
	[admin_member] [bit] NOT NULL DEFAULT ((0)),
	[playing_member] [bit] NOT NULL DEFAULT ((0)),
	[default] [bit] NOT NULL DEFAULT ((0)),
	[name] [nvarchar](255) NOT NULL,
	[description] [nvarchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[core_application_session]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_application_session](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[date] [datetime] NOT NULL,
	[session_id] [int] NOT NULL,
	[host] [nvarchar](50) NULL,
	[id] [nvarchar](255) NULL,
	[process_id] [int] NOT NULL,
	[end_date] [datetime] NULL,
	[user] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[core_category_access]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_category_access](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[category] [nvarchar](255) NOT NULL,
	[access] [int] NOT NULL,
	[role] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[core_class_access]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_class_access](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[class_type] [nvarchar](255) NULL,
	[property] [nvarchar](255) NULL,
	[value] [nvarchar](255) NULL,
	[access] [int] NOT NULL,
	[role] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[core_class_command]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_class_command](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[class_type] [nvarchar](255) NULL,
	[command_index] [int] NOT NULL,
	[point] [nchar](1) NOT NULL,
	[order] [nchar](1) NOT NULL,
	[command_type] [nvarchar](255) NULL,
	[init_data] [nvarchar](max) NULL,
	[property] [nvarchar](100) NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[core_command]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[core_command](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[icon] [varbinary](max) NULL,
	[description] [nvarchar](255) NULL,
	[concrete_command] [nvarchar](255) NULL,
	[init_data] [nvarchar](max) NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[core_criterion]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_criterion](
	[oid] [uniqueidentifier] NOT NULL,
	[type] [nchar](1) NOT NULL,
	[orev] [int] NOT NULL,
	[field_name] [nvarchar](255) NOT NULL,
	[caption] [nvarchar](255) NOT NULL,
	[field_type] [nvarchar](255) NULL,
	[match_type] [nchar](1) NOT NULL,
	[is_mandatory] [bit] NOT NULL,
	[is_visible] [bit] NOT NULL,
	[check_for_null] [bit] NOT NULL,
	[lookup_index] [nvarchar](255) NULL,
	[dictionary_name] [nvarchar](255) NULL,
	[lookup_type] [nvarchar](255) NULL,
	[display_format] [nvarchar](255) NULL,
	[use_specified_value] [bit] NOT NULL,
	[lookup_property_name] [nvarchar](255) NULL,
	[replacement_type] [nchar](20) NOT NULL,
	[ascending] [bit] NOT NULL,
	[parent] [uniqueidentifier] NULL,
	[search_spec] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[core_display_format]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_display_format](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[class_type] [nvarchar](255) NOT NULL,
	[display_name] [nvarchar](50) NULL,
	[default_sort] [nvarchar](255) NULL,
	[summary_format] [nvarchar](255) NULL,
	[list_format] [nvarchar](255) NULL,
	[tabs] [nvarchar](max) NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[class_type] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[core_field_access]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_field_access](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[access] [int] NOT NULL,
	[field_name] [nvarchar](50) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[core_field_access_roles]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_field_access_roles](
	[field_access] [uniqueidentifier] NOT NULL,
	[role] [uniqueidentifier] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[core_field_view_map]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_field_view_map](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[display_name] [nvarchar](255) NULL,
	[field_name] [nvarchar](255) NOT NULL,
	[is_hidden] [bit] NOT NULL,
	[view_class] [nvarchar](255) NULL,
	[row] [int] NULL,
	[col] [int] NULL,
	[col_span] [int] NULL,
	[row_span] [int] NULL,
	[max_length] [int] NULL,
	[min_length] [int] NULL,
	[show_display_name] [bit] NOT NULL,
	[prefix_label] [nvarchar](255) NULL,
	[tab] [nvarchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[core_function]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_function](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[name] [nvarchar](255) NULL,
	[description] [nvarchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[core_incrementing_id]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_incrementing_id](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[applies_to] [nvarchar](255) NULL,
	[current] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[core_incrementing_property_config]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_incrementing_property_config](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[applies_to] [nvarchar](255) NULL,
	[property] [nvarchar](255) NOT NULL,
	[format] [nvarchar](255) NOT NULL,
	[id_length] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[core_incrementing_property_id]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_incrementing_property_id](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[applies_to] [nvarchar](255) NULL,
	[current] [int] NOT NULL,
	[property_config] [uniqueidentifier] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[property_config] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[core_incrementing_property_yearly_id]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_incrementing_property_yearly_id](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[year] [int] NOT NULL,
	[short_year] [tinyint] NOT NULL,
	[applies_to] [nvarchar](255) NULL,
	[current] [int] NOT NULL,
	[property_config] [uniqueidentifier] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[property_config] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[core_incrementing_yearly_id]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_incrementing_yearly_id](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[year] [int] NOT NULL,
	[short_year] [tinyint] NOT NULL,
	[applies_to] [nvarchar](255) NULL,
	[current] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[core_log_entry]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_log_entry](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[level] [int] NOT NULL,
	[sub_system] [nvarchar](255) NOT NULL,
	[description] [nvarchar](255) NOT NULL,
	[details] [nvarchar](max) NULL,
	[dismissed] [bit] NOT NULL,
	[date] [datetime] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[core_log_entry_viewed_by]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_log_entry_viewed_by](
	[log_entry] [uniqueidentifier] NOT NULL,
	[user] [uniqueidentifier] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[core_profile]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_profile](
	[oid] [uniqueidentifier] NOT NULL,
	[option] [int] NOT NULL,
	[application] [nvarchar](30) NULL,
	[user] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[core_profile_items]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_profile_items](
	[profile] [uniqueidentifier] NOT NULL,
	[value] [nvarchar](max) NULL,
	[key] [nvarchar](255) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[profile] ASC,
	[key] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[core_property_description]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_property_description](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[class_type] [nvarchar](255) NOT NULL,
	[property] [nvarchar](255) NOT NULL,
	[description] [nvarchar](255) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[core_role]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_role](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[name] [nvarchar](80) NOT NULL,
	[active] [bit] NOT NULL DEFAULT ((0)),
	[description] [nvarchar](255) NULL,
	[default_access] [int] NOT NULL DEFAULT ((0)),
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[core_role_function_access]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_role_function_access](
	[role] [uniqueidentifier] NOT NULL,
	[function] [uniqueidentifier] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[core_role_start_page_commands]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_role_start_page_commands](
	[role] [uniqueidentifier] NOT NULL,
	[command] [uniqueidentifier] NOT NULL,
	[order] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[role] ASC,
	[order] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[core_search_spec]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_search_spec](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[header_fields] [nvarchar](255) NULL,
	[command_class] [nvarchar](255) NULL,
	[description] [nvarchar](30) NULL,
	[applies_to] [nvarchar](255) NULL,
	[display_index] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[core_system_info]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_system_info](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[application_name] [nvarchar](255) NULL,
	[customer_name] [nvarchar](255) NULL,
	[ver_major] [int] NOT NULL,
	[ver_minor] [int] NOT NULL,
	[ver_schema] [int] NOT NULL,
	[ver_build] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[core_user]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_user](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[login] [nvarchar](100) NOT NULL,
	[password] [nvarchar](30) NULL,
	[full_name] [nvarchar](100) NULL,
	[email] [nvarchar](100) NULL,
	[title] [nvarchar](30) NULL,
	[no_of_failed_logins] [int] NOT NULL DEFAULT ((0)),
	[account_locked] [bit] NOT NULL DEFAULT ((0)),
	[is_active] [bit] NOT NULL DEFAULT ((1)),
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[login] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[core_user_roles]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_user_roles](
	[user] [uniqueidentifier] NOT NULL,
	[role] [uniqueidentifier] NOT NULL,
	[order] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[user] ASC,
	[order] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[core_version_info]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[core_version_info](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[database_version] [nvarchar](255) NULL,
	[software_version] [nvarchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[documents_attached_document]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[documents_attached_document](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[applies_to] [nvarchar](255) NULL,
	[applies_to_oid] [uniqueidentifier] NOT NULL,
	[record_type_oid] [uniqueidentifier] NULL,
	[date_added] [datetime] NULL,
	[file] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[documents_scanned_document]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[documents_scanned_document](
	[oid] [uniqueidentifier] NOT NULL,
	[orev] [int] NOT NULL,
	[applies_to] [nvarchar](255) NULL,
	[applies_to_oid] [uniqueidentifier] NOT NULL,
	[date_added] [datetime] NULL,
	[reference] [nvarchar](255) NULL,
	[sub_path] [nvarchar](255) NULL,
	[document_type] [nvarchar](255) NULL,
	[module] [int] NOT NULL,
	[module_description] [nvarchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[documents_stored_file]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[documents_stored_file](
	[oid] [uniqueidentifier] NOT NULL,
	[type] [nchar](1) NOT NULL,
	[orev] [int] NOT NULL,
	[mime_type] [nvarchar](255) NULL,
	[name] [nvarchar](255) NULL,
	[data] [varbinary](max) NULL,
	[sub_path] [nvarchar](255) NULL,
	[type_path_configuration] [uniqueidentifier] NULL,
	[key] [nvarchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[documents_type_path_configuration]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[documents_type_path_configuration](
	[oid] [uniqueidentifier] NOT NULL,
	[type] [nchar](1) NOT NULL,
	[orev] [int] NOT NULL,
	[applies_to] [nvarchar](255) NULL,
	[path_config] [nvarchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[oid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[applies_to] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ELMAH_Error]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ELMAH_Error](
	[ErrorId] [uniqueidentifier] NOT NULL,
	[Application] [nvarchar](60) NOT NULL,
	[Host] [nvarchar](50) NOT NULL,
	[Type] [nvarchar](100) NOT NULL,
	[Source] [nvarchar](60) NOT NULL,
	[Message] [nvarchar](500) NOT NULL,
	[User] [nvarchar](50) NOT NULL,
	[StatusCode] [int] NOT NULL,
	[TimeUtc] [datetime] NOT NULL,
	[Sequence] [int] IDENTITY(1,1) NOT NULL,
	[AllXml] [ntext] NOT NULL,
 CONSTRAINT [PK_ELMAH_Error] PRIMARY KEY NONCLUSTERED 
(
	[ErrorId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  View [dbo].[AUDIT_UNDO]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[AUDIT_UNDO] AS

/* ------------------------------------------------------------

VIEW:          AUDIT_UNDO

DESCRIPTION:   Selects Audit Log records and returns all rows from the
               AUDIT_LOG_TRANSACTIONS ALT, with the matching rows in the AUDIT_LOG_DATA AD.
               
   ------------------------------------------------------------ */

SELECT    
	ALT.AUDIT_LOG_TRANSACTION_ID,    
	TABLE_NAME = ALT.TABLE_NAME,
	TABLE_SCHEMA = ALT.TABLE_SCHEMA,
	CASE    
		WHEN ALT.AUDIT_ACTION_ID = 3 THEN 'Delete' 
		WHEN ALT.AUDIT_ACTION_ID = 2 THEN 'Insert'
		WHEN ALT.AUDIT_ACTION_ID = 1 THEN 'Update'
	END AS ACTION_NAME,
	ALT.HOST_NAME,    
	ALT.APP_NAME,    
	ALT.MODIFIED_BY,    
	ALT.MODIFIED_DATE,    
	ALT.AFFECTED_ROWS,
	AUDIT_LOG_DATA_ID,  
	PRIMARY_KEY,  
	COL_NAME,  
	OLD_VALUE,  
	NEW_VALUE,
	DATA_TYPE      
FROM AUDIT_LOG_TRANSACTIONS ALT
	LEFT JOIN  AUDIT_LOG_DATA AD
		ON AD.AUDIT_LOG_TRANSACTION_ID = ALT.AUDIT_LOG_TRANSACTION_ID

GO
/****** Object:  View [dbo].[AUDIT_VIEW]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[AUDIT_VIEW] AS

/* ------------------------------------------------------------

VIEW:          AUDIT_VIEW

DESCRIPTION:   Selects Audit Log records and groups by MODIFIED_DATE and PK
               effectively grouping audit data by Audit transaction
               
   ------------------------------------------------------------ */

SELECT MAX(t.TABLE_NAME) AS TABLE_NAME,
    CASE MAX(t.AUDIT_ACTION_ID) 
    WHEN 1 THEN 'UPDATE' 
    WHEN 2 THEN 'INSERT' 
    WHEN 3 THEN 'DELETE' 
    END AS ACTION, 
    MAX(t.MODIFIED_BY) AS MODIFIED_BY, 
    MAX(PRIMARY_KEY_DATA) AS PRIMARY_KEY,
    COUNT(DISTINCT PRIMARY_KEY_DATA) AS REC_COUNT,
    CONVERT(varchar(20), MODIFIED_DATE, 113) AS MODIFIED_DATE,
    Max(HOST_NAME) AS COMPUTER,
    Max(APP_NAME) as APPLICATION
FROM dbo.AUDIT_LOG_TRANSACTIONS t
INNER JOIN dbo.AUDIT_LOG_DATA r ON r.AUDIT_LOG_TRANSACTION_ID = t.AUDIT_LOG_TRANSACTION_ID
GROUP BY MODIFIED_DATE, PRIMARY_KEY_DATA

GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IDX1_AUDIT_LOG_DATA]    Script Date: 13/02/2017 08:56:45 ******/
CREATE NONCLUSTERED INDEX [IDX1_AUDIT_LOG_DATA] ON [dbo].[AUDIT_LOG_DATA]
(
	[COL_NAME] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IDX2_AUDIT_LOG_DATA]    Script Date: 13/02/2017 08:56:45 ******/
CREATE NONCLUSTERED INDEX [IDX2_AUDIT_LOG_DATA] ON [dbo].[AUDIT_LOG_DATA]
(
	[AUDIT_LOG_TRANSACTION_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IDX1_AUDIT_LOG_TRANSACTIONS]    Script Date: 13/02/2017 08:56:45 ******/
CREATE NONCLUSTERED INDEX [IDX1_AUDIT_LOG_TRANSACTIONS] ON [dbo].[AUDIT_LOG_TRANSACTIONS]
(
	[TABLE_NAME] ASC,
	[AUDIT_ACTION_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IDX2_AUDIT_LOG_TRANSACTIONS]    Script Date: 13/02/2017 08:56:45 ******/
CREATE NONCLUSTERED INDEX [IDX2_AUDIT_LOG_TRANSACTIONS] ON [dbo].[AUDIT_LOG_TRANSACTIONS]
(
	[MODIFIED_DATE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IDX3_AUDIT_LOG_TRANSACTIONS]    Script Date: 13/02/2017 08:56:45 ******/
CREATE NONCLUSTERED INDEX [IDX3_AUDIT_LOG_TRANSACTIONS] ON [dbo].[AUDIT_LOG_TRANSACTIONS]
(
	[MODIFIED_BY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IDX4_AUDIT_LOG_TRANSACTIONS]    Script Date: 13/02/2017 08:56:45 ******/
CREATE NONCLUSTERED INDEX [IDX4_AUDIT_LOG_TRANSACTIONS] ON [dbo].[AUDIT_LOG_TRANSACTIONS]
(
	[HOST_NAME] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_ELMAH_Error_App_Time_Seq]    Script Date: 13/02/2017 08:56:45 ******/
CREATE NONCLUSTERED INDEX [IX_ELMAH_Error_App_Time_Seq] ON [dbo].[ELMAH_Error]
(
	[Application] ASC,
	[TimeUtc] DESC,
	[Sequence] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE [dbo].[AUDIT_LOG_DATA] ADD  DEFAULT ('A') FOR [DATA_TYPE]
GO
ALTER TABLE [dbo].[AUDIT_LOG_TRANSACTIONS] ADD  DEFAULT (db_name()) FOR [DATABASE]
GO
ALTER TABLE [dbo].[club_committee_minute] ADD  DEFAULT ('getdate()') FOR [date]
GO
ALTER TABLE [dbo].[club_committee_minute] ADD  DEFAULT ((1)) FOR [active]
GO
ALTER TABLE [dbo].[club_lotto] ADD  DEFAULT ('getdate()') FOR [lotto_draw_date]
GO
ALTER TABLE [dbo].[club_lotto] ADD  DEFAULT ((0)) FOR [jackpot]
GO
ALTER TABLE [dbo].[club_lotto_result] ADD  DEFAULT ((0)) FOR [no1]
GO
ALTER TABLE [dbo].[club_lotto_result] ADD  DEFAULT ((0)) FOR [no2]
GO
ALTER TABLE [dbo].[club_lotto_result] ADD  DEFAULT ((0)) FOR [no3]
GO
ALTER TABLE [dbo].[club_lotto_result] ADD  DEFAULT ((0)) FOR [no4]
GO
ALTER TABLE [dbo].[club_lotto_result] ADD  DEFAULT ((0)) FOR [no5]
GO
ALTER TABLE [dbo].[club_lotto_result_winner] ADD  DEFAULT ((0)) FOR [matches]
GO
ALTER TABLE [dbo].[club_lotto_result_winner] ADD  DEFAULT ((0)) FOR [no1]
GO
ALTER TABLE [dbo].[club_lotto_result_winner] ADD  DEFAULT ((0)) FOR [no2]
GO
ALTER TABLE [dbo].[club_lotto_result_winner] ADD  DEFAULT ((0)) FOR [no3]
GO
ALTER TABLE [dbo].[club_lotto_result_winner] ADD  DEFAULT ((0)) FOR [no4]
GO
ALTER TABLE [dbo].[club_person_membership_type] ADD  DEFAULT (getdate()) FOR [date]
GO
ALTER TABLE [dbo].[club_person_membership_type] ADD  DEFAULT ((1)) FOR [active]
GO
ALTER TABLE [dbo].[club_person_qualification] ADD  DEFAULT (getdate()) FOR [date_taken]
GO
ALTER TABLE [dbo].[club_person_qualification] ADD  DEFAULT ((1)) FOR [active]
GO
ALTER TABLE [dbo].[core_application_session] ADD  DEFAULT (getdate()) FOR [date]
GO
ALTER TABLE [dbo].[core_application_session] ADD  DEFAULT (@@spid) FOR [session_id]
GO
ALTER TABLE [dbo].[core_application_session] ADD  DEFAULT (host_name()) FOR [host]
GO
ALTER TABLE [dbo].[core_application_session] ADD  DEFAULT ((0)) FOR [process_id]
GO
ALTER TABLE [dbo].[core_category_access] ADD  DEFAULT ((0)) FOR [access]
GO
ALTER TABLE [dbo].[core_class_access] ADD  DEFAULT ((0)) FOR [access]
GO
ALTER TABLE [dbo].[core_class_command] ADD  DEFAULT ((0)) FOR [command_index]
GO
ALTER TABLE [dbo].[core_class_command] ADD  DEFAULT ((0)) FOR [point]
GO
ALTER TABLE [dbo].[core_class_command] ADD  DEFAULT ((0)) FOR [order]
GO
ALTER TABLE [dbo].[core_criterion] ADD  DEFAULT ((0)) FOR [match_type]
GO
ALTER TABLE [dbo].[core_criterion] ADD  DEFAULT ((0)) FOR [is_mandatory]
GO
ALTER TABLE [dbo].[core_criterion] ADD  DEFAULT ((1)) FOR [is_visible]
GO
ALTER TABLE [dbo].[core_criterion] ADD  DEFAULT ((0)) FOR [check_for_null]
GO
ALTER TABLE [dbo].[core_criterion] ADD  DEFAULT ((0)) FOR [use_specified_value]
GO
ALTER TABLE [dbo].[core_criterion] ADD  DEFAULT ((0)) FOR [replacement_type]
GO
ALTER TABLE [dbo].[core_criterion] ADD  DEFAULT ((1)) FOR [ascending]
GO
ALTER TABLE [dbo].[core_field_access] ADD  DEFAULT ((0)) FOR [access]
GO
ALTER TABLE [dbo].[core_field_view_map] ADD  DEFAULT ((0)) FOR [is_hidden]
GO
ALTER TABLE [dbo].[core_field_view_map] ADD  DEFAULT ((0)) FOR [show_display_name]
GO
ALTER TABLE [dbo].[core_incrementing_id] ADD  DEFAULT ((0)) FOR [current]
GO
ALTER TABLE [dbo].[core_incrementing_property_config] ADD  DEFAULT ((6)) FOR [id_length]
GO
ALTER TABLE [dbo].[core_incrementing_property_id] ADD  DEFAULT ((0)) FOR [current]
GO
ALTER TABLE [dbo].[core_incrementing_property_yearly_id] ADD  DEFAULT ((0)) FOR [year]
GO
ALTER TABLE [dbo].[core_incrementing_property_yearly_id] ADD  DEFAULT ((0)) FOR [short_year]
GO
ALTER TABLE [dbo].[core_incrementing_property_yearly_id] ADD  DEFAULT ((0)) FOR [current]
GO
ALTER TABLE [dbo].[core_incrementing_yearly_id] ADD  DEFAULT ((0)) FOR [year]
GO
ALTER TABLE [dbo].[core_incrementing_yearly_id] ADD  DEFAULT ((0)) FOR [short_year]
GO
ALTER TABLE [dbo].[core_incrementing_yearly_id] ADD  DEFAULT ((0)) FOR [current]
GO
ALTER TABLE [dbo].[core_log_entry] ADD  DEFAULT ((0)) FOR [level]
GO
ALTER TABLE [dbo].[core_log_entry] ADD  DEFAULT ((0)) FOR [dismissed]
GO
ALTER TABLE [dbo].[core_profile] ADD  DEFAULT ((0)) FOR [option]
GO
ALTER TABLE [dbo].[core_search_spec] ADD  DEFAULT ((0)) FOR [display_index]
GO
ALTER TABLE [dbo].[core_system_info] ADD  DEFAULT ((0)) FOR [ver_major]
GO
ALTER TABLE [dbo].[core_system_info] ADD  DEFAULT ((0)) FOR [ver_minor]
GO
ALTER TABLE [dbo].[core_system_info] ADD  DEFAULT ((0)) FOR [ver_schema]
GO
ALTER TABLE [dbo].[core_system_info] ADD  DEFAULT ((0)) FOR [ver_build]
GO
ALTER TABLE [dbo].[documents_attached_document] ADD  DEFAULT ('00000000-0000-0000-0000-000000000000') FOR [applies_to_oid]
GO
ALTER TABLE [dbo].[documents_scanned_document] ADD  DEFAULT ('00000000-0000-0000-0000-000000000000') FOR [applies_to_oid]
GO
ALTER TABLE [dbo].[documents_scanned_document] ADD  DEFAULT ((0)) FOR [module]
GO
ALTER TABLE [dbo].[ELMAH_Error] ADD  CONSTRAINT [DF_ELMAH_Error_ErrorId]  DEFAULT (newid()) FOR [ErrorId]
GO
ALTER TABLE [dbo].[AUDIT_LOG_DATA]  WITH CHECK ADD  CONSTRAINT [FK_AUDIT_LOG_TRANSACTION_ID] FOREIGN KEY([AUDIT_LOG_TRANSACTION_ID])
REFERENCES [dbo].[AUDIT_LOG_TRANSACTIONS] ([AUDIT_LOG_TRANSACTION_ID])
GO
ALTER TABLE [dbo].[AUDIT_LOG_DATA] CHECK CONSTRAINT [FK_AUDIT_LOG_TRANSACTION_ID]
GO
ALTER TABLE [dbo].[club_committee_admin]  WITH CHECK ADD  CONSTRAINT [FK64E970481010492] FOREIGN KEY([committee])
REFERENCES [dbo].[club_committee] ([oid])
GO
ALTER TABLE [dbo].[club_committee_admin] CHECK CONSTRAINT [FK64E970481010492]
GO
ALTER TABLE [dbo].[club_committee_admin]  WITH CHECK ADD  CONSTRAINT [FK64E97048260EFD8] FOREIGN KEY([user])
REFERENCES [dbo].[core_user] ([oid])
GO
ALTER TABLE [dbo].[club_committee_admin] CHECK CONSTRAINT [FK64E97048260EFD8]
GO
ALTER TABLE [dbo].[club_committee_member]  WITH CHECK ADD  CONSTRAINT [FK37EFB5AD1010492] FOREIGN KEY([committee])
REFERENCES [dbo].[club_committee] ([oid])
GO
ALTER TABLE [dbo].[club_committee_member] CHECK CONSTRAINT [FK37EFB5AD1010492]
GO
ALTER TABLE [dbo].[club_committee_member]  WITH CHECK ADD  CONSTRAINT [FK37EFB5AD1BF806FC] FOREIGN KEY([committee_member_type])
REFERENCES [dbo].[club_committee_member_type] ([oid])
GO
ALTER TABLE [dbo].[club_committee_member] CHECK CONSTRAINT [FK37EFB5AD1BF806FC]
GO
ALTER TABLE [dbo].[club_committee_member]  WITH CHECK ADD  CONSTRAINT [FK37EFB5AD6A96A258] FOREIGN KEY([person])
REFERENCES [dbo].[club_person] ([oid])
GO
ALTER TABLE [dbo].[club_committee_member] CHECK CONSTRAINT [FK37EFB5AD6A96A258]
GO
ALTER TABLE [dbo].[club_committee_minute]  WITH CHECK ADD  CONSTRAINT [FK7206BC6B1010492] FOREIGN KEY([committee])
REFERENCES [dbo].[club_committee] ([oid])
GO
ALTER TABLE [dbo].[club_committee_minute] CHECK CONSTRAINT [FK7206BC6B1010492]
GO
ALTER TABLE [dbo].[club_lotto]  WITH CHECK ADD  CONSTRAINT [FKC600C4439B3B4AD1] FOREIGN KEY([lotto_result])
REFERENCES [dbo].[club_lotto_result] ([oid])
GO
ALTER TABLE [dbo].[club_lotto] CHECK CONSTRAINT [FKC600C4439B3B4AD1]
GO
ALTER TABLE [dbo].[club_lotto_result]  WITH CHECK ADD  CONSTRAINT [FK73954481696D5F52] FOREIGN KEY([lotto])
REFERENCES [dbo].[club_lotto] ([oid])
GO
ALTER TABLE [dbo].[club_lotto_result] CHECK CONSTRAINT [FK73954481696D5F52]
GO
ALTER TABLE [dbo].[club_lotto_result_winner]  WITH CHECK ADD  CONSTRAINT [FK22AAC0976A96A258] FOREIGN KEY([person])
REFERENCES [dbo].[club_person] ([oid])
GO
ALTER TABLE [dbo].[club_lotto_result_winner] CHECK CONSTRAINT [FK22AAC0976A96A258]
GO
ALTER TABLE [dbo].[club_lotto_result_winner]  WITH CHECK ADD  CONSTRAINT [FK22AAC0979B3B4AD1] FOREIGN KEY([lotto_result])
REFERENCES [dbo].[club_lotto_result] ([oid])
GO
ALTER TABLE [dbo].[club_lotto_result_winner] CHECK CONSTRAINT [FK22AAC0979B3B4AD1]
GO
ALTER TABLE [dbo].[club_lotto_ticket_direct_debit]  WITH CHECK ADD  CONSTRAINT [FKCDD729FF6A96A258] FOREIGN KEY([person])
REFERENCES [dbo].[club_person] ([oid])
GO
ALTER TABLE [dbo].[club_lotto_ticket_direct_debit] CHECK CONSTRAINT [FKCDD729FF6A96A258]
GO
ALTER TABLE [dbo].[club_person]  WITH CHECK ADD  CONSTRAINT [FK18C1DAF22D43972B] FOREIGN KEY([title])
REFERENCES [dbo].[club_person_title] ([oid])
GO
ALTER TABLE [dbo].[club_person] CHECK CONSTRAINT [FK18C1DAF22D43972B]
GO
ALTER TABLE [dbo].[club_person_guardian]  WITH CHECK ADD  CONSTRAINT [FKCFB810945F0B89DE] FOREIGN KEY([guardian])
REFERENCES [dbo].[club_person] ([oid])
GO
ALTER TABLE [dbo].[club_person_guardian] CHECK CONSTRAINT [FKCFB810945F0B89DE]
GO
ALTER TABLE [dbo].[club_person_guardian]  WITH CHECK ADD  CONSTRAINT [FKCFB810946A96A258] FOREIGN KEY([person])
REFERENCES [dbo].[club_person] ([oid])
GO
ALTER TABLE [dbo].[club_person_guardian] CHECK CONSTRAINT [FKCFB810946A96A258]
GO
ALTER TABLE [dbo].[club_person_membership_type]  WITH CHECK ADD  CONSTRAINT [FKE18D1838396E7F79] FOREIGN KEY([membership_type])
REFERENCES [dbo].[club_membership_type] ([oid])
GO
ALTER TABLE [dbo].[club_person_membership_type] CHECK CONSTRAINT [FKE18D1838396E7F79]
GO
ALTER TABLE [dbo].[club_person_membership_type]  WITH CHECK ADD  CONSTRAINT [FKE18D18386A96A258] FOREIGN KEY([person])
REFERENCES [dbo].[club_person] ([oid])
GO
ALTER TABLE [dbo].[club_person_membership_type] CHECK CONSTRAINT [FKE18D18386A96A258]
GO
ALTER TABLE [dbo].[club_person_qualification]  WITH CHECK ADD  CONSTRAINT [FK94B835F86A96A258] FOREIGN KEY([person])
REFERENCES [dbo].[club_person] ([oid])
GO
ALTER TABLE [dbo].[club_person_qualification] CHECK CONSTRAINT [FK94B835F86A96A258]
GO
ALTER TABLE [dbo].[club_person_qualification]  WITH CHECK ADD  CONSTRAINT [FK94B835F8BD91226A] FOREIGN KEY([qualification])
REFERENCES [dbo].[club_qualification] ([oid])
GO
ALTER TABLE [dbo].[club_person_qualification] CHECK CONSTRAINT [FK94B835F8BD91226A]
GO
ALTER TABLE [dbo].[club_team_admin]  WITH CHECK ADD  CONSTRAINT [FKBF9DF5E2260EFD8] FOREIGN KEY([user])
REFERENCES [dbo].[core_user] ([oid])
GO
ALTER TABLE [dbo].[club_team_admin] CHECK CONSTRAINT [FKBF9DF5E2260EFD8]
GO
ALTER TABLE [dbo].[club_team_admin]  WITH CHECK ADD  CONSTRAINT [FKBF9DF5E28C0C498] FOREIGN KEY([team])
REFERENCES [dbo].[club_team] ([oid])
GO
ALTER TABLE [dbo].[club_team_admin] CHECK CONSTRAINT [FKBF9DF5E28C0C498]
GO
ALTER TABLE [dbo].[club_team_member]  WITH CHECK ADD  CONSTRAINT [FKABB107856A96A258] FOREIGN KEY([person])
REFERENCES [dbo].[club_person] ([oid])
GO
ALTER TABLE [dbo].[club_team_member] CHECK CONSTRAINT [FKABB107856A96A258]
GO
ALTER TABLE [dbo].[club_team_member]  WITH CHECK ADD  CONSTRAINT [FKABB107858B904C2E] FOREIGN KEY([team_member_type])
REFERENCES [dbo].[club_team_member_type] ([oid])
GO
ALTER TABLE [dbo].[club_team_member] CHECK CONSTRAINT [FKABB107858B904C2E]
GO
ALTER TABLE [dbo].[club_team_member]  WITH CHECK ADD  CONSTRAINT [FKABB107858C0C498] FOREIGN KEY([team])
REFERENCES [dbo].[club_team] ([oid])
GO
ALTER TABLE [dbo].[club_team_member] CHECK CONSTRAINT [FKABB107858C0C498]
GO
ALTER TABLE [dbo].[core_application_session]  WITH CHECK ADD  CONSTRAINT [FK933E62B7260EFD8] FOREIGN KEY([user])
REFERENCES [dbo].[core_user] ([oid])
GO
ALTER TABLE [dbo].[core_application_session] CHECK CONSTRAINT [FK933E62B7260EFD8]
GO
ALTER TABLE [dbo].[core_category_access]  WITH CHECK ADD  CONSTRAINT [FK5003B28BD20F26B2] FOREIGN KEY([role])
REFERENCES [dbo].[core_role] ([oid])
GO
ALTER TABLE [dbo].[core_category_access] CHECK CONSTRAINT [FK5003B28BD20F26B2]
GO
ALTER TABLE [dbo].[core_class_access]  WITH CHECK ADD  CONSTRAINT [FK56E0A009D20F26B2] FOREIGN KEY([role])
REFERENCES [dbo].[core_role] ([oid])
GO
ALTER TABLE [dbo].[core_class_access] CHECK CONSTRAINT [FK56E0A009D20F26B2]
GO
ALTER TABLE [dbo].[core_criterion]  WITH CHECK ADD  CONSTRAINT [FK180940532160F210] FOREIGN KEY([search_spec])
REFERENCES [dbo].[core_search_spec] ([oid])
GO
ALTER TABLE [dbo].[core_criterion] CHECK CONSTRAINT [FK180940532160F210]
GO
ALTER TABLE [dbo].[core_field_access_roles]  WITH CHECK ADD  CONSTRAINT [FKE5F90C45AE8B319F] FOREIGN KEY([field_access])
REFERENCES [dbo].[core_field_access] ([oid])
GO
ALTER TABLE [dbo].[core_field_access_roles] CHECK CONSTRAINT [FKE5F90C45AE8B319F]
GO
ALTER TABLE [dbo].[core_field_access_roles]  WITH CHECK ADD  CONSTRAINT [FKE5F90C45D20F26B2] FOREIGN KEY([role])
REFERENCES [dbo].[core_role] ([oid])
GO
ALTER TABLE [dbo].[core_field_access_roles] CHECK CONSTRAINT [FKE5F90C45D20F26B2]
GO
ALTER TABLE [dbo].[core_incrementing_property_id]  WITH CHECK ADD  CONSTRAINT [FK96C055CFE8E90626] FOREIGN KEY([property_config])
REFERENCES [dbo].[core_incrementing_property_config] ([oid])
GO
ALTER TABLE [dbo].[core_incrementing_property_id] CHECK CONSTRAINT [FK96C055CFE8E90626]
GO
ALTER TABLE [dbo].[core_incrementing_property_yearly_id]  WITH CHECK ADD  CONSTRAINT [FK16F3770AE8E90626] FOREIGN KEY([property_config])
REFERENCES [dbo].[core_incrementing_property_config] ([oid])
GO
ALTER TABLE [dbo].[core_incrementing_property_yearly_id] CHECK CONSTRAINT [FK16F3770AE8E90626]
GO
ALTER TABLE [dbo].[core_log_entry_viewed_by]  WITH CHECK ADD  CONSTRAINT [FK5D5A586C260EFD8] FOREIGN KEY([user])
REFERENCES [dbo].[core_user] ([oid])
GO
ALTER TABLE [dbo].[core_log_entry_viewed_by] CHECK CONSTRAINT [FK5D5A586C260EFD8]
GO
ALTER TABLE [dbo].[core_log_entry_viewed_by]  WITH CHECK ADD  CONSTRAINT [FK5D5A586CB9613EA7] FOREIGN KEY([log_entry])
REFERENCES [dbo].[core_log_entry] ([oid])
GO
ALTER TABLE [dbo].[core_log_entry_viewed_by] CHECK CONSTRAINT [FK5D5A586CB9613EA7]
GO
ALTER TABLE [dbo].[core_profile]  WITH CHECK ADD  CONSTRAINT [FKA878687F260EFD8] FOREIGN KEY([user])
REFERENCES [dbo].[core_user] ([oid])
GO
ALTER TABLE [dbo].[core_profile] CHECK CONSTRAINT [FKA878687F260EFD8]
GO
ALTER TABLE [dbo].[core_profile_items]  WITH CHECK ADD  CONSTRAINT [FK18499AC4454AE32D] FOREIGN KEY([profile])
REFERENCES [dbo].[core_profile] ([oid])
GO
ALTER TABLE [dbo].[core_profile_items] CHECK CONSTRAINT [FK18499AC4454AE32D]
GO
ALTER TABLE [dbo].[core_role_function_access]  WITH CHECK ADD  CONSTRAINT [FK9E6B43DEB3375D98] FOREIGN KEY([function])
REFERENCES [dbo].[core_function] ([oid])
GO
ALTER TABLE [dbo].[core_role_function_access] CHECK CONSTRAINT [FK9E6B43DEB3375D98]
GO
ALTER TABLE [dbo].[core_role_function_access]  WITH CHECK ADD  CONSTRAINT [FK9E6B43DED20F26B2] FOREIGN KEY([role])
REFERENCES [dbo].[core_role] ([oid])
GO
ALTER TABLE [dbo].[core_role_function_access] CHECK CONSTRAINT [FK9E6B43DED20F26B2]
GO
ALTER TABLE [dbo].[core_role_start_page_commands]  WITH CHECK ADD  CONSTRAINT [FK7060868A5C85D2E] FOREIGN KEY([command])
REFERENCES [dbo].[core_command] ([oid])
GO
ALTER TABLE [dbo].[core_role_start_page_commands] CHECK CONSTRAINT [FK7060868A5C85D2E]
GO
ALTER TABLE [dbo].[core_role_start_page_commands]  WITH CHECK ADD  CONSTRAINT [FK7060868D20F26B2] FOREIGN KEY([role])
REFERENCES [dbo].[core_role] ([oid])
GO
ALTER TABLE [dbo].[core_role_start_page_commands] CHECK CONSTRAINT [FK7060868D20F26B2]
GO
ALTER TABLE [dbo].[core_user_roles]  WITH CHECK ADD  CONSTRAINT [FKCB69BAD9260EFD8] FOREIGN KEY([user])
REFERENCES [dbo].[core_user] ([oid])
GO
ALTER TABLE [dbo].[core_user_roles] CHECK CONSTRAINT [FKCB69BAD9260EFD8]
GO
ALTER TABLE [dbo].[core_user_roles]  WITH CHECK ADD  CONSTRAINT [FKCB69BAD9D20F26B2] FOREIGN KEY([role])
REFERENCES [dbo].[core_role] ([oid])
GO
ALTER TABLE [dbo].[core_user_roles] CHECK CONSTRAINT [FKCB69BAD9D20F26B2]
GO
ALTER TABLE [dbo].[documents_attached_document]  WITH CHECK ADD  CONSTRAINT [FK5CF4B9F151153D4A] FOREIGN KEY([file])
REFERENCES [dbo].[documents_stored_file] ([oid])
GO
ALTER TABLE [dbo].[documents_attached_document] CHECK CONSTRAINT [FK5CF4B9F151153D4A]
GO
ALTER TABLE [dbo].[documents_stored_file]  WITH CHECK ADD  CONSTRAINT [FK4403E2D51B5C1577] FOREIGN KEY([type_path_configuration])
REFERENCES [dbo].[documents_type_path_configuration] ([oid])
GO
ALTER TABLE [dbo].[documents_stored_file] CHECK CONSTRAINT [FK4403E2D51B5C1577]
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_club_club_details]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_club_details]
ON [dbo].[club_club_details]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_club_details]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:50
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_club_details]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_club_details',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'key',
		CONVERT(nvarchar(4000), OLD.[key], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[key] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), OLD.[name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[name] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), OLD.[description], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[description] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'history',
		CONVERT(nvarchar(4000), OLD.[history], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[history] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_number',
		CONVERT(nvarchar(4000), OLD.[address_number], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[address_number] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_street',
		CONVERT(nvarchar(4000), OLD.[address_street], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[address_street] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_town',
		CONVERT(nvarchar(4000), OLD.[address_town], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[address_town] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_county',
		CONVERT(nvarchar(4000), OLD.[address_county], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[address_county] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_country',
		CONVERT(nvarchar(4000), OLD.[address_country], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[address_country] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_post_code',
		CONVERT(nvarchar(4000), OLD.[address_post_code], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[address_post_code] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_xlng_coord',
		CONVERT(nvarchar(4000), OLD.[address_xlng_coord], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[address_xlng_coord] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_ylat_coord',
		CONVERT(nvarchar(4000), OLD.[address_ylat_coord], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[address_ylat_coord] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_club_club_details]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_club_club_details]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_club_details]
ON [dbo].[club_club_details]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_club_details]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:50
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_club_details]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_club_details',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'key',
		CONVERT(nvarchar(4000), NEW.[key], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[key] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), NEW.[name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[name] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), NEW.[description], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[description] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'history',
		CONVERT(nvarchar(4000), NEW.[history], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[history] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_number',
		CONVERT(nvarchar(4000), NEW.[address_number], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[address_number] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_street',
		CONVERT(nvarchar(4000), NEW.[address_street], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[address_street] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_town',
		CONVERT(nvarchar(4000), NEW.[address_town], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[address_town] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_county',
		CONVERT(nvarchar(4000), NEW.[address_county], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[address_county] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_country',
		CONVERT(nvarchar(4000), NEW.[address_country], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[address_country] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_post_code',
		CONVERT(nvarchar(4000), NEW.[address_post_code], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[address_post_code] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_xlng_coord',
		CONVERT(nvarchar(4000), NEW.[address_xlng_coord], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[address_xlng_coord] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_ylat_coord',
		CONVERT(nvarchar(4000), NEW.[address_ylat_coord], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[address_ylat_coord] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_club_club_details]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_club_club_details]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_club_details]
ON [dbo].[club_club_details]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_club_details]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:50
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_club_details]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_club_details',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([key])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'key',
			CONVERT(nvarchar(4000), OLD.[key], 0),
			CONVERT(nvarchar(4000), NEW.[key], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[key] <>
					OLD.[key]
				) Or
			
				(
					NEW.[key] Is Null And
					OLD.[key] Is Not Null
				) Or
				(
					NEW.[key] Is Not Null And
					OLD.[key] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([name])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'name',
			CONVERT(nvarchar(4000), OLD.[name], 0),
			CONVERT(nvarchar(4000), NEW.[name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[name] <>
					OLD.[name]
				) Or
			
				(
					NEW.[name] Is Null And
					OLD.[name] Is Not Null
				) Or
				(
					NEW.[name] Is Not Null And
					OLD.[name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([description])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'description',
			CONVERT(nvarchar(4000), OLD.[description], 0),
			CONVERT(nvarchar(4000), NEW.[description], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[description] <>
					OLD.[description]
				) Or
			
				(
					NEW.[description] Is Null And
					OLD.[description] Is Not Null
				) Or
				(
					NEW.[description] Is Not Null And
					OLD.[description] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([history])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'history',
			CONVERT(nvarchar(4000), OLD.[history], 0),
			CONVERT(nvarchar(4000), NEW.[history], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[history] <>
					OLD.[history]
				) Or
			
				(
					NEW.[history] Is Null And
					OLD.[history] Is Not Null
				) Or
				(
					NEW.[history] Is Not Null And
					OLD.[history] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([address_number])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'address_number',
			CONVERT(nvarchar(4000), OLD.[address_number], 0),
			CONVERT(nvarchar(4000), NEW.[address_number], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[address_number] <>
					OLD.[address_number]
				) Or
			
				(
					NEW.[address_number] Is Null And
					OLD.[address_number] Is Not Null
				) Or
				(
					NEW.[address_number] Is Not Null And
					OLD.[address_number] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([address_street])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'address_street',
			CONVERT(nvarchar(4000), OLD.[address_street], 0),
			CONVERT(nvarchar(4000), NEW.[address_street], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[address_street] <>
					OLD.[address_street]
				) Or
			
				(
					NEW.[address_street] Is Null And
					OLD.[address_street] Is Not Null
				) Or
				(
					NEW.[address_street] Is Not Null And
					OLD.[address_street] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([address_town])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'address_town',
			CONVERT(nvarchar(4000), OLD.[address_town], 0),
			CONVERT(nvarchar(4000), NEW.[address_town], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[address_town] <>
					OLD.[address_town]
				) Or
			
				(
					NEW.[address_town] Is Null And
					OLD.[address_town] Is Not Null
				) Or
				(
					NEW.[address_town] Is Not Null And
					OLD.[address_town] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([address_county])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'address_county',
			CONVERT(nvarchar(4000), OLD.[address_county], 0),
			CONVERT(nvarchar(4000), NEW.[address_county], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[address_county] <>
					OLD.[address_county]
				) Or
			
				(
					NEW.[address_county] Is Null And
					OLD.[address_county] Is Not Null
				) Or
				(
					NEW.[address_county] Is Not Null And
					OLD.[address_county] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([address_country])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'address_country',
			CONVERT(nvarchar(4000), OLD.[address_country], 0),
			CONVERT(nvarchar(4000), NEW.[address_country], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[address_country] <>
					OLD.[address_country]
				) Or
			
				(
					NEW.[address_country] Is Null And
					OLD.[address_country] Is Not Null
				) Or
				(
					NEW.[address_country] Is Not Null And
					OLD.[address_country] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([address_post_code])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'address_post_code',
			CONVERT(nvarchar(4000), OLD.[address_post_code], 0),
			CONVERT(nvarchar(4000), NEW.[address_post_code], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[address_post_code] <>
					OLD.[address_post_code]
				) Or
			
				(
					NEW.[address_post_code] Is Null And
					OLD.[address_post_code] Is Not Null
				) Or
				(
					NEW.[address_post_code] Is Not Null And
					OLD.[address_post_code] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([address_xlng_coord])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'address_xlng_coord',
			CONVERT(nvarchar(4000), OLD.[address_xlng_coord], 0),
			CONVERT(nvarchar(4000), NEW.[address_xlng_coord], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[address_xlng_coord] <>
					OLD.[address_xlng_coord]
				) Or
			
				(
					NEW.[address_xlng_coord] Is Null And
					OLD.[address_xlng_coord] Is Not Null
				) Or
				(
					NEW.[address_xlng_coord] Is Not Null And
					OLD.[address_xlng_coord] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([address_ylat_coord])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'address_ylat_coord',
			CONVERT(nvarchar(4000), OLD.[address_ylat_coord], 0),
			CONVERT(nvarchar(4000), NEW.[address_ylat_coord], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[address_ylat_coord] <>
					OLD.[address_ylat_coord]
				) Or
			
				(
					NEW.[address_ylat_coord] Is Null And
					OLD.[address_ylat_coord] Is Not Null
				) Or
				(
					NEW.[address_ylat_coord] Is Not Null And
					OLD.[address_ylat_coord] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_club_club_details]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_club_committee]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_committee]
ON [dbo].[club_committee]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_committee]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:50
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_committee]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_committee',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), OLD.[name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[name] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'year',
		CONVERT(nvarchar(4000), OLD.[year], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[year] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), OLD.[description], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[description] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'start_date',
		CONVERT(nvarchar(4000), OLD.[start_date], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[start_date] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'end_date',
		CONVERT(nvarchar(4000), OLD.[end_date], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[end_date] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), OLD.[active], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[active] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'time_type',
		CONVERT(nvarchar(4000), OLD.[time_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[time_type] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_club_committee]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_club_committee]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_committee]
ON [dbo].[club_committee]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_committee]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:50
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_committee]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_committee',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), NEW.[name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[name] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'year',
		CONVERT(nvarchar(4000), NEW.[year], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[year] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), NEW.[description], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[description] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'start_date',
		CONVERT(nvarchar(4000), NEW.[start_date], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[start_date] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'end_date',
		CONVERT(nvarchar(4000), NEW.[end_date], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[end_date] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), NEW.[active], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[active] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'time_type',
		CONVERT(nvarchar(4000), NEW.[time_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[time_type] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_club_committee]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_club_committee]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_committee]
ON [dbo].[club_committee]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_committee]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:50
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_committee]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_committee',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([name])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'name',
			CONVERT(nvarchar(4000), OLD.[name], 0),
			CONVERT(nvarchar(4000), NEW.[name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[name] <>
					OLD.[name]
				) Or
			
				(
					NEW.[name] Is Null And
					OLD.[name] Is Not Null
				) Or
				(
					NEW.[name] Is Not Null And
					OLD.[name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([year])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'year',
			CONVERT(nvarchar(4000), OLD.[year], 0),
			CONVERT(nvarchar(4000), NEW.[year], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[year] <>
					OLD.[year]
				) Or
			
				(
					NEW.[year] Is Null And
					OLD.[year] Is Not Null
				) Or
				(
					NEW.[year] Is Not Null And
					OLD.[year] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([description])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'description',
			CONVERT(nvarchar(4000), OLD.[description], 0),
			CONVERT(nvarchar(4000), NEW.[description], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[description] <>
					OLD.[description]
				) Or
			
				(
					NEW.[description] Is Null And
					OLD.[description] Is Not Null
				) Or
				(
					NEW.[description] Is Not Null And
					OLD.[description] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([start_date])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'start_date',
			CONVERT(nvarchar(4000), OLD.[start_date], 121),
			CONVERT(nvarchar(4000), NEW.[start_date], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[start_date] <>
					OLD.[start_date]
				) Or
			
				(
					NEW.[start_date] Is Null And
					OLD.[start_date] Is Not Null
				) Or
				(
					NEW.[start_date] Is Not Null And
					OLD.[start_date] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([end_date])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'end_date',
			CONVERT(nvarchar(4000), OLD.[end_date], 121),
			CONVERT(nvarchar(4000), NEW.[end_date], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[end_date] <>
					OLD.[end_date]
				) Or
			
				(
					NEW.[end_date] Is Null And
					OLD.[end_date] Is Not Null
				) Or
				(
					NEW.[end_date] Is Not Null And
					OLD.[end_date] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([active])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'active',
			CONVERT(nvarchar(4000), OLD.[active], 0),
			CONVERT(nvarchar(4000), NEW.[active], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[active] <>
					OLD.[active]
				) Or
			
				(
					NEW.[active] Is Null And
					OLD.[active] Is Not Null
				) Or
				(
					NEW.[active] Is Not Null And
					OLD.[active] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([time_type])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'time_type',
			CONVERT(nvarchar(4000), OLD.[time_type], 0),
			CONVERT(nvarchar(4000), NEW.[time_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[time_type] <>
					OLD.[time_type]
				) Or
			
				(
					NEW.[time_type] Is Null And
					OLD.[time_type] Is Not Null
				) Or
				(
					NEW.[time_type] Is Not Null And
					OLD.[time_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_club_committee]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_club_committee_admin]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_committee_admin]
ON [dbo].[club_committee_admin]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_committee_admin]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:50
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_committee_admin]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_committee_admin',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'user',
		CONVERT(nvarchar(4000), OLD.[user], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[user] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'committee',
		CONVERT(nvarchar(4000), OLD.[committee], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[committee] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_club_committee_admin]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_club_committee_admin]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_committee_admin]
ON [dbo].[club_committee_admin]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_committee_admin]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:50
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_committee_admin]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_committee_admin',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'user',
		CONVERT(nvarchar(4000), NEW.[user], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[user] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'committee',
		CONVERT(nvarchar(4000), NEW.[committee], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[committee] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_club_committee_admin]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_club_committee_admin]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_committee_admin]
ON [dbo].[club_committee_admin]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_committee_admin]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:50
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_committee_admin]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_committee_admin',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([user])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'user',
			CONVERT(nvarchar(4000), OLD.[user], 0),
			CONVERT(nvarchar(4000), NEW.[user], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[user] <>
					OLD.[user]
				) Or
			
				(
					NEW.[user] Is Null And
					OLD.[user] Is Not Null
				) Or
				(
					NEW.[user] Is Not Null And
					OLD.[user] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([committee])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'committee',
			CONVERT(nvarchar(4000), OLD.[committee], 0),
			CONVERT(nvarchar(4000), NEW.[committee], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[committee] <>
					OLD.[committee]
				) Or
			
				(
					NEW.[committee] Is Null And
					OLD.[committee] Is Not Null
				) Or
				(
					NEW.[committee] Is Not Null And
					OLD.[committee] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_club_committee_admin]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_club_committee_member]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_committee_member]
ON [dbo].[club_committee_member]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_committee_member]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:50
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_committee_member]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_committee_member',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'person',
		CONVERT(nvarchar(4000), OLD.[person], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[person] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'committee',
		CONVERT(nvarchar(4000), OLD.[committee], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[committee] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'committee_member_type',
		CONVERT(nvarchar(4000), OLD.[committee_member_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[committee_member_type] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_club_committee_member]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_club_committee_member]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_committee_member]
ON [dbo].[club_committee_member]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_committee_member]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:50
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_committee_member]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_committee_member',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'person',
		CONVERT(nvarchar(4000), NEW.[person], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[person] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'committee',
		CONVERT(nvarchar(4000), NEW.[committee], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[committee] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'committee_member_type',
		CONVERT(nvarchar(4000), NEW.[committee_member_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[committee_member_type] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_club_committee_member]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_club_committee_member]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_committee_member]
ON [dbo].[club_committee_member]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_committee_member]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:50
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_committee_member]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_committee_member',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([person])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'person',
			CONVERT(nvarchar(4000), OLD.[person], 0),
			CONVERT(nvarchar(4000), NEW.[person], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[person] <>
					OLD.[person]
				) Or
			
				(
					NEW.[person] Is Null And
					OLD.[person] Is Not Null
				) Or
				(
					NEW.[person] Is Not Null And
					OLD.[person] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([committee])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'committee',
			CONVERT(nvarchar(4000), OLD.[committee], 0),
			CONVERT(nvarchar(4000), NEW.[committee], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[committee] <>
					OLD.[committee]
				) Or
			
				(
					NEW.[committee] Is Null And
					OLD.[committee] Is Not Null
				) Or
				(
					NEW.[committee] Is Not Null And
					OLD.[committee] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([committee_member_type])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'committee_member_type',
			CONVERT(nvarchar(4000), OLD.[committee_member_type], 0),
			CONVERT(nvarchar(4000), NEW.[committee_member_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[committee_member_type] <>
					OLD.[committee_member_type]
				) Or
			
				(
					NEW.[committee_member_type] Is Null And
					OLD.[committee_member_type] Is Not Null
				) Or
				(
					NEW.[committee_member_type] Is Not Null And
					OLD.[committee_member_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_club_committee_member]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_club_committee_member_type]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_committee_member_type]
ON [dbo].[club_committee_member_type]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_committee_member_type]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:50
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_committee_member_type]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_committee_member_type',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), OLD.[active], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[active] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'default',
		CONVERT(nvarchar(4000), OLD.[default], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[default] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), OLD.[name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[name] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), OLD.[description], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[description] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_club_committee_member_type]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_club_committee_member_type]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_committee_member_type]
ON [dbo].[club_committee_member_type]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_committee_member_type]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:50
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_committee_member_type]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_committee_member_type',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), NEW.[active], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[active] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'default',
		CONVERT(nvarchar(4000), NEW.[default], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[default] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), NEW.[name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[name] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), NEW.[description], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[description] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_club_committee_member_type]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_club_committee_member_type]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_committee_member_type]
ON [dbo].[club_committee_member_type]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_committee_member_type]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:50
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_committee_member_type]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_committee_member_type',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([active])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'active',
			CONVERT(nvarchar(4000), OLD.[active], 0),
			CONVERT(nvarchar(4000), NEW.[active], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[active] <>
					OLD.[active]
				) Or
			
				(
					NEW.[active] Is Null And
					OLD.[active] Is Not Null
				) Or
				(
					NEW.[active] Is Not Null And
					OLD.[active] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([default])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'default',
			CONVERT(nvarchar(4000), OLD.[default], 0),
			CONVERT(nvarchar(4000), NEW.[default], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[default] <>
					OLD.[default]
				) Or
			
				(
					NEW.[default] Is Null And
					OLD.[default] Is Not Null
				) Or
				(
					NEW.[default] Is Not Null And
					OLD.[default] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([name])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'name',
			CONVERT(nvarchar(4000), OLD.[name], 0),
			CONVERT(nvarchar(4000), NEW.[name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[name] <>
					OLD.[name]
				) Or
			
				(
					NEW.[name] Is Null And
					OLD.[name] Is Not Null
				) Or
				(
					NEW.[name] Is Not Null And
					OLD.[name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([description])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'description',
			CONVERT(nvarchar(4000), OLD.[description], 0),
			CONVERT(nvarchar(4000), NEW.[description], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[description] <>
					OLD.[description]
				) Or
			
				(
					NEW.[description] Is Null And
					OLD.[description] Is Not Null
				) Or
				(
					NEW.[description] Is Not Null And
					OLD.[description] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_club_committee_member_type]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_club_committee_minute]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_committee_minute]
ON [dbo].[club_committee_minute]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_committee_minute]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:50
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_committee_minute]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_committee_minute',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'date',
		CONVERT(nvarchar(4000), OLD.[date], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[date] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'minutes_text',
		CONVERT(nvarchar(4000), OLD.[minutes_text], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[minutes_text] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), OLD.[active], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[active] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'committee',
		CONVERT(nvarchar(4000), OLD.[committee], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[committee] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_club_committee_minute]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_club_committee_minute]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_committee_minute]
ON [dbo].[club_committee_minute]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_committee_minute]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:50
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_committee_minute]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_committee_minute',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'date',
		CONVERT(nvarchar(4000), NEW.[date], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[date] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'minutes_text',
		CONVERT(nvarchar(4000), NEW.[minutes_text], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[minutes_text] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), NEW.[active], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[active] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'committee',
		CONVERT(nvarchar(4000), NEW.[committee], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[committee] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_club_committee_minute]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_club_committee_minute]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_committee_minute]
ON [dbo].[club_committee_minute]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_committee_minute]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:50
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_committee_minute]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_committee_minute',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([date])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'date',
			CONVERT(nvarchar(4000), OLD.[date], 121),
			CONVERT(nvarchar(4000), NEW.[date], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[date] <>
					OLD.[date]
				) Or
			
				(
					NEW.[date] Is Null And
					OLD.[date] Is Not Null
				) Or
				(
					NEW.[date] Is Not Null And
					OLD.[date] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([minutes_text])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'minutes_text',
			CONVERT(nvarchar(4000), OLD.[minutes_text], 0),
			CONVERT(nvarchar(4000), NEW.[minutes_text], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[minutes_text] <>
					OLD.[minutes_text]
				) Or
			
				(
					NEW.[minutes_text] Is Null And
					OLD.[minutes_text] Is Not Null
				) Or
				(
					NEW.[minutes_text] Is Not Null And
					OLD.[minutes_text] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([active])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'active',
			CONVERT(nvarchar(4000), OLD.[active], 0),
			CONVERT(nvarchar(4000), NEW.[active], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[active] <>
					OLD.[active]
				) Or
			
				(
					NEW.[active] Is Null And
					OLD.[active] Is Not Null
				) Or
				(
					NEW.[active] Is Not Null And
					OLD.[active] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([committee])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'committee',
			CONVERT(nvarchar(4000), OLD.[committee], 0),
			CONVERT(nvarchar(4000), NEW.[committee], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[committee] <>
					OLD.[committee]
				) Or
			
				(
					NEW.[committee] Is Null And
					OLD.[committee] Is Not Null
				) Or
				(
					NEW.[committee] Is Not Null And
					OLD.[committee] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_club_committee_minute]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_club_lotto]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_lotto]
ON [dbo].[club_lotto]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_lotto]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:50
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_lotto]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_lotto',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'lotto_draw_date',
		CONVERT(nvarchar(4000), OLD.[lotto_draw_date], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[lotto_draw_date] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'message',
		CONVERT(nvarchar(4000), OLD.[message], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[message] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'jackpot',
		CONVERT(nvarchar(4000), OLD.[jackpot], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[jackpot] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'lotto_result',
		CONVERT(nvarchar(4000), OLD.[lotto_result], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[lotto_result] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_club_lotto]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_club_lotto]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_lotto]
ON [dbo].[club_lotto]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_lotto]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:50
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_lotto]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_lotto',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'lotto_draw_date',
		CONVERT(nvarchar(4000), NEW.[lotto_draw_date], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[lotto_draw_date] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'message',
		CONVERT(nvarchar(4000), NEW.[message], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[message] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'jackpot',
		CONVERT(nvarchar(4000), NEW.[jackpot], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[jackpot] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'lotto_result',
		CONVERT(nvarchar(4000), NEW.[lotto_result], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[lotto_result] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_club_lotto]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_club_lotto]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_lotto]
ON [dbo].[club_lotto]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_lotto]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:50
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_lotto]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_lotto',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([lotto_draw_date])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'lotto_draw_date',
			CONVERT(nvarchar(4000), OLD.[lotto_draw_date], 121),
			CONVERT(nvarchar(4000), NEW.[lotto_draw_date], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[lotto_draw_date] <>
					OLD.[lotto_draw_date]
				) Or
			
				(
					NEW.[lotto_draw_date] Is Null And
					OLD.[lotto_draw_date] Is Not Null
				) Or
				(
					NEW.[lotto_draw_date] Is Not Null And
					OLD.[lotto_draw_date] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([message])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'message',
			CONVERT(nvarchar(4000), OLD.[message], 0),
			CONVERT(nvarchar(4000), NEW.[message], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[message] <>
					OLD.[message]
				) Or
			
				(
					NEW.[message] Is Null And
					OLD.[message] Is Not Null
				) Or
				(
					NEW.[message] Is Not Null And
					OLD.[message] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([jackpot])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'jackpot',
			CONVERT(nvarchar(4000), OLD.[jackpot], 0),
			CONVERT(nvarchar(4000), NEW.[jackpot], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[jackpot] <>
					OLD.[jackpot]
				) Or
			
				(
					NEW.[jackpot] Is Null And
					OLD.[jackpot] Is Not Null
				) Or
				(
					NEW.[jackpot] Is Not Null And
					OLD.[jackpot] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([lotto_result])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'lotto_result',
			CONVERT(nvarchar(4000), OLD.[lotto_result], 0),
			CONVERT(nvarchar(4000), NEW.[lotto_result], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[lotto_result] <>
					OLD.[lotto_result]
				) Or
			
				(
					NEW.[lotto_result] Is Null And
					OLD.[lotto_result] Is Not Null
				) Or
				(
					NEW.[lotto_result] Is Not Null And
					OLD.[lotto_result] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_club_lotto]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_club_lotto_result]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_lotto_result]
ON [dbo].[club_lotto_result]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_lotto_result]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:50
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_lotto_result]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_lotto_result',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no1',
		CONVERT(nvarchar(4000), OLD.[no1], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[no1] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no2',
		CONVERT(nvarchar(4000), OLD.[no2], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[no2] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no3',
		CONVERT(nvarchar(4000), OLD.[no3], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[no3] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no4',
		CONVERT(nvarchar(4000), OLD.[no4], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[no4] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no5',
		CONVERT(nvarchar(4000), OLD.[no5], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[no5] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'lotto',
		CONVERT(nvarchar(4000), OLD.[lotto], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[lotto] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_club_lotto_result]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_club_lotto_result]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_lotto_result]
ON [dbo].[club_lotto_result]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_lotto_result]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:50
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_lotto_result]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_lotto_result',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no1',
		CONVERT(nvarchar(4000), NEW.[no1], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[no1] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no2',
		CONVERT(nvarchar(4000), NEW.[no2], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[no2] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no3',
		CONVERT(nvarchar(4000), NEW.[no3], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[no3] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no4',
		CONVERT(nvarchar(4000), NEW.[no4], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[no4] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no5',
		CONVERT(nvarchar(4000), NEW.[no5], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[no5] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'lotto',
		CONVERT(nvarchar(4000), NEW.[lotto], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[lotto] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_club_lotto_result]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_club_lotto_result]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_lotto_result]
ON [dbo].[club_lotto_result]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_lotto_result]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:50
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_lotto_result]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_lotto_result',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([no1])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'no1',
			CONVERT(nvarchar(4000), OLD.[no1], 0),
			CONVERT(nvarchar(4000), NEW.[no1], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[no1] <>
					OLD.[no1]
				) Or
			
				(
					NEW.[no1] Is Null And
					OLD.[no1] Is Not Null
				) Or
				(
					NEW.[no1] Is Not Null And
					OLD.[no1] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([no2])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'no2',
			CONVERT(nvarchar(4000), OLD.[no2], 0),
			CONVERT(nvarchar(4000), NEW.[no2], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[no2] <>
					OLD.[no2]
				) Or
			
				(
					NEW.[no2] Is Null And
					OLD.[no2] Is Not Null
				) Or
				(
					NEW.[no2] Is Not Null And
					OLD.[no2] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([no3])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'no3',
			CONVERT(nvarchar(4000), OLD.[no3], 0),
			CONVERT(nvarchar(4000), NEW.[no3], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[no3] <>
					OLD.[no3]
				) Or
			
				(
					NEW.[no3] Is Null And
					OLD.[no3] Is Not Null
				) Or
				(
					NEW.[no3] Is Not Null And
					OLD.[no3] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([no4])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'no4',
			CONVERT(nvarchar(4000), OLD.[no4], 0),
			CONVERT(nvarchar(4000), NEW.[no4], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[no4] <>
					OLD.[no4]
				) Or
			
				(
					NEW.[no4] Is Null And
					OLD.[no4] Is Not Null
				) Or
				(
					NEW.[no4] Is Not Null And
					OLD.[no4] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([no5])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'no5',
			CONVERT(nvarchar(4000), OLD.[no5], 0),
			CONVERT(nvarchar(4000), NEW.[no5], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[no5] <>
					OLD.[no5]
				) Or
			
				(
					NEW.[no5] Is Null And
					OLD.[no5] Is Not Null
				) Or
				(
					NEW.[no5] Is Not Null And
					OLD.[no5] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([lotto])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'lotto',
			CONVERT(nvarchar(4000), OLD.[lotto], 0),
			CONVERT(nvarchar(4000), NEW.[lotto], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[lotto] <>
					OLD.[lotto]
				) Or
			
				(
					NEW.[lotto] Is Null And
					OLD.[lotto] Is Not Null
				) Or
				(
					NEW.[lotto] Is Not Null And
					OLD.[lotto] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_club_lotto_result]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_club_lotto_result_winner]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_lotto_result_winner]
ON [dbo].[club_lotto_result_winner]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_lotto_result_winner]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:50
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_lotto_result_winner]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_lotto_result_winner',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'message',
		CONVERT(nvarchar(4000), OLD.[message], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[message] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'matches',
		CONVERT(nvarchar(4000), OLD.[matches], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[matches] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no1',
		CONVERT(nvarchar(4000), OLD.[no1], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[no1] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no2',
		CONVERT(nvarchar(4000), OLD.[no2], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[no2] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no3',
		CONVERT(nvarchar(4000), OLD.[no3], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[no3] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no4',
		CONVERT(nvarchar(4000), OLD.[no4], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[no4] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'lotto_result',
		CONVERT(nvarchar(4000), OLD.[lotto_result], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[lotto_result] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'person',
		CONVERT(nvarchar(4000), OLD.[person], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[person] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_club_lotto_result_winner]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_club_lotto_result_winner]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_lotto_result_winner]
ON [dbo].[club_lotto_result_winner]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_lotto_result_winner]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:50
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_lotto_result_winner]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_lotto_result_winner',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'message',
		CONVERT(nvarchar(4000), NEW.[message], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[message] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'matches',
		CONVERT(nvarchar(4000), NEW.[matches], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[matches] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no1',
		CONVERT(nvarchar(4000), NEW.[no1], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[no1] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no2',
		CONVERT(nvarchar(4000), NEW.[no2], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[no2] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no3',
		CONVERT(nvarchar(4000), NEW.[no3], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[no3] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no4',
		CONVERT(nvarchar(4000), NEW.[no4], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[no4] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'lotto_result',
		CONVERT(nvarchar(4000), NEW.[lotto_result], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[lotto_result] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'person',
		CONVERT(nvarchar(4000), NEW.[person], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[person] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_club_lotto_result_winner]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_club_lotto_result_winner]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_lotto_result_winner]
ON [dbo].[club_lotto_result_winner]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_lotto_result_winner]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:50
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_lotto_result_winner]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_lotto_result_winner',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([message])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'message',
			CONVERT(nvarchar(4000), OLD.[message], 0),
			CONVERT(nvarchar(4000), NEW.[message], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[message] <>
					OLD.[message]
				) Or
			
				(
					NEW.[message] Is Null And
					OLD.[message] Is Not Null
				) Or
				(
					NEW.[message] Is Not Null And
					OLD.[message] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([matches])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'matches',
			CONVERT(nvarchar(4000), OLD.[matches], 0),
			CONVERT(nvarchar(4000), NEW.[matches], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[matches] <>
					OLD.[matches]
				) Or
			
				(
					NEW.[matches] Is Null And
					OLD.[matches] Is Not Null
				) Or
				(
					NEW.[matches] Is Not Null And
					OLD.[matches] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([no1])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'no1',
			CONVERT(nvarchar(4000), OLD.[no1], 0),
			CONVERT(nvarchar(4000), NEW.[no1], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[no1] <>
					OLD.[no1]
				) Or
			
				(
					NEW.[no1] Is Null And
					OLD.[no1] Is Not Null
				) Or
				(
					NEW.[no1] Is Not Null And
					OLD.[no1] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([no2])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'no2',
			CONVERT(nvarchar(4000), OLD.[no2], 0),
			CONVERT(nvarchar(4000), NEW.[no2], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[no2] <>
					OLD.[no2]
				) Or
			
				(
					NEW.[no2] Is Null And
					OLD.[no2] Is Not Null
				) Or
				(
					NEW.[no2] Is Not Null And
					OLD.[no2] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([no3])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'no3',
			CONVERT(nvarchar(4000), OLD.[no3], 0),
			CONVERT(nvarchar(4000), NEW.[no3], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[no3] <>
					OLD.[no3]
				) Or
			
				(
					NEW.[no3] Is Null And
					OLD.[no3] Is Not Null
				) Or
				(
					NEW.[no3] Is Not Null And
					OLD.[no3] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([no4])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'no4',
			CONVERT(nvarchar(4000), OLD.[no4], 0),
			CONVERT(nvarchar(4000), NEW.[no4], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[no4] <>
					OLD.[no4]
				) Or
			
				(
					NEW.[no4] Is Null And
					OLD.[no4] Is Not Null
				) Or
				(
					NEW.[no4] Is Not Null And
					OLD.[no4] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([lotto_result])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'lotto_result',
			CONVERT(nvarchar(4000), OLD.[lotto_result], 0),
			CONVERT(nvarchar(4000), NEW.[lotto_result], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[lotto_result] <>
					OLD.[lotto_result]
				) Or
			
				(
					NEW.[lotto_result] Is Null And
					OLD.[lotto_result] Is Not Null
				) Or
				(
					NEW.[lotto_result] Is Not Null And
					OLD.[lotto_result] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([person])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'person',
			CONVERT(nvarchar(4000), OLD.[person], 0),
			CONVERT(nvarchar(4000), NEW.[person], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[person] <>
					OLD.[person]
				) Or
			
				(
					NEW.[person] Is Null And
					OLD.[person] Is Not Null
				) Or
				(
					NEW.[person] Is Not Null And
					OLD.[person] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_club_lotto_result_winner]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_club_lotto_ticket_direct_debit]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_lotto_ticket_direct_debit]
ON [dbo].[club_lotto_ticket_direct_debit]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_lotto_ticket_direct_debit]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_lotto_ticket_direct_debit]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_lotto_ticket_direct_debit',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'key',
		CONVERT(nvarchar(4000), OLD.[key], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[key] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no1',
		CONVERT(nvarchar(4000), OLD.[no1], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[no1] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no2',
		CONVERT(nvarchar(4000), OLD.[no2], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[no2] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no3',
		CONVERT(nvarchar(4000), OLD.[no3], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[no3] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no4',
		CONVERT(nvarchar(4000), OLD.[no4], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[no4] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), OLD.[active], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[active] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'start_date',
		CONVERT(nvarchar(4000), OLD.[start_date], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[start_date] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'end_date',
		CONVERT(nvarchar(4000), OLD.[end_date], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[end_date] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'person',
		CONVERT(nvarchar(4000), OLD.[person], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[person] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_club_lotto_ticket_direct_debit]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_club_lotto_ticket_direct_debit]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_lotto_ticket_direct_debit]
ON [dbo].[club_lotto_ticket_direct_debit]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_lotto_ticket_direct_debit]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_lotto_ticket_direct_debit]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_lotto_ticket_direct_debit',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'key',
		CONVERT(nvarchar(4000), NEW.[key], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[key] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no1',
		CONVERT(nvarchar(4000), NEW.[no1], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[no1] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no2',
		CONVERT(nvarchar(4000), NEW.[no2], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[no2] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no3',
		CONVERT(nvarchar(4000), NEW.[no3], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[no3] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no4',
		CONVERT(nvarchar(4000), NEW.[no4], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[no4] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), NEW.[active], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[active] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'start_date',
		CONVERT(nvarchar(4000), NEW.[start_date], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[start_date] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'end_date',
		CONVERT(nvarchar(4000), NEW.[end_date], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[end_date] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'person',
		CONVERT(nvarchar(4000), NEW.[person], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[person] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_club_lotto_ticket_direct_debit]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_club_lotto_ticket_direct_debit]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_lotto_ticket_direct_debit]
ON [dbo].[club_lotto_ticket_direct_debit]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_lotto_ticket_direct_debit]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_lotto_ticket_direct_debit]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_lotto_ticket_direct_debit',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([key])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'key',
			CONVERT(nvarchar(4000), OLD.[key], 0),
			CONVERT(nvarchar(4000), NEW.[key], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[key] <>
					OLD.[key]
				) Or
			
				(
					NEW.[key] Is Null And
					OLD.[key] Is Not Null
				) Or
				(
					NEW.[key] Is Not Null And
					OLD.[key] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([no1])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'no1',
			CONVERT(nvarchar(4000), OLD.[no1], 0),
			CONVERT(nvarchar(4000), NEW.[no1], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[no1] <>
					OLD.[no1]
				) Or
			
				(
					NEW.[no1] Is Null And
					OLD.[no1] Is Not Null
				) Or
				(
					NEW.[no1] Is Not Null And
					OLD.[no1] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([no2])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'no2',
			CONVERT(nvarchar(4000), OLD.[no2], 0),
			CONVERT(nvarchar(4000), NEW.[no2], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[no2] <>
					OLD.[no2]
				) Or
			
				(
					NEW.[no2] Is Null And
					OLD.[no2] Is Not Null
				) Or
				(
					NEW.[no2] Is Not Null And
					OLD.[no2] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([no3])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'no3',
			CONVERT(nvarchar(4000), OLD.[no3], 0),
			CONVERT(nvarchar(4000), NEW.[no3], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[no3] <>
					OLD.[no3]
				) Or
			
				(
					NEW.[no3] Is Null And
					OLD.[no3] Is Not Null
				) Or
				(
					NEW.[no3] Is Not Null And
					OLD.[no3] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([no4])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'no4',
			CONVERT(nvarchar(4000), OLD.[no4], 0),
			CONVERT(nvarchar(4000), NEW.[no4], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[no4] <>
					OLD.[no4]
				) Or
			
				(
					NEW.[no4] Is Null And
					OLD.[no4] Is Not Null
				) Or
				(
					NEW.[no4] Is Not Null And
					OLD.[no4] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([active])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'active',
			CONVERT(nvarchar(4000), OLD.[active], 0),
			CONVERT(nvarchar(4000), NEW.[active], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[active] <>
					OLD.[active]
				) Or
			
				(
					NEW.[active] Is Null And
					OLD.[active] Is Not Null
				) Or
				(
					NEW.[active] Is Not Null And
					OLD.[active] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([start_date])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'start_date',
			CONVERT(nvarchar(4000), OLD.[start_date], 121),
			CONVERT(nvarchar(4000), NEW.[start_date], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[start_date] <>
					OLD.[start_date]
				) Or
			
				(
					NEW.[start_date] Is Null And
					OLD.[start_date] Is Not Null
				) Or
				(
					NEW.[start_date] Is Not Null And
					OLD.[start_date] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([end_date])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'end_date',
			CONVERT(nvarchar(4000), OLD.[end_date], 121),
			CONVERT(nvarchar(4000), NEW.[end_date], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[end_date] <>
					OLD.[end_date]
				) Or
			
				(
					NEW.[end_date] Is Null And
					OLD.[end_date] Is Not Null
				) Or
				(
					NEW.[end_date] Is Not Null And
					OLD.[end_date] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([person])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'person',
			CONVERT(nvarchar(4000), OLD.[person], 0),
			CONVERT(nvarchar(4000), NEW.[person], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[person] <>
					OLD.[person]
				) Or
			
				(
					NEW.[person] Is Null And
					OLD.[person] Is Not Null
				) Or
				(
					NEW.[person] Is Not Null And
					OLD.[person] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_club_lotto_ticket_direct_debit]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_club_membership_type]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_membership_type]
ON [dbo].[club_membership_type]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_membership_type]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_membership_type]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_membership_type',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), OLD.[name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[name] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'year',
		CONVERT(nvarchar(4000), OLD.[year], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[year] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'time_type',
		CONVERT(nvarchar(4000), OLD.[time_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[time_type] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'sex',
		CONVERT(nvarchar(4000), OLD.[sex], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[sex] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'key',
		CONVERT(nvarchar(4000), OLD.[key], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[key] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), OLD.[active], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[active] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'start_date',
		CONVERT(nvarchar(4000), OLD.[start_date], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[start_date] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'end_date',
		CONVERT(nvarchar(4000), OLD.[end_date], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[end_date] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'cost',
		CONVERT(nvarchar(4000), OLD.[cost], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[cost] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_club_membership_type]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_club_membership_type]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_membership_type]
ON [dbo].[club_membership_type]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_membership_type]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_membership_type]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_membership_type',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), NEW.[name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[name] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'year',
		CONVERT(nvarchar(4000), NEW.[year], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[year] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'time_type',
		CONVERT(nvarchar(4000), NEW.[time_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[time_type] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'sex',
		CONVERT(nvarchar(4000), NEW.[sex], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[sex] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'key',
		CONVERT(nvarchar(4000), NEW.[key], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[key] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), NEW.[active], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[active] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'start_date',
		CONVERT(nvarchar(4000), NEW.[start_date], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[start_date] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'end_date',
		CONVERT(nvarchar(4000), NEW.[end_date], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[end_date] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'cost',
		CONVERT(nvarchar(4000), NEW.[cost], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[cost] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_club_membership_type]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_club_membership_type]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_membership_type]
ON [dbo].[club_membership_type]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_membership_type]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_membership_type]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_membership_type',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([name])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'name',
			CONVERT(nvarchar(4000), OLD.[name], 0),
			CONVERT(nvarchar(4000), NEW.[name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[name] <>
					OLD.[name]
				) Or
			
				(
					NEW.[name] Is Null And
					OLD.[name] Is Not Null
				) Or
				(
					NEW.[name] Is Not Null And
					OLD.[name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([year])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'year',
			CONVERT(nvarchar(4000), OLD.[year], 0),
			CONVERT(nvarchar(4000), NEW.[year], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[year] <>
					OLD.[year]
				) Or
			
				(
					NEW.[year] Is Null And
					OLD.[year] Is Not Null
				) Or
				(
					NEW.[year] Is Not Null And
					OLD.[year] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([time_type])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'time_type',
			CONVERT(nvarchar(4000), OLD.[time_type], 0),
			CONVERT(nvarchar(4000), NEW.[time_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[time_type] <>
					OLD.[time_type]
				) Or
			
				(
					NEW.[time_type] Is Null And
					OLD.[time_type] Is Not Null
				) Or
				(
					NEW.[time_type] Is Not Null And
					OLD.[time_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([sex])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'sex',
			CONVERT(nvarchar(4000), OLD.[sex], 0),
			CONVERT(nvarchar(4000), NEW.[sex], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[sex] <>
					OLD.[sex]
				) Or
			
				(
					NEW.[sex] Is Null And
					OLD.[sex] Is Not Null
				) Or
				(
					NEW.[sex] Is Not Null And
					OLD.[sex] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([key])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'key',
			CONVERT(nvarchar(4000), OLD.[key], 0),
			CONVERT(nvarchar(4000), NEW.[key], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[key] <>
					OLD.[key]
				) Or
			
				(
					NEW.[key] Is Null And
					OLD.[key] Is Not Null
				) Or
				(
					NEW.[key] Is Not Null And
					OLD.[key] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([active])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'active',
			CONVERT(nvarchar(4000), OLD.[active], 0),
			CONVERT(nvarchar(4000), NEW.[active], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[active] <>
					OLD.[active]
				) Or
			
				(
					NEW.[active] Is Null And
					OLD.[active] Is Not Null
				) Or
				(
					NEW.[active] Is Not Null And
					OLD.[active] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([start_date])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'start_date',
			CONVERT(nvarchar(4000), OLD.[start_date], 121),
			CONVERT(nvarchar(4000), NEW.[start_date], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[start_date] <>
					OLD.[start_date]
				) Or
			
				(
					NEW.[start_date] Is Null And
					OLD.[start_date] Is Not Null
				) Or
				(
					NEW.[start_date] Is Not Null And
					OLD.[start_date] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([end_date])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'end_date',
			CONVERT(nvarchar(4000), OLD.[end_date], 121),
			CONVERT(nvarchar(4000), NEW.[end_date], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[end_date] <>
					OLD.[end_date]
				) Or
			
				(
					NEW.[end_date] Is Null And
					OLD.[end_date] Is Not Null
				) Or
				(
					NEW.[end_date] Is Not Null And
					OLD.[end_date] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([cost])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'cost',
			CONVERT(nvarchar(4000), OLD.[cost], 0),
			CONVERT(nvarchar(4000), NEW.[cost], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[cost] <>
					OLD.[cost]
				) Or
			
				(
					NEW.[cost] Is Null And
					OLD.[cost] Is Not Null
				) Or
				(
					NEW.[cost] Is Not Null And
					OLD.[cost] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_club_membership_type]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_club_person]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_person]
ON [dbo].[club_person]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_person]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_person]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_person',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'key',
		CONVERT(nvarchar(4000), OLD.[key], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[key] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'sex',
		CONVERT(nvarchar(4000), OLD.[sex], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[sex] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), OLD.[active], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[active] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'forename',
		CONVERT(nvarchar(4000), OLD.[forename], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[forename] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'surname',
		CONVERT(nvarchar(4000), OLD.[surname], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[surname] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'dob',
		CONVERT(nvarchar(4000), OLD.[dob], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[dob] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'phone',
		CONVERT(nvarchar(4000), OLD.[phone], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[phone] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'mobile_no',
		CONVERT(nvarchar(4000), OLD.[mobile_no], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[mobile_no] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'email',
		CONVERT(nvarchar(4000), OLD.[email], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[email] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'alergies',
		CONVERT(nvarchar(4000), OLD.[alergies], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[alergies] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'alergies_details',
		CONVERT(nvarchar(4000), OLD.[alergies_details], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[alergies_details] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'comments',
		CONVERT(nvarchar(4000), OLD.[comments], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[comments] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'player_profile',
		CONVERT(nvarchar(4000), OLD.[player_profile], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[player_profile] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_number',
		CONVERT(nvarchar(4000), OLD.[address_number], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[address_number] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_street',
		CONVERT(nvarchar(4000), OLD.[address_street], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[address_street] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_town',
		CONVERT(nvarchar(4000), OLD.[address_town], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[address_town] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_county',
		CONVERT(nvarchar(4000), OLD.[address_county], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[address_county] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_country',
		CONVERT(nvarchar(4000), OLD.[address_country], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[address_country] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_post_code',
		CONVERT(nvarchar(4000), OLD.[address_post_code], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[address_post_code] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_xlng_coord',
		CONVERT(nvarchar(4000), OLD.[address_xlng_coord], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[address_xlng_coord] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_ylat_coord',
		CONVERT(nvarchar(4000), OLD.[address_ylat_coord], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[address_ylat_coord] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'title',
		CONVERT(nvarchar(4000), OLD.[title], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[title] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_club_person]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_club_person]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_person]
ON [dbo].[club_person]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_person]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_person]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_person',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'key',
		CONVERT(nvarchar(4000), NEW.[key], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[key] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'sex',
		CONVERT(nvarchar(4000), NEW.[sex], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[sex] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), NEW.[active], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[active] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'forename',
		CONVERT(nvarchar(4000), NEW.[forename], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[forename] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'surname',
		CONVERT(nvarchar(4000), NEW.[surname], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[surname] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'dob',
		CONVERT(nvarchar(4000), NEW.[dob], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[dob] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'phone',
		CONVERT(nvarchar(4000), NEW.[phone], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[phone] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'mobile_no',
		CONVERT(nvarchar(4000), NEW.[mobile_no], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[mobile_no] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'email',
		CONVERT(nvarchar(4000), NEW.[email], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[email] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'alergies',
		CONVERT(nvarchar(4000), NEW.[alergies], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[alergies] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'alergies_details',
		CONVERT(nvarchar(4000), NEW.[alergies_details], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[alergies_details] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'comments',
		CONVERT(nvarchar(4000), NEW.[comments], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[comments] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'player_profile',
		CONVERT(nvarchar(4000), NEW.[player_profile], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[player_profile] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_number',
		CONVERT(nvarchar(4000), NEW.[address_number], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[address_number] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_street',
		CONVERT(nvarchar(4000), NEW.[address_street], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[address_street] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_town',
		CONVERT(nvarchar(4000), NEW.[address_town], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[address_town] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_county',
		CONVERT(nvarchar(4000), NEW.[address_county], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[address_county] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_country',
		CONVERT(nvarchar(4000), NEW.[address_country], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[address_country] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_post_code',
		CONVERT(nvarchar(4000), NEW.[address_post_code], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[address_post_code] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_xlng_coord',
		CONVERT(nvarchar(4000), NEW.[address_xlng_coord], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[address_xlng_coord] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'address_ylat_coord',
		CONVERT(nvarchar(4000), NEW.[address_ylat_coord], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[address_ylat_coord] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'title',
		CONVERT(nvarchar(4000), NEW.[title], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[title] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_club_person]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_club_person]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_person]
ON [dbo].[club_person]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_person]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_person]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_person',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([key])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'key',
			CONVERT(nvarchar(4000), OLD.[key], 0),
			CONVERT(nvarchar(4000), NEW.[key], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[key] <>
					OLD.[key]
				) Or
			
				(
					NEW.[key] Is Null And
					OLD.[key] Is Not Null
				) Or
				(
					NEW.[key] Is Not Null And
					OLD.[key] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([sex])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'sex',
			CONVERT(nvarchar(4000), OLD.[sex], 0),
			CONVERT(nvarchar(4000), NEW.[sex], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[sex] <>
					OLD.[sex]
				) Or
			
				(
					NEW.[sex] Is Null And
					OLD.[sex] Is Not Null
				) Or
				(
					NEW.[sex] Is Not Null And
					OLD.[sex] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([active])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'active',
			CONVERT(nvarchar(4000), OLD.[active], 0),
			CONVERT(nvarchar(4000), NEW.[active], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[active] <>
					OLD.[active]
				) Or
			
				(
					NEW.[active] Is Null And
					OLD.[active] Is Not Null
				) Or
				(
					NEW.[active] Is Not Null And
					OLD.[active] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([forename])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'forename',
			CONVERT(nvarchar(4000), OLD.[forename], 0),
			CONVERT(nvarchar(4000), NEW.[forename], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[forename] <>
					OLD.[forename]
				) Or
			
				(
					NEW.[forename] Is Null And
					OLD.[forename] Is Not Null
				) Or
				(
					NEW.[forename] Is Not Null And
					OLD.[forename] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([surname])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'surname',
			CONVERT(nvarchar(4000), OLD.[surname], 0),
			CONVERT(nvarchar(4000), NEW.[surname], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[surname] <>
					OLD.[surname]
				) Or
			
				(
					NEW.[surname] Is Null And
					OLD.[surname] Is Not Null
				) Or
				(
					NEW.[surname] Is Not Null And
					OLD.[surname] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([dob])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'dob',
			CONVERT(nvarchar(4000), OLD.[dob], 121),
			CONVERT(nvarchar(4000), NEW.[dob], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[dob] <>
					OLD.[dob]
				) Or
			
				(
					NEW.[dob] Is Null And
					OLD.[dob] Is Not Null
				) Or
				(
					NEW.[dob] Is Not Null And
					OLD.[dob] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([phone])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'phone',
			CONVERT(nvarchar(4000), OLD.[phone], 0),
			CONVERT(nvarchar(4000), NEW.[phone], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[phone] <>
					OLD.[phone]
				) Or
			
				(
					NEW.[phone] Is Null And
					OLD.[phone] Is Not Null
				) Or
				(
					NEW.[phone] Is Not Null And
					OLD.[phone] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([mobile_no])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'mobile_no',
			CONVERT(nvarchar(4000), OLD.[mobile_no], 0),
			CONVERT(nvarchar(4000), NEW.[mobile_no], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[mobile_no] <>
					OLD.[mobile_no]
				) Or
			
				(
					NEW.[mobile_no] Is Null And
					OLD.[mobile_no] Is Not Null
				) Or
				(
					NEW.[mobile_no] Is Not Null And
					OLD.[mobile_no] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([email])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'email',
			CONVERT(nvarchar(4000), OLD.[email], 0),
			CONVERT(nvarchar(4000), NEW.[email], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[email] <>
					OLD.[email]
				) Or
			
				(
					NEW.[email] Is Null And
					OLD.[email] Is Not Null
				) Or
				(
					NEW.[email] Is Not Null And
					OLD.[email] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([alergies])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'alergies',
			CONVERT(nvarchar(4000), OLD.[alergies], 0),
			CONVERT(nvarchar(4000), NEW.[alergies], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[alergies] <>
					OLD.[alergies]
				) Or
			
				(
					NEW.[alergies] Is Null And
					OLD.[alergies] Is Not Null
				) Or
				(
					NEW.[alergies] Is Not Null And
					OLD.[alergies] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([alergies_details])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'alergies_details',
			CONVERT(nvarchar(4000), OLD.[alergies_details], 0),
			CONVERT(nvarchar(4000), NEW.[alergies_details], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[alergies_details] <>
					OLD.[alergies_details]
				) Or
			
				(
					NEW.[alergies_details] Is Null And
					OLD.[alergies_details] Is Not Null
				) Or
				(
					NEW.[alergies_details] Is Not Null And
					OLD.[alergies_details] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([comments])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'comments',
			CONVERT(nvarchar(4000), OLD.[comments], 0),
			CONVERT(nvarchar(4000), NEW.[comments], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[comments] <>
					OLD.[comments]
				) Or
			
				(
					NEW.[comments] Is Null And
					OLD.[comments] Is Not Null
				) Or
				(
					NEW.[comments] Is Not Null And
					OLD.[comments] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([player_profile])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'player_profile',
			CONVERT(nvarchar(4000), OLD.[player_profile], 0),
			CONVERT(nvarchar(4000), NEW.[player_profile], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[player_profile] <>
					OLD.[player_profile]
				) Or
			
				(
					NEW.[player_profile] Is Null And
					OLD.[player_profile] Is Not Null
				) Or
				(
					NEW.[player_profile] Is Not Null And
					OLD.[player_profile] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([address_number])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'address_number',
			CONVERT(nvarchar(4000), OLD.[address_number], 0),
			CONVERT(nvarchar(4000), NEW.[address_number], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[address_number] <>
					OLD.[address_number]
				) Or
			
				(
					NEW.[address_number] Is Null And
					OLD.[address_number] Is Not Null
				) Or
				(
					NEW.[address_number] Is Not Null And
					OLD.[address_number] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([address_street])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'address_street',
			CONVERT(nvarchar(4000), OLD.[address_street], 0),
			CONVERT(nvarchar(4000), NEW.[address_street], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[address_street] <>
					OLD.[address_street]
				) Or
			
				(
					NEW.[address_street] Is Null And
					OLD.[address_street] Is Not Null
				) Or
				(
					NEW.[address_street] Is Not Null And
					OLD.[address_street] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([address_town])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'address_town',
			CONVERT(nvarchar(4000), OLD.[address_town], 0),
			CONVERT(nvarchar(4000), NEW.[address_town], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[address_town] <>
					OLD.[address_town]
				) Or
			
				(
					NEW.[address_town] Is Null And
					OLD.[address_town] Is Not Null
				) Or
				(
					NEW.[address_town] Is Not Null And
					OLD.[address_town] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([address_county])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'address_county',
			CONVERT(nvarchar(4000), OLD.[address_county], 0),
			CONVERT(nvarchar(4000), NEW.[address_county], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[address_county] <>
					OLD.[address_county]
				) Or
			
				(
					NEW.[address_county] Is Null And
					OLD.[address_county] Is Not Null
				) Or
				(
					NEW.[address_county] Is Not Null And
					OLD.[address_county] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([address_country])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'address_country',
			CONVERT(nvarchar(4000), OLD.[address_country], 0),
			CONVERT(nvarchar(4000), NEW.[address_country], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[address_country] <>
					OLD.[address_country]
				) Or
			
				(
					NEW.[address_country] Is Null And
					OLD.[address_country] Is Not Null
				) Or
				(
					NEW.[address_country] Is Not Null And
					OLD.[address_country] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([address_post_code])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'address_post_code',
			CONVERT(nvarchar(4000), OLD.[address_post_code], 0),
			CONVERT(nvarchar(4000), NEW.[address_post_code], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[address_post_code] <>
					OLD.[address_post_code]
				) Or
			
				(
					NEW.[address_post_code] Is Null And
					OLD.[address_post_code] Is Not Null
				) Or
				(
					NEW.[address_post_code] Is Not Null And
					OLD.[address_post_code] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([address_xlng_coord])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'address_xlng_coord',
			CONVERT(nvarchar(4000), OLD.[address_xlng_coord], 0),
			CONVERT(nvarchar(4000), NEW.[address_xlng_coord], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[address_xlng_coord] <>
					OLD.[address_xlng_coord]
				) Or
			
				(
					NEW.[address_xlng_coord] Is Null And
					OLD.[address_xlng_coord] Is Not Null
				) Or
				(
					NEW.[address_xlng_coord] Is Not Null And
					OLD.[address_xlng_coord] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([address_ylat_coord])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'address_ylat_coord',
			CONVERT(nvarchar(4000), OLD.[address_ylat_coord], 0),
			CONVERT(nvarchar(4000), NEW.[address_ylat_coord], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[address_ylat_coord] <>
					OLD.[address_ylat_coord]
				) Or
			
				(
					NEW.[address_ylat_coord] Is Null And
					OLD.[address_ylat_coord] Is Not Null
				) Or
				(
					NEW.[address_ylat_coord] Is Not Null And
					OLD.[address_ylat_coord] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([title])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'title',
			CONVERT(nvarchar(4000), OLD.[title], 0),
			CONVERT(nvarchar(4000), NEW.[title], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[title] <>
					OLD.[title]
				) Or
			
				(
					NEW.[title] Is Null And
					OLD.[title] Is Not Null
				) Or
				(
					NEW.[title] Is Not Null And
					OLD.[title] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_club_person]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_club_person_guardian]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_person_guardian]
ON [dbo].[club_person_guardian]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_person_guardian]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_person_guardian]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_person_guardian',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'person',
		CONVERT(nvarchar(4000), OLD.[person], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[person] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'guardian',
		CONVERT(nvarchar(4000), OLD.[guardian], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[guardian] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_club_person_guardian]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_club_person_guardian]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_person_guardian]
ON [dbo].[club_person_guardian]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_person_guardian]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_person_guardian]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_person_guardian',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'person',
		CONVERT(nvarchar(4000), NEW.[person], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[person] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'guardian',
		CONVERT(nvarchar(4000), NEW.[guardian], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[guardian] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_club_person_guardian]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_club_person_guardian]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_person_guardian]
ON [dbo].[club_person_guardian]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_person_guardian]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_person_guardian]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_person_guardian',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([person])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'person',
			CONVERT(nvarchar(4000), OLD.[person], 0),
			CONVERT(nvarchar(4000), NEW.[person], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[person] <>
					OLD.[person]
				) Or
			
				(
					NEW.[person] Is Null And
					OLD.[person] Is Not Null
				) Or
				(
					NEW.[person] Is Not Null And
					OLD.[person] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([guardian])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'guardian',
			CONVERT(nvarchar(4000), OLD.[guardian], 0),
			CONVERT(nvarchar(4000), NEW.[guardian], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[guardian] <>
					OLD.[guardian]
				) Or
			
				(
					NEW.[guardian] Is Null And
					OLD.[guardian] Is Not Null
				) Or
				(
					NEW.[guardian] Is Not Null And
					OLD.[guardian] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_club_person_guardian]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_club_person_membership_type]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_person_membership_type]
ON [dbo].[club_person_membership_type]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_person_membership_type]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_person_membership_type]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_person_membership_type',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'date',
		CONVERT(nvarchar(4000), OLD.[date], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[date] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), OLD.[active], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[active] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'person',
		CONVERT(nvarchar(4000), OLD.[person], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[person] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'membership_type',
		CONVERT(nvarchar(4000), OLD.[membership_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[membership_type] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_club_person_membership_type]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_club_person_membership_type]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_person_membership_type]
ON [dbo].[club_person_membership_type]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_person_membership_type]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_person_membership_type]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_person_membership_type',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'date',
		CONVERT(nvarchar(4000), NEW.[date], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[date] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), NEW.[active], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[active] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'person',
		CONVERT(nvarchar(4000), NEW.[person], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[person] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'membership_type',
		CONVERT(nvarchar(4000), NEW.[membership_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[membership_type] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_club_person_membership_type]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_club_person_membership_type]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_person_membership_type]
ON [dbo].[club_person_membership_type]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_person_membership_type]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_person_membership_type]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_person_membership_type',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([date])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'date',
			CONVERT(nvarchar(4000), OLD.[date], 121),
			CONVERT(nvarchar(4000), NEW.[date], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[date] <>
					OLD.[date]
				) Or
			
				(
					NEW.[date] Is Null And
					OLD.[date] Is Not Null
				) Or
				(
					NEW.[date] Is Not Null And
					OLD.[date] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([active])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'active',
			CONVERT(nvarchar(4000), OLD.[active], 0),
			CONVERT(nvarchar(4000), NEW.[active], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[active] <>
					OLD.[active]
				) Or
			
				(
					NEW.[active] Is Null And
					OLD.[active] Is Not Null
				) Or
				(
					NEW.[active] Is Not Null And
					OLD.[active] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([person])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'person',
			CONVERT(nvarchar(4000), OLD.[person], 0),
			CONVERT(nvarchar(4000), NEW.[person], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[person] <>
					OLD.[person]
				) Or
			
				(
					NEW.[person] Is Null And
					OLD.[person] Is Not Null
				) Or
				(
					NEW.[person] Is Not Null And
					OLD.[person] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([membership_type])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'membership_type',
			CONVERT(nvarchar(4000), OLD.[membership_type], 0),
			CONVERT(nvarchar(4000), NEW.[membership_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[membership_type] <>
					OLD.[membership_type]
				) Or
			
				(
					NEW.[membership_type] Is Null And
					OLD.[membership_type] Is Not Null
				) Or
				(
					NEW.[membership_type] Is Not Null And
					OLD.[membership_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_club_person_membership_type]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_club_person_qualification]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_person_qualification]
ON [dbo].[club_person_qualification]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_person_qualification]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_person_qualification]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_person_qualification',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'date_taken',
		CONVERT(nvarchar(4000), OLD.[date_taken], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[date_taken] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), OLD.[active], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[active] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'result',
		CONVERT(nvarchar(4000), OLD.[result], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[result] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'person',
		CONVERT(nvarchar(4000), OLD.[person], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[person] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'qualification',
		CONVERT(nvarchar(4000), OLD.[qualification], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[qualification] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_club_person_qualification]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_club_person_qualification]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_person_qualification]
ON [dbo].[club_person_qualification]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_person_qualification]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_person_qualification]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_person_qualification',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'date_taken',
		CONVERT(nvarchar(4000), NEW.[date_taken], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[date_taken] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), NEW.[active], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[active] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'result',
		CONVERT(nvarchar(4000), NEW.[result], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[result] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'person',
		CONVERT(nvarchar(4000), NEW.[person], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[person] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'qualification',
		CONVERT(nvarchar(4000), NEW.[qualification], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[qualification] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_club_person_qualification]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_club_person_qualification]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_person_qualification]
ON [dbo].[club_person_qualification]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_person_qualification]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_person_qualification]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_person_qualification',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([date_taken])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'date_taken',
			CONVERT(nvarchar(4000), OLD.[date_taken], 121),
			CONVERT(nvarchar(4000), NEW.[date_taken], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[date_taken] <>
					OLD.[date_taken]
				) Or
			
				(
					NEW.[date_taken] Is Null And
					OLD.[date_taken] Is Not Null
				) Or
				(
					NEW.[date_taken] Is Not Null And
					OLD.[date_taken] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([active])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'active',
			CONVERT(nvarchar(4000), OLD.[active], 0),
			CONVERT(nvarchar(4000), NEW.[active], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[active] <>
					OLD.[active]
				) Or
			
				(
					NEW.[active] Is Null And
					OLD.[active] Is Not Null
				) Or
				(
					NEW.[active] Is Not Null And
					OLD.[active] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([result])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'result',
			CONVERT(nvarchar(4000), OLD.[result], 0),
			CONVERT(nvarchar(4000), NEW.[result], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[result] <>
					OLD.[result]
				) Or
			
				(
					NEW.[result] Is Null And
					OLD.[result] Is Not Null
				) Or
				(
					NEW.[result] Is Not Null And
					OLD.[result] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([person])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'person',
			CONVERT(nvarchar(4000), OLD.[person], 0),
			CONVERT(nvarchar(4000), NEW.[person], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[person] <>
					OLD.[person]
				) Or
			
				(
					NEW.[person] Is Null And
					OLD.[person] Is Not Null
				) Or
				(
					NEW.[person] Is Not Null And
					OLD.[person] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([qualification])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'qualification',
			CONVERT(nvarchar(4000), OLD.[qualification], 0),
			CONVERT(nvarchar(4000), NEW.[qualification], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[qualification] <>
					OLD.[qualification]
				) Or
			
				(
					NEW.[qualification] Is Null And
					OLD.[qualification] Is Not Null
				) Or
				(
					NEW.[qualification] Is Not Null And
					OLD.[qualification] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_club_person_qualification]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_club_person_title]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_person_title]
ON [dbo].[club_person_title]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_person_title]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_person_title]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_person_title',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), OLD.[description], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[description] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), OLD.[active], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[active] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_club_person_title]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_club_person_title]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_person_title]
ON [dbo].[club_person_title]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_person_title]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_person_title]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_person_title',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), NEW.[description], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[description] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), NEW.[active], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[active] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_club_person_title]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_club_person_title]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_person_title]
ON [dbo].[club_person_title]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_person_title]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_person_title]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_person_title',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([description])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'description',
			CONVERT(nvarchar(4000), OLD.[description], 0),
			CONVERT(nvarchar(4000), NEW.[description], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[description] <>
					OLD.[description]
				) Or
			
				(
					NEW.[description] Is Null And
					OLD.[description] Is Not Null
				) Or
				(
					NEW.[description] Is Not Null And
					OLD.[description] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([active])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'active',
			CONVERT(nvarchar(4000), OLD.[active], 0),
			CONVERT(nvarchar(4000), NEW.[active], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[active] <>
					OLD.[active]
				) Or
			
				(
					NEW.[active] Is Null And
					OLD.[active] Is Not Null
				) Or
				(
					NEW.[active] Is Not Null And
					OLD.[active] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_club_person_title]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_club_qualification]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_qualification]
ON [dbo].[club_qualification]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_qualification]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_qualification]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_qualification',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), OLD.[name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[name] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), OLD.[active], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[active] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), OLD.[description], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[description] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'cost',
		CONVERT(nvarchar(4000), OLD.[cost], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[cost] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_club_qualification]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_club_qualification]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_qualification]
ON [dbo].[club_qualification]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_qualification]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_qualification]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_qualification',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), NEW.[name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[name] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), NEW.[active], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[active] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), NEW.[description], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[description] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'cost',
		CONVERT(nvarchar(4000), NEW.[cost], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[cost] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_club_qualification]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_club_qualification]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_qualification]
ON [dbo].[club_qualification]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_qualification]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_qualification]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_qualification',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([name])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'name',
			CONVERT(nvarchar(4000), OLD.[name], 0),
			CONVERT(nvarchar(4000), NEW.[name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[name] <>
					OLD.[name]
				) Or
			
				(
					NEW.[name] Is Null And
					OLD.[name] Is Not Null
				) Or
				(
					NEW.[name] Is Not Null And
					OLD.[name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([active])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'active',
			CONVERT(nvarchar(4000), OLD.[active], 0),
			CONVERT(nvarchar(4000), NEW.[active], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[active] <>
					OLD.[active]
				) Or
			
				(
					NEW.[active] Is Null And
					OLD.[active] Is Not Null
				) Or
				(
					NEW.[active] Is Not Null And
					OLD.[active] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([description])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'description',
			CONVERT(nvarchar(4000), OLD.[description], 0),
			CONVERT(nvarchar(4000), NEW.[description], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[description] <>
					OLD.[description]
				) Or
			
				(
					NEW.[description] Is Null And
					OLD.[description] Is Not Null
				) Or
				(
					NEW.[description] Is Not Null And
					OLD.[description] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([cost])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'cost',
			CONVERT(nvarchar(4000), OLD.[cost], 0),
			CONVERT(nvarchar(4000), NEW.[cost], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[cost] <>
					OLD.[cost]
				) Or
			
				(
					NEW.[cost] Is Null And
					OLD.[cost] Is Not Null
				) Or
				(
					NEW.[cost] Is Not Null And
					OLD.[cost] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_club_qualification]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_club_team]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_team]
ON [dbo].[club_team]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_team]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_team]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_team',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), OLD.[active], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[active] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), OLD.[name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[name] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'time_type',
		CONVERT(nvarchar(4000), OLD.[time_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[time_type] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'sex',
		CONVERT(nvarchar(4000), OLD.[sex], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[sex] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'year',
		CONVERT(nvarchar(4000), OLD.[year], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[year] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'start_date',
		CONVERT(nvarchar(4000), OLD.[start_date], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[start_date] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'end_date',
		CONVERT(nvarchar(4000), OLD.[end_date], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[end_date] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_club_team]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_club_team]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_team]
ON [dbo].[club_team]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_team]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_team]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_team',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), NEW.[active], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[active] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), NEW.[name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[name] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'time_type',
		CONVERT(nvarchar(4000), NEW.[time_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[time_type] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'sex',
		CONVERT(nvarchar(4000), NEW.[sex], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[sex] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'year',
		CONVERT(nvarchar(4000), NEW.[year], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[year] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'start_date',
		CONVERT(nvarchar(4000), NEW.[start_date], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[start_date] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'end_date',
		CONVERT(nvarchar(4000), NEW.[end_date], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[end_date] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_club_team]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_club_team]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_team]
ON [dbo].[club_team]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_team]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_team]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_team',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([active])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'active',
			CONVERT(nvarchar(4000), OLD.[active], 0),
			CONVERT(nvarchar(4000), NEW.[active], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[active] <>
					OLD.[active]
				) Or
			
				(
					NEW.[active] Is Null And
					OLD.[active] Is Not Null
				) Or
				(
					NEW.[active] Is Not Null And
					OLD.[active] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([name])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'name',
			CONVERT(nvarchar(4000), OLD.[name], 0),
			CONVERT(nvarchar(4000), NEW.[name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[name] <>
					OLD.[name]
				) Or
			
				(
					NEW.[name] Is Null And
					OLD.[name] Is Not Null
				) Or
				(
					NEW.[name] Is Not Null And
					OLD.[name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([time_type])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'time_type',
			CONVERT(nvarchar(4000), OLD.[time_type], 0),
			CONVERT(nvarchar(4000), NEW.[time_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[time_type] <>
					OLD.[time_type]
				) Or
			
				(
					NEW.[time_type] Is Null And
					OLD.[time_type] Is Not Null
				) Or
				(
					NEW.[time_type] Is Not Null And
					OLD.[time_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([sex])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'sex',
			CONVERT(nvarchar(4000), OLD.[sex], 0),
			CONVERT(nvarchar(4000), NEW.[sex], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[sex] <>
					OLD.[sex]
				) Or
			
				(
					NEW.[sex] Is Null And
					OLD.[sex] Is Not Null
				) Or
				(
					NEW.[sex] Is Not Null And
					OLD.[sex] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([year])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'year',
			CONVERT(nvarchar(4000), OLD.[year], 0),
			CONVERT(nvarchar(4000), NEW.[year], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[year] <>
					OLD.[year]
				) Or
			
				(
					NEW.[year] Is Null And
					OLD.[year] Is Not Null
				) Or
				(
					NEW.[year] Is Not Null And
					OLD.[year] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([start_date])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'start_date',
			CONVERT(nvarchar(4000), OLD.[start_date], 121),
			CONVERT(nvarchar(4000), NEW.[start_date], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[start_date] <>
					OLD.[start_date]
				) Or
			
				(
					NEW.[start_date] Is Null And
					OLD.[start_date] Is Not Null
				) Or
				(
					NEW.[start_date] Is Not Null And
					OLD.[start_date] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([end_date])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'end_date',
			CONVERT(nvarchar(4000), OLD.[end_date], 121),
			CONVERT(nvarchar(4000), NEW.[end_date], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[end_date] <>
					OLD.[end_date]
				) Or
			
				(
					NEW.[end_date] Is Null And
					OLD.[end_date] Is Not Null
				) Or
				(
					NEW.[end_date] Is Not Null And
					OLD.[end_date] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_club_team]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_club_team_admin]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_team_admin]
ON [dbo].[club_team_admin]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_team_admin]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_team_admin]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_team_admin',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'user',
		CONVERT(nvarchar(4000), OLD.[user], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[user] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'team',
		CONVERT(nvarchar(4000), OLD.[team], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[team] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_club_team_admin]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_club_team_admin]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_team_admin]
ON [dbo].[club_team_admin]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_team_admin]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_team_admin]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_team_admin',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'user',
		CONVERT(nvarchar(4000), NEW.[user], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[user] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'team',
		CONVERT(nvarchar(4000), NEW.[team], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[team] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_club_team_admin]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_club_team_admin]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_team_admin]
ON [dbo].[club_team_admin]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_team_admin]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_team_admin]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_team_admin',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([user])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'user',
			CONVERT(nvarchar(4000), OLD.[user], 0),
			CONVERT(nvarchar(4000), NEW.[user], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[user] <>
					OLD.[user]
				) Or
			
				(
					NEW.[user] Is Null And
					OLD.[user] Is Not Null
				) Or
				(
					NEW.[user] Is Not Null And
					OLD.[user] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([team])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'team',
			CONVERT(nvarchar(4000), OLD.[team], 0),
			CONVERT(nvarchar(4000), NEW.[team], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[team] <>
					OLD.[team]
				) Or
			
				(
					NEW.[team] Is Null And
					OLD.[team] Is Not Null
				) Or
				(
					NEW.[team] Is Not Null And
					OLD.[team] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_club_team_admin]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_club_team_member]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_team_member]
ON [dbo].[club_team_member]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_team_member]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_team_member]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_team_member',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'person',
		CONVERT(nvarchar(4000), OLD.[person], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[person] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'team',
		CONVERT(nvarchar(4000), OLD.[team], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[team] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'team_member_type',
		CONVERT(nvarchar(4000), OLD.[team_member_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[team_member_type] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_club_team_member]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_club_team_member]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_team_member]
ON [dbo].[club_team_member]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_team_member]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_team_member]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_team_member',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'person',
		CONVERT(nvarchar(4000), NEW.[person], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[person] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'team',
		CONVERT(nvarchar(4000), NEW.[team], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[team] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'team_member_type',
		CONVERT(nvarchar(4000), NEW.[team_member_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[team_member_type] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_club_team_member]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_club_team_member]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_team_member]
ON [dbo].[club_team_member]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_team_member]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_team_member]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_team_member',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([person])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'person',
			CONVERT(nvarchar(4000), OLD.[person], 0),
			CONVERT(nvarchar(4000), NEW.[person], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[person] <>
					OLD.[person]
				) Or
			
				(
					NEW.[person] Is Null And
					OLD.[person] Is Not Null
				) Or
				(
					NEW.[person] Is Not Null And
					OLD.[person] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([team])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'team',
			CONVERT(nvarchar(4000), OLD.[team], 0),
			CONVERT(nvarchar(4000), NEW.[team], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[team] <>
					OLD.[team]
				) Or
			
				(
					NEW.[team] Is Null And
					OLD.[team] Is Not Null
				) Or
				(
					NEW.[team] Is Not Null And
					OLD.[team] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([team_member_type])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'team_member_type',
			CONVERT(nvarchar(4000), OLD.[team_member_type], 0),
			CONVERT(nvarchar(4000), NEW.[team_member_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[team_member_type] <>
					OLD.[team_member_type]
				) Or
			
				(
					NEW.[team_member_type] Is Null And
					OLD.[team_member_type] Is Not Null
				) Or
				(
					NEW.[team_member_type] Is Not Null And
					OLD.[team_member_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_club_team_member]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_club_team_member_type]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_club_team_member_type]
ON [dbo].[club_team_member_type]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[club_team_member_type]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_team_member_type]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_team_member_type',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), OLD.[active], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[active] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'admin_member',
		CONVERT(nvarchar(4000), OLD.[admin_member], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[admin_member] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'playing_member',
		CONVERT(nvarchar(4000), OLD.[playing_member], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[playing_member] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'default',
		CONVERT(nvarchar(4000), OLD.[default], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[default] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), OLD.[name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[name] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), OLD.[description], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[description] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_club_team_member_type]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_club_team_member_type]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_club_team_member_type]
ON [dbo].[club_team_member_type]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[club_team_member_type]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_team_member_type]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_team_member_type',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), NEW.[active], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[active] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'admin_member',
		CONVERT(nvarchar(4000), NEW.[admin_member], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[admin_member] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'playing_member',
		CONVERT(nvarchar(4000), NEW.[playing_member], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[playing_member] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'default',
		CONVERT(nvarchar(4000), NEW.[default], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[default] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), NEW.[name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[name] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), NEW.[description], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[description] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_club_team_member_type]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_club_team_member_type]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_club_team_member_type]
ON [dbo].[club_team_member_type]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[club_team_member_type]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[club_team_member_type]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'club_team_member_type',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([active])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'active',
			CONVERT(nvarchar(4000), OLD.[active], 0),
			CONVERT(nvarchar(4000), NEW.[active], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[active] <>
					OLD.[active]
				) Or
			
				(
					NEW.[active] Is Null And
					OLD.[active] Is Not Null
				) Or
				(
					NEW.[active] Is Not Null And
					OLD.[active] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([admin_member])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'admin_member',
			CONVERT(nvarchar(4000), OLD.[admin_member], 0),
			CONVERT(nvarchar(4000), NEW.[admin_member], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[admin_member] <>
					OLD.[admin_member]
				) Or
			
				(
					NEW.[admin_member] Is Null And
					OLD.[admin_member] Is Not Null
				) Or
				(
					NEW.[admin_member] Is Not Null And
					OLD.[admin_member] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([playing_member])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'playing_member',
			CONVERT(nvarchar(4000), OLD.[playing_member], 0),
			CONVERT(nvarchar(4000), NEW.[playing_member], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[playing_member] <>
					OLD.[playing_member]
				) Or
			
				(
					NEW.[playing_member] Is Null And
					OLD.[playing_member] Is Not Null
				) Or
				(
					NEW.[playing_member] Is Not Null And
					OLD.[playing_member] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([default])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'default',
			CONVERT(nvarchar(4000), OLD.[default], 0),
			CONVERT(nvarchar(4000), NEW.[default], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[default] <>
					OLD.[default]
				) Or
			
				(
					NEW.[default] Is Null And
					OLD.[default] Is Not Null
				) Or
				(
					NEW.[default] Is Not Null And
					OLD.[default] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([name])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'name',
			CONVERT(nvarchar(4000), OLD.[name], 0),
			CONVERT(nvarchar(4000), NEW.[name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[name] <>
					OLD.[name]
				) Or
			
				(
					NEW.[name] Is Null And
					OLD.[name] Is Not Null
				) Or
				(
					NEW.[name] Is Not Null And
					OLD.[name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([description])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'description',
			CONVERT(nvarchar(4000), OLD.[description], 0),
			CONVERT(nvarchar(4000), NEW.[description], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[description] <>
					OLD.[description]
				) Or
			
				(
					NEW.[description] Is Null And
					OLD.[description] Is Not Null
				) Or
				(
					NEW.[description] Is Not Null And
					OLD.[description] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_club_team_member_type]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_core_application_session]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_application_session]
ON [dbo].[core_application_session]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_application_session]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_application_session]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_application_session',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'date',
		CONVERT(nvarchar(4000), OLD.[date], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[date] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'session_id',
		CONVERT(nvarchar(4000), OLD.[session_id], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[session_id] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'host',
		CONVERT(nvarchar(4000), OLD.[host], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[host] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'id',
		CONVERT(nvarchar(4000), OLD.[id], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[id] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'process_id',
		CONVERT(nvarchar(4000), OLD.[process_id], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[process_id] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'end_date',
		CONVERT(nvarchar(4000), OLD.[end_date], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[end_date] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'user',
		CONVERT(nvarchar(4000), OLD.[user], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[user] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_core_application_session]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_core_application_session]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_application_session]
ON [dbo].[core_application_session]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_application_session]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_application_session]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_application_session',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'date',
		CONVERT(nvarchar(4000), NEW.[date], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[date] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'session_id',
		CONVERT(nvarchar(4000), NEW.[session_id], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[session_id] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'host',
		CONVERT(nvarchar(4000), NEW.[host], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[host] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'id',
		CONVERT(nvarchar(4000), NEW.[id], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[id] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'process_id',
		CONVERT(nvarchar(4000), NEW.[process_id], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[process_id] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'end_date',
		CONVERT(nvarchar(4000), NEW.[end_date], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[end_date] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'user',
		CONVERT(nvarchar(4000), NEW.[user], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[user] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_core_application_session]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_core_application_session]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_application_session]
ON [dbo].[core_application_session]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_application_session]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:51
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_application_session]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_application_session',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([date])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'date',
			CONVERT(nvarchar(4000), OLD.[date], 121),
			CONVERT(nvarchar(4000), NEW.[date], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[date] <>
					OLD.[date]
				) Or
			
				(
					NEW.[date] Is Null And
					OLD.[date] Is Not Null
				) Or
				(
					NEW.[date] Is Not Null And
					OLD.[date] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([session_id])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'session_id',
			CONVERT(nvarchar(4000), OLD.[session_id], 0),
			CONVERT(nvarchar(4000), NEW.[session_id], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[session_id] <>
					OLD.[session_id]
				) Or
			
				(
					NEW.[session_id] Is Null And
					OLD.[session_id] Is Not Null
				) Or
				(
					NEW.[session_id] Is Not Null And
					OLD.[session_id] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([host])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'host',
			CONVERT(nvarchar(4000), OLD.[host], 0),
			CONVERT(nvarchar(4000), NEW.[host], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[host] <>
					OLD.[host]
				) Or
			
				(
					NEW.[host] Is Null And
					OLD.[host] Is Not Null
				) Or
				(
					NEW.[host] Is Not Null And
					OLD.[host] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([id])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'id',
			CONVERT(nvarchar(4000), OLD.[id], 0),
			CONVERT(nvarchar(4000), NEW.[id], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[id] <>
					OLD.[id]
				) Or
			
				(
					NEW.[id] Is Null And
					OLD.[id] Is Not Null
				) Or
				(
					NEW.[id] Is Not Null And
					OLD.[id] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([process_id])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'process_id',
			CONVERT(nvarchar(4000), OLD.[process_id], 0),
			CONVERT(nvarchar(4000), NEW.[process_id], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[process_id] <>
					OLD.[process_id]
				) Or
			
				(
					NEW.[process_id] Is Null And
					OLD.[process_id] Is Not Null
				) Or
				(
					NEW.[process_id] Is Not Null And
					OLD.[process_id] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([end_date])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'end_date',
			CONVERT(nvarchar(4000), OLD.[end_date], 121),
			CONVERT(nvarchar(4000), NEW.[end_date], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[end_date] <>
					OLD.[end_date]
				) Or
			
				(
					NEW.[end_date] Is Null And
					OLD.[end_date] Is Not Null
				) Or
				(
					NEW.[end_date] Is Not Null And
					OLD.[end_date] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([user])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'user',
			CONVERT(nvarchar(4000), OLD.[user], 0),
			CONVERT(nvarchar(4000), NEW.[user], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[user] <>
					OLD.[user]
				) Or
			
				(
					NEW.[user] Is Null And
					OLD.[user] Is Not Null
				) Or
				(
					NEW.[user] Is Not Null And
					OLD.[user] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_core_application_session]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_core_category_access]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_category_access]
ON [dbo].[core_category_access]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_category_access]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_category_access]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_category_access',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'category',
		CONVERT(nvarchar(4000), OLD.[category], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[category] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'access',
		CONVERT(nvarchar(4000), OLD.[access], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[access] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'role',
		CONVERT(nvarchar(4000), OLD.[role], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[role] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_core_category_access]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_core_category_access]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_category_access]
ON [dbo].[core_category_access]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_category_access]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_category_access]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_category_access',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'category',
		CONVERT(nvarchar(4000), NEW.[category], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[category] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'access',
		CONVERT(nvarchar(4000), NEW.[access], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[access] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'role',
		CONVERT(nvarchar(4000), NEW.[role], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[role] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_core_category_access]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_core_category_access]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_category_access]
ON [dbo].[core_category_access]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_category_access]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_category_access]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_category_access',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([category])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'category',
			CONVERT(nvarchar(4000), OLD.[category], 0),
			CONVERT(nvarchar(4000), NEW.[category], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[category] <>
					OLD.[category]
				) Or
			
				(
					NEW.[category] Is Null And
					OLD.[category] Is Not Null
				) Or
				(
					NEW.[category] Is Not Null And
					OLD.[category] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([access])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'access',
			CONVERT(nvarchar(4000), OLD.[access], 0),
			CONVERT(nvarchar(4000), NEW.[access], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[access] <>
					OLD.[access]
				) Or
			
				(
					NEW.[access] Is Null And
					OLD.[access] Is Not Null
				) Or
				(
					NEW.[access] Is Not Null And
					OLD.[access] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([role])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'role',
			CONVERT(nvarchar(4000), OLD.[role], 0),
			CONVERT(nvarchar(4000), NEW.[role], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[role] <>
					OLD.[role]
				) Or
			
				(
					NEW.[role] Is Null And
					OLD.[role] Is Not Null
				) Or
				(
					NEW.[role] Is Not Null And
					OLD.[role] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_core_category_access]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_core_class_access]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_class_access]
ON [dbo].[core_class_access]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_class_access]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_class_access]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_class_access',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'class_type',
		CONVERT(nvarchar(4000), OLD.[class_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[class_type] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'property',
		CONVERT(nvarchar(4000), OLD.[property], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[property] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'value',
		CONVERT(nvarchar(4000), OLD.[value], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[value] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'access',
		CONVERT(nvarchar(4000), OLD.[access], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[access] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'role',
		CONVERT(nvarchar(4000), OLD.[role], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[role] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_core_class_access]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_core_class_access]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_class_access]
ON [dbo].[core_class_access]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_class_access]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_class_access]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_class_access',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'class_type',
		CONVERT(nvarchar(4000), NEW.[class_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[class_type] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'property',
		CONVERT(nvarchar(4000), NEW.[property], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[property] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'value',
		CONVERT(nvarchar(4000), NEW.[value], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[value] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'access',
		CONVERT(nvarchar(4000), NEW.[access], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[access] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'role',
		CONVERT(nvarchar(4000), NEW.[role], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[role] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_core_class_access]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_core_class_access]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_class_access]
ON [dbo].[core_class_access]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_class_access]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_class_access]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_class_access',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([class_type])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'class_type',
			CONVERT(nvarchar(4000), OLD.[class_type], 0),
			CONVERT(nvarchar(4000), NEW.[class_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[class_type] <>
					OLD.[class_type]
				) Or
			
				(
					NEW.[class_type] Is Null And
					OLD.[class_type] Is Not Null
				) Or
				(
					NEW.[class_type] Is Not Null And
					OLD.[class_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([property])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'property',
			CONVERT(nvarchar(4000), OLD.[property], 0),
			CONVERT(nvarchar(4000), NEW.[property], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[property] <>
					OLD.[property]
				) Or
			
				(
					NEW.[property] Is Null And
					OLD.[property] Is Not Null
				) Or
				(
					NEW.[property] Is Not Null And
					OLD.[property] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([value])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'value',
			CONVERT(nvarchar(4000), OLD.[value], 0),
			CONVERT(nvarchar(4000), NEW.[value], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[value] <>
					OLD.[value]
				) Or
			
				(
					NEW.[value] Is Null And
					OLD.[value] Is Not Null
				) Or
				(
					NEW.[value] Is Not Null And
					OLD.[value] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([access])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'access',
			CONVERT(nvarchar(4000), OLD.[access], 0),
			CONVERT(nvarchar(4000), NEW.[access], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[access] <>
					OLD.[access]
				) Or
			
				(
					NEW.[access] Is Null And
					OLD.[access] Is Not Null
				) Or
				(
					NEW.[access] Is Not Null And
					OLD.[access] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([role])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'role',
			CONVERT(nvarchar(4000), OLD.[role], 0),
			CONVERT(nvarchar(4000), NEW.[role], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[role] <>
					OLD.[role]
				) Or
			
				(
					NEW.[role] Is Null And
					OLD.[role] Is Not Null
				) Or
				(
					NEW.[role] Is Not Null And
					OLD.[role] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_core_class_access]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_core_class_command]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_class_command]
ON [dbo].[core_class_command]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_class_command]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_class_command]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_class_command',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'class_type',
		CONVERT(nvarchar(4000), OLD.[class_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[class_type] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'command_index',
		CONVERT(nvarchar(4000), OLD.[command_index], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[command_index] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'point',
		CONVERT(nvarchar(4000), OLD.[point], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[point] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'order',
		CONVERT(nvarchar(4000), OLD.[order], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[order] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'command_type',
		CONVERT(nvarchar(4000), OLD.[command_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[command_type] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'init_data',
		CONVERT(nvarchar(4000), OLD.[init_data], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[init_data] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'property',
		CONVERT(nvarchar(4000), OLD.[property], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[property] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_core_class_command]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_core_class_command]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_class_command]
ON [dbo].[core_class_command]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_class_command]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_class_command]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_class_command',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'class_type',
		CONVERT(nvarchar(4000), NEW.[class_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[class_type] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'command_index',
		CONVERT(nvarchar(4000), NEW.[command_index], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[command_index] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'point',
		CONVERT(nvarchar(4000), NEW.[point], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[point] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'order',
		CONVERT(nvarchar(4000), NEW.[order], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[order] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'command_type',
		CONVERT(nvarchar(4000), NEW.[command_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[command_type] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'init_data',
		CONVERT(nvarchar(4000), NEW.[init_data], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[init_data] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'property',
		CONVERT(nvarchar(4000), NEW.[property], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[property] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_core_class_command]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_core_class_command]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_class_command]
ON [dbo].[core_class_command]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_class_command]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_class_command]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_class_command',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([class_type])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'class_type',
			CONVERT(nvarchar(4000), OLD.[class_type], 0),
			CONVERT(nvarchar(4000), NEW.[class_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[class_type] <>
					OLD.[class_type]
				) Or
			
				(
					NEW.[class_type] Is Null And
					OLD.[class_type] Is Not Null
				) Or
				(
					NEW.[class_type] Is Not Null And
					OLD.[class_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([command_index])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'command_index',
			CONVERT(nvarchar(4000), OLD.[command_index], 0),
			CONVERT(nvarchar(4000), NEW.[command_index], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[command_index] <>
					OLD.[command_index]
				) Or
			
				(
					NEW.[command_index] Is Null And
					OLD.[command_index] Is Not Null
				) Or
				(
					NEW.[command_index] Is Not Null And
					OLD.[command_index] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([point])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'point',
			CONVERT(nvarchar(4000), OLD.[point], 0),
			CONVERT(nvarchar(4000), NEW.[point], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[point] <>
					OLD.[point]
				) Or
			
				(
					NEW.[point] Is Null And
					OLD.[point] Is Not Null
				) Or
				(
					NEW.[point] Is Not Null And
					OLD.[point] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([order])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'order',
			CONVERT(nvarchar(4000), OLD.[order], 0),
			CONVERT(nvarchar(4000), NEW.[order], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[order] <>
					OLD.[order]
				) Or
			
				(
					NEW.[order] Is Null And
					OLD.[order] Is Not Null
				) Or
				(
					NEW.[order] Is Not Null And
					OLD.[order] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([command_type])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'command_type',
			CONVERT(nvarchar(4000), OLD.[command_type], 0),
			CONVERT(nvarchar(4000), NEW.[command_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[command_type] <>
					OLD.[command_type]
				) Or
			
				(
					NEW.[command_type] Is Null And
					OLD.[command_type] Is Not Null
				) Or
				(
					NEW.[command_type] Is Not Null And
					OLD.[command_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([init_data])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'init_data',
			CONVERT(nvarchar(4000), OLD.[init_data], 0),
			CONVERT(nvarchar(4000), NEW.[init_data], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[init_data] <>
					OLD.[init_data]
				) Or
			
				(
					NEW.[init_data] Is Null And
					OLD.[init_data] Is Not Null
				) Or
				(
					NEW.[init_data] Is Not Null And
					OLD.[init_data] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([property])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'property',
			CONVERT(nvarchar(4000), OLD.[property], 0),
			CONVERT(nvarchar(4000), NEW.[property], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[property] <>
					OLD.[property]
				) Or
			
				(
					NEW.[property] Is Null And
					OLD.[property] Is Not Null
				) Or
				(
					NEW.[property] Is Not Null And
					OLD.[property] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_core_class_command]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_core_command]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_command]
ON [dbo].[core_command]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_command]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_command]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_command',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'icon',
		dbo.AUDIT_fn_HexToStr(OLD.[icon]),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[icon] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), OLD.[description], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[description] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'concrete_command',
		CONVERT(nvarchar(4000), OLD.[concrete_command], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[concrete_command] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'init_data',
		CONVERT(nvarchar(4000), OLD.[init_data], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[init_data] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_core_command]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_core_command]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_command]
ON [dbo].[core_command]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_command]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_command]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_command',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'icon',
		dbo.AUDIT_fn_HexToStr(NEW.[icon]),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[icon] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), NEW.[description], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[description] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'concrete_command',
		CONVERT(nvarchar(4000), NEW.[concrete_command], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[concrete_command] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'init_data',
		CONVERT(nvarchar(4000), NEW.[init_data], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[init_data] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_core_command]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_core_command]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_command]
ON [dbo].[core_command]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_command]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_command]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_command',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([icon])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'icon',
			dbo.AUDIT_fn_HexToStr(OLD.[icon]),
			dbo.AUDIT_fn_HexToStr(NEW.[icon]),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[icon] <>
					OLD.[icon]
				) Or
			
				(
					NEW.[icon] Is Null And
					OLD.[icon] Is Not Null
				) Or
				(
					NEW.[icon] Is Not Null And
					OLD.[icon] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([description])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'description',
			CONVERT(nvarchar(4000), OLD.[description], 0),
			CONVERT(nvarchar(4000), NEW.[description], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[description] <>
					OLD.[description]
				) Or
			
				(
					NEW.[description] Is Null And
					OLD.[description] Is Not Null
				) Or
				(
					NEW.[description] Is Not Null And
					OLD.[description] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([concrete_command])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'concrete_command',
			CONVERT(nvarchar(4000), OLD.[concrete_command], 0),
			CONVERT(nvarchar(4000), NEW.[concrete_command], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[concrete_command] <>
					OLD.[concrete_command]
				) Or
			
				(
					NEW.[concrete_command] Is Null And
					OLD.[concrete_command] Is Not Null
				) Or
				(
					NEW.[concrete_command] Is Not Null And
					OLD.[concrete_command] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([init_data])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'init_data',
			CONVERT(nvarchar(4000), OLD.[init_data], 0),
			CONVERT(nvarchar(4000), NEW.[init_data], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[init_data] <>
					OLD.[init_data]
				) Or
			
				(
					NEW.[init_data] Is Null And
					OLD.[init_data] Is Not Null
				) Or
				(
					NEW.[init_data] Is Not Null And
					OLD.[init_data] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_core_command]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_core_criterion]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_criterion]
ON [dbo].[core_criterion]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_criterion]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_criterion]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_criterion',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'type',
		CONVERT(nvarchar(4000), OLD.[type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[type] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'field_name',
		CONVERT(nvarchar(4000), OLD.[field_name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[field_name] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'caption',
		CONVERT(nvarchar(4000), OLD.[caption], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[caption] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'field_type',
		CONVERT(nvarchar(4000), OLD.[field_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[field_type] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'match_type',
		CONVERT(nvarchar(4000), OLD.[match_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[match_type] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'is_mandatory',
		CONVERT(nvarchar(4000), OLD.[is_mandatory], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[is_mandatory] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'is_visible',
		CONVERT(nvarchar(4000), OLD.[is_visible], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[is_visible] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'check_for_null',
		CONVERT(nvarchar(4000), OLD.[check_for_null], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[check_for_null] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'lookup_index',
		CONVERT(nvarchar(4000), OLD.[lookup_index], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[lookup_index] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'dictionary_name',
		CONVERT(nvarchar(4000), OLD.[dictionary_name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[dictionary_name] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'lookup_type',
		CONVERT(nvarchar(4000), OLD.[lookup_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[lookup_type] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'display_format',
		CONVERT(nvarchar(4000), OLD.[display_format], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[display_format] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'use_specified_value',
		CONVERT(nvarchar(4000), OLD.[use_specified_value], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[use_specified_value] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'lookup_property_name',
		CONVERT(nvarchar(4000), OLD.[lookup_property_name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[lookup_property_name] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'replacement_type',
		CONVERT(nvarchar(4000), OLD.[replacement_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[replacement_type] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'ascending',
		CONVERT(nvarchar(4000), OLD.[ascending], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[ascending] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'parent',
		CONVERT(nvarchar(4000), OLD.[parent], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[parent] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'search_spec',
		CONVERT(nvarchar(4000), OLD.[search_spec], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[search_spec] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_core_criterion]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_core_criterion]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_criterion]
ON [dbo].[core_criterion]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_criterion]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_criterion]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_criterion',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'type',
		CONVERT(nvarchar(4000), NEW.[type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[type] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'field_name',
		CONVERT(nvarchar(4000), NEW.[field_name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[field_name] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'caption',
		CONVERT(nvarchar(4000), NEW.[caption], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[caption] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'field_type',
		CONVERT(nvarchar(4000), NEW.[field_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[field_type] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'match_type',
		CONVERT(nvarchar(4000), NEW.[match_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[match_type] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'is_mandatory',
		CONVERT(nvarchar(4000), NEW.[is_mandatory], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[is_mandatory] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'is_visible',
		CONVERT(nvarchar(4000), NEW.[is_visible], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[is_visible] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'check_for_null',
		CONVERT(nvarchar(4000), NEW.[check_for_null], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[check_for_null] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'lookup_index',
		CONVERT(nvarchar(4000), NEW.[lookup_index], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[lookup_index] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'dictionary_name',
		CONVERT(nvarchar(4000), NEW.[dictionary_name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[dictionary_name] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'lookup_type',
		CONVERT(nvarchar(4000), NEW.[lookup_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[lookup_type] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'display_format',
		CONVERT(nvarchar(4000), NEW.[display_format], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[display_format] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'use_specified_value',
		CONVERT(nvarchar(4000), NEW.[use_specified_value], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[use_specified_value] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'lookup_property_name',
		CONVERT(nvarchar(4000), NEW.[lookup_property_name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[lookup_property_name] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'replacement_type',
		CONVERT(nvarchar(4000), NEW.[replacement_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[replacement_type] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'ascending',
		CONVERT(nvarchar(4000), NEW.[ascending], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[ascending] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'parent',
		CONVERT(nvarchar(4000), NEW.[parent], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[parent] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'search_spec',
		CONVERT(nvarchar(4000), NEW.[search_spec], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[search_spec] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_core_criterion]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_core_criterion]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_criterion]
ON [dbo].[core_criterion]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_criterion]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_criterion]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_criterion',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([type])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'type',
			CONVERT(nvarchar(4000), OLD.[type], 0),
			CONVERT(nvarchar(4000), NEW.[type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[type] <>
					OLD.[type]
				) Or
			
				(
					NEW.[type] Is Null And
					OLD.[type] Is Not Null
				) Or
				(
					NEW.[type] Is Not Null And
					OLD.[type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([field_name])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'field_name',
			CONVERT(nvarchar(4000), OLD.[field_name], 0),
			CONVERT(nvarchar(4000), NEW.[field_name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[field_name] <>
					OLD.[field_name]
				) Or
			
				(
					NEW.[field_name] Is Null And
					OLD.[field_name] Is Not Null
				) Or
				(
					NEW.[field_name] Is Not Null And
					OLD.[field_name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([caption])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'caption',
			CONVERT(nvarchar(4000), OLD.[caption], 0),
			CONVERT(nvarchar(4000), NEW.[caption], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[caption] <>
					OLD.[caption]
				) Or
			
				(
					NEW.[caption] Is Null And
					OLD.[caption] Is Not Null
				) Or
				(
					NEW.[caption] Is Not Null And
					OLD.[caption] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([field_type])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'field_type',
			CONVERT(nvarchar(4000), OLD.[field_type], 0),
			CONVERT(nvarchar(4000), NEW.[field_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[field_type] <>
					OLD.[field_type]
				) Or
			
				(
					NEW.[field_type] Is Null And
					OLD.[field_type] Is Not Null
				) Or
				(
					NEW.[field_type] Is Not Null And
					OLD.[field_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([match_type])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'match_type',
			CONVERT(nvarchar(4000), OLD.[match_type], 0),
			CONVERT(nvarchar(4000), NEW.[match_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[match_type] <>
					OLD.[match_type]
				) Or
			
				(
					NEW.[match_type] Is Null And
					OLD.[match_type] Is Not Null
				) Or
				(
					NEW.[match_type] Is Not Null And
					OLD.[match_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([is_mandatory])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'is_mandatory',
			CONVERT(nvarchar(4000), OLD.[is_mandatory], 0),
			CONVERT(nvarchar(4000), NEW.[is_mandatory], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[is_mandatory] <>
					OLD.[is_mandatory]
				) Or
			
				(
					NEW.[is_mandatory] Is Null And
					OLD.[is_mandatory] Is Not Null
				) Or
				(
					NEW.[is_mandatory] Is Not Null And
					OLD.[is_mandatory] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([is_visible])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'is_visible',
			CONVERT(nvarchar(4000), OLD.[is_visible], 0),
			CONVERT(nvarchar(4000), NEW.[is_visible], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[is_visible] <>
					OLD.[is_visible]
				) Or
			
				(
					NEW.[is_visible] Is Null And
					OLD.[is_visible] Is Not Null
				) Or
				(
					NEW.[is_visible] Is Not Null And
					OLD.[is_visible] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([check_for_null])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'check_for_null',
			CONVERT(nvarchar(4000), OLD.[check_for_null], 0),
			CONVERT(nvarchar(4000), NEW.[check_for_null], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[check_for_null] <>
					OLD.[check_for_null]
				) Or
			
				(
					NEW.[check_for_null] Is Null And
					OLD.[check_for_null] Is Not Null
				) Or
				(
					NEW.[check_for_null] Is Not Null And
					OLD.[check_for_null] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([lookup_index])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'lookup_index',
			CONVERT(nvarchar(4000), OLD.[lookup_index], 0),
			CONVERT(nvarchar(4000), NEW.[lookup_index], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[lookup_index] <>
					OLD.[lookup_index]
				) Or
			
				(
					NEW.[lookup_index] Is Null And
					OLD.[lookup_index] Is Not Null
				) Or
				(
					NEW.[lookup_index] Is Not Null And
					OLD.[lookup_index] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([dictionary_name])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'dictionary_name',
			CONVERT(nvarchar(4000), OLD.[dictionary_name], 0),
			CONVERT(nvarchar(4000), NEW.[dictionary_name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[dictionary_name] <>
					OLD.[dictionary_name]
				) Or
			
				(
					NEW.[dictionary_name] Is Null And
					OLD.[dictionary_name] Is Not Null
				) Or
				(
					NEW.[dictionary_name] Is Not Null And
					OLD.[dictionary_name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([lookup_type])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'lookup_type',
			CONVERT(nvarchar(4000), OLD.[lookup_type], 0),
			CONVERT(nvarchar(4000), NEW.[lookup_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[lookup_type] <>
					OLD.[lookup_type]
				) Or
			
				(
					NEW.[lookup_type] Is Null And
					OLD.[lookup_type] Is Not Null
				) Or
				(
					NEW.[lookup_type] Is Not Null And
					OLD.[lookup_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([display_format])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'display_format',
			CONVERT(nvarchar(4000), OLD.[display_format], 0),
			CONVERT(nvarchar(4000), NEW.[display_format], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[display_format] <>
					OLD.[display_format]
				) Or
			
				(
					NEW.[display_format] Is Null And
					OLD.[display_format] Is Not Null
				) Or
				(
					NEW.[display_format] Is Not Null And
					OLD.[display_format] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([use_specified_value])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'use_specified_value',
			CONVERT(nvarchar(4000), OLD.[use_specified_value], 0),
			CONVERT(nvarchar(4000), NEW.[use_specified_value], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[use_specified_value] <>
					OLD.[use_specified_value]
				) Or
			
				(
					NEW.[use_specified_value] Is Null And
					OLD.[use_specified_value] Is Not Null
				) Or
				(
					NEW.[use_specified_value] Is Not Null And
					OLD.[use_specified_value] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([lookup_property_name])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'lookup_property_name',
			CONVERT(nvarchar(4000), OLD.[lookup_property_name], 0),
			CONVERT(nvarchar(4000), NEW.[lookup_property_name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[lookup_property_name] <>
					OLD.[lookup_property_name]
				) Or
			
				(
					NEW.[lookup_property_name] Is Null And
					OLD.[lookup_property_name] Is Not Null
				) Or
				(
					NEW.[lookup_property_name] Is Not Null And
					OLD.[lookup_property_name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([replacement_type])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'replacement_type',
			CONVERT(nvarchar(4000), OLD.[replacement_type], 0),
			CONVERT(nvarchar(4000), NEW.[replacement_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[replacement_type] <>
					OLD.[replacement_type]
				) Or
			
				(
					NEW.[replacement_type] Is Null And
					OLD.[replacement_type] Is Not Null
				) Or
				(
					NEW.[replacement_type] Is Not Null And
					OLD.[replacement_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([ascending])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'ascending',
			CONVERT(nvarchar(4000), OLD.[ascending], 0),
			CONVERT(nvarchar(4000), NEW.[ascending], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[ascending] <>
					OLD.[ascending]
				) Or
			
				(
					NEW.[ascending] Is Null And
					OLD.[ascending] Is Not Null
				) Or
				(
					NEW.[ascending] Is Not Null And
					OLD.[ascending] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([parent])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'parent',
			CONVERT(nvarchar(4000), OLD.[parent], 0),
			CONVERT(nvarchar(4000), NEW.[parent], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[parent] <>
					OLD.[parent]
				) Or
			
				(
					NEW.[parent] Is Null And
					OLD.[parent] Is Not Null
				) Or
				(
					NEW.[parent] Is Not Null And
					OLD.[parent] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([search_spec])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'search_spec',
			CONVERT(nvarchar(4000), OLD.[search_spec], 0),
			CONVERT(nvarchar(4000), NEW.[search_spec], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[search_spec] <>
					OLD.[search_spec]
				) Or
			
				(
					NEW.[search_spec] Is Null And
					OLD.[search_spec] Is Not Null
				) Or
				(
					NEW.[search_spec] Is Not Null And
					OLD.[search_spec] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_core_criterion]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_core_display_format]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_display_format]
ON [dbo].[core_display_format]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_display_format]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_display_format]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_display_format',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'class_type',
		CONVERT(nvarchar(4000), OLD.[class_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[class_type] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'display_name',
		CONVERT(nvarchar(4000), OLD.[display_name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[display_name] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'default_sort',
		CONVERT(nvarchar(4000), OLD.[default_sort], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[default_sort] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'summary_format',
		CONVERT(nvarchar(4000), OLD.[summary_format], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[summary_format] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'list_format',
		CONVERT(nvarchar(4000), OLD.[list_format], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[list_format] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'tabs',
		CONVERT(nvarchar(4000), OLD.[tabs], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[tabs] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_core_display_format]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_core_display_format]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_display_format]
ON [dbo].[core_display_format]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_display_format]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_display_format]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_display_format',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'class_type',
		CONVERT(nvarchar(4000), NEW.[class_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[class_type] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'display_name',
		CONVERT(nvarchar(4000), NEW.[display_name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[display_name] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'default_sort',
		CONVERT(nvarchar(4000), NEW.[default_sort], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[default_sort] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'summary_format',
		CONVERT(nvarchar(4000), NEW.[summary_format], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[summary_format] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'list_format',
		CONVERT(nvarchar(4000), NEW.[list_format], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[list_format] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'tabs',
		CONVERT(nvarchar(4000), NEW.[tabs], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[tabs] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_core_display_format]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_core_display_format]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_display_format]
ON [dbo].[core_display_format]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_display_format]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_display_format]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_display_format',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([class_type])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'class_type',
			CONVERT(nvarchar(4000), OLD.[class_type], 0),
			CONVERT(nvarchar(4000), NEW.[class_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[class_type] <>
					OLD.[class_type]
				) Or
			
				(
					NEW.[class_type] Is Null And
					OLD.[class_type] Is Not Null
				) Or
				(
					NEW.[class_type] Is Not Null And
					OLD.[class_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([display_name])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'display_name',
			CONVERT(nvarchar(4000), OLD.[display_name], 0),
			CONVERT(nvarchar(4000), NEW.[display_name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[display_name] <>
					OLD.[display_name]
				) Or
			
				(
					NEW.[display_name] Is Null And
					OLD.[display_name] Is Not Null
				) Or
				(
					NEW.[display_name] Is Not Null And
					OLD.[display_name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([default_sort])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'default_sort',
			CONVERT(nvarchar(4000), OLD.[default_sort], 0),
			CONVERT(nvarchar(4000), NEW.[default_sort], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[default_sort] <>
					OLD.[default_sort]
				) Or
			
				(
					NEW.[default_sort] Is Null And
					OLD.[default_sort] Is Not Null
				) Or
				(
					NEW.[default_sort] Is Not Null And
					OLD.[default_sort] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([summary_format])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'summary_format',
			CONVERT(nvarchar(4000), OLD.[summary_format], 0),
			CONVERT(nvarchar(4000), NEW.[summary_format], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[summary_format] <>
					OLD.[summary_format]
				) Or
			
				(
					NEW.[summary_format] Is Null And
					OLD.[summary_format] Is Not Null
				) Or
				(
					NEW.[summary_format] Is Not Null And
					OLD.[summary_format] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([list_format])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'list_format',
			CONVERT(nvarchar(4000), OLD.[list_format], 0),
			CONVERT(nvarchar(4000), NEW.[list_format], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[list_format] <>
					OLD.[list_format]
				) Or
			
				(
					NEW.[list_format] Is Null And
					OLD.[list_format] Is Not Null
				) Or
				(
					NEW.[list_format] Is Not Null And
					OLD.[list_format] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([tabs])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'tabs',
			CONVERT(nvarchar(4000), OLD.[tabs], 0),
			CONVERT(nvarchar(4000), NEW.[tabs], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[tabs] <>
					OLD.[tabs]
				) Or
			
				(
					NEW.[tabs] Is Null And
					OLD.[tabs] Is Not Null
				) Or
				(
					NEW.[tabs] Is Not Null And
					OLD.[tabs] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_core_display_format]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_core_field_access]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_field_access]
ON [dbo].[core_field_access]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_field_access]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_field_access]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_field_access',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'access',
		CONVERT(nvarchar(4000), OLD.[access], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[access] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'field_name',
		CONVERT(nvarchar(4000), OLD.[field_name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[field_name] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_core_field_access]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_core_field_access]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_field_access]
ON [dbo].[core_field_access]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_field_access]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_field_access]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_field_access',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'access',
		CONVERT(nvarchar(4000), NEW.[access], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[access] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'field_name',
		CONVERT(nvarchar(4000), NEW.[field_name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[field_name] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_core_field_access]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_core_field_access]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_field_access]
ON [dbo].[core_field_access]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_field_access]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_field_access]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_field_access',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([access])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'access',
			CONVERT(nvarchar(4000), OLD.[access], 0),
			CONVERT(nvarchar(4000), NEW.[access], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[access] <>
					OLD.[access]
				) Or
			
				(
					NEW.[access] Is Null And
					OLD.[access] Is Not Null
				) Or
				(
					NEW.[access] Is Not Null And
					OLD.[access] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([field_name])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'field_name',
			CONVERT(nvarchar(4000), OLD.[field_name], 0),
			CONVERT(nvarchar(4000), NEW.[field_name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[field_name] <>
					OLD.[field_name]
				) Or
			
				(
					NEW.[field_name] Is Null And
					OLD.[field_name] Is Not Null
				) Or
				(
					NEW.[field_name] Is Not Null And
					OLD.[field_name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_core_field_access]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_core_field_access_roles]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_field_access_roles]
ON [dbo].[core_field_access_roles]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_field_access_roles]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_field_access_roles]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_field_access_roles',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[field_access]=N'''+replace(CONVERT(nvarchar(4000), OLD.[field_access], 0), '''', '''''')+'''', '[field_access] Is Null') + ' AND ' + IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), OLD.[role], 0), '''', '''''')+'''', '[role] Is Null')),
		'field_access',
		CONVERT(nvarchar(4000), OLD.[field_access], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[field_access], 0)),  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[role], 0))
	FROM deleted OLD
	WHERE
		OLD.[field_access] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[field_access]=N'''+replace(CONVERT(nvarchar(4000), OLD.[field_access], 0), '''', '''''')+'''', '[field_access] Is Null') + ' AND ' + IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), OLD.[role], 0), '''', '''''')+'''', '[role] Is Null')),
		'role',
		CONVERT(nvarchar(4000), OLD.[role], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[field_access], 0)),  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[role], 0))
	FROM deleted OLD
	WHERE
		OLD.[role] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_core_field_access_roles]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_core_field_access_roles]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_field_access_roles]
ON [dbo].[core_field_access_roles]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_field_access_roles]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_field_access_roles]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_field_access_roles',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[field_access]=N'''+replace(CONVERT(nvarchar(4000), NEW.[field_access], 0), '''', '''''')+'''', '[field_access] Is Null') + ' AND ' + IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), NEW.[role], 0), '''', '''''')+'''', '[role] Is Null')),
		'field_access',
		CONVERT(nvarchar(4000), NEW.[field_access], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[field_access], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[role], 0))
	FROM inserted NEW
	WHERE NEW.[field_access] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[field_access]=N'''+replace(CONVERT(nvarchar(4000), NEW.[field_access], 0), '''', '''''')+'''', '[field_access] Is Null') + ' AND ' + IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), NEW.[role], 0), '''', '''''')+'''', '[role] Is Null')),
		'role',
		CONVERT(nvarchar(4000), NEW.[role], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[field_access], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[role], 0))
	FROM inserted NEW
	WHERE NEW.[role] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_core_field_access_roles]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_core_field_access_roles]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_field_access_roles]
ON [dbo].[core_field_access_roles]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_field_access_roles]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_field_access_roles]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_field_access_roles',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([field_access])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1, KEY2
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[field_access]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[field_access], NEW.[field_access]), 0),'''' ,'''''')+'''', '[field_access] Is Null')+' AND '+IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[role], NEW.[role]), 0),'''' ,'''''')+'''', '[role] Is Null')),
		    'field_access',
			CONVERT(nvarchar(4000), OLD.[field_access], 0),
			CONVERT(nvarchar(4000), NEW.[field_access], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[field_access], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[field_access], 0))), IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[role], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[role], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[field_access], 0)=CONVERT(nvarchar(4000), OLD.[field_access], 0) or (NEW.[field_access] Is Null and OLD.[field_access] Is Null)) AND (CONVERT(nvarchar(4000), NEW.[role], 0)=CONVERT(nvarchar(4000), OLD.[role], 0) or (NEW.[role] Is Null and OLD.[role] Is Null))
			WHERE (
			
			
				(
					NEW.[field_access] <>
					OLD.[field_access]
				) Or
			
				(
					NEW.[field_access] Is Null And
					OLD.[field_access] Is Not Null
				) Or
				(
					NEW.[field_access] Is Not Null And
					OLD.[field_access] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([role])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1, KEY2
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[field_access]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[field_access], NEW.[field_access]), 0),'''' ,'''''')+'''', '[field_access] Is Null')+' AND '+IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[role], NEW.[role]), 0),'''' ,'''''')+'''', '[role] Is Null')),
		    'role',
			CONVERT(nvarchar(4000), OLD.[role], 0),
			CONVERT(nvarchar(4000), NEW.[role], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[field_access], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[field_access], 0))), IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[role], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[role], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[field_access], 0)=CONVERT(nvarchar(4000), OLD.[field_access], 0) or (NEW.[field_access] Is Null and OLD.[field_access] Is Null)) AND (CONVERT(nvarchar(4000), NEW.[role], 0)=CONVERT(nvarchar(4000), OLD.[role], 0) or (NEW.[role] Is Null and OLD.[role] Is Null))
			WHERE (
			
			
				(
					NEW.[role] <>
					OLD.[role]
				) Or
			
				(
					NEW.[role] Is Null And
					OLD.[role] Is Not Null
				) Or
				(
					NEW.[role] Is Not Null And
					OLD.[role] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_core_field_access_roles]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_core_field_view_map]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_field_view_map]
ON [dbo].[core_field_view_map]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_field_view_map]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_field_view_map]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_field_view_map',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'display_name',
		CONVERT(nvarchar(4000), OLD.[display_name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[display_name] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'field_name',
		CONVERT(nvarchar(4000), OLD.[field_name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[field_name] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'is_hidden',
		CONVERT(nvarchar(4000), OLD.[is_hidden], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[is_hidden] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'view_class',
		CONVERT(nvarchar(4000), OLD.[view_class], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[view_class] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'row',
		CONVERT(nvarchar(4000), OLD.[row], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[row] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'col',
		CONVERT(nvarchar(4000), OLD.[col], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[col] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'col_span',
		CONVERT(nvarchar(4000), OLD.[col_span], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[col_span] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'row_span',
		CONVERT(nvarchar(4000), OLD.[row_span], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[row_span] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'max_length',
		CONVERT(nvarchar(4000), OLD.[max_length], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[max_length] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'min_length',
		CONVERT(nvarchar(4000), OLD.[min_length], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[min_length] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'show_display_name',
		CONVERT(nvarchar(4000), OLD.[show_display_name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[show_display_name] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'prefix_label',
		CONVERT(nvarchar(4000), OLD.[prefix_label], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[prefix_label] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'tab',
		CONVERT(nvarchar(4000), OLD.[tab], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[tab] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_core_field_view_map]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_core_field_view_map]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_field_view_map]
ON [dbo].[core_field_view_map]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_field_view_map]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_field_view_map]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_field_view_map',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'display_name',
		CONVERT(nvarchar(4000), NEW.[display_name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[display_name] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'field_name',
		CONVERT(nvarchar(4000), NEW.[field_name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[field_name] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'is_hidden',
		CONVERT(nvarchar(4000), NEW.[is_hidden], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[is_hidden] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'view_class',
		CONVERT(nvarchar(4000), NEW.[view_class], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[view_class] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'row',
		CONVERT(nvarchar(4000), NEW.[row], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[row] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'col',
		CONVERT(nvarchar(4000), NEW.[col], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[col] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'col_span',
		CONVERT(nvarchar(4000), NEW.[col_span], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[col_span] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'row_span',
		CONVERT(nvarchar(4000), NEW.[row_span], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[row_span] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'max_length',
		CONVERT(nvarchar(4000), NEW.[max_length], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[max_length] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'min_length',
		CONVERT(nvarchar(4000), NEW.[min_length], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[min_length] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'show_display_name',
		CONVERT(nvarchar(4000), NEW.[show_display_name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[show_display_name] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'prefix_label',
		CONVERT(nvarchar(4000), NEW.[prefix_label], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[prefix_label] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'tab',
		CONVERT(nvarchar(4000), NEW.[tab], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[tab] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_core_field_view_map]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_core_field_view_map]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_field_view_map]
ON [dbo].[core_field_view_map]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_field_view_map]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_field_view_map]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_field_view_map',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([display_name])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'display_name',
			CONVERT(nvarchar(4000), OLD.[display_name], 0),
			CONVERT(nvarchar(4000), NEW.[display_name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[display_name] <>
					OLD.[display_name]
				) Or
			
				(
					NEW.[display_name] Is Null And
					OLD.[display_name] Is Not Null
				) Or
				(
					NEW.[display_name] Is Not Null And
					OLD.[display_name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([field_name])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'field_name',
			CONVERT(nvarchar(4000), OLD.[field_name], 0),
			CONVERT(nvarchar(4000), NEW.[field_name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[field_name] <>
					OLD.[field_name]
				) Or
			
				(
					NEW.[field_name] Is Null And
					OLD.[field_name] Is Not Null
				) Or
				(
					NEW.[field_name] Is Not Null And
					OLD.[field_name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([is_hidden])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'is_hidden',
			CONVERT(nvarchar(4000), OLD.[is_hidden], 0),
			CONVERT(nvarchar(4000), NEW.[is_hidden], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[is_hidden] <>
					OLD.[is_hidden]
				) Or
			
				(
					NEW.[is_hidden] Is Null And
					OLD.[is_hidden] Is Not Null
				) Or
				(
					NEW.[is_hidden] Is Not Null And
					OLD.[is_hidden] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([view_class])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'view_class',
			CONVERT(nvarchar(4000), OLD.[view_class], 0),
			CONVERT(nvarchar(4000), NEW.[view_class], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[view_class] <>
					OLD.[view_class]
				) Or
			
				(
					NEW.[view_class] Is Null And
					OLD.[view_class] Is Not Null
				) Or
				(
					NEW.[view_class] Is Not Null And
					OLD.[view_class] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([row])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'row',
			CONVERT(nvarchar(4000), OLD.[row], 0),
			CONVERT(nvarchar(4000), NEW.[row], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[row] <>
					OLD.[row]
				) Or
			
				(
					NEW.[row] Is Null And
					OLD.[row] Is Not Null
				) Or
				(
					NEW.[row] Is Not Null And
					OLD.[row] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([col])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'col',
			CONVERT(nvarchar(4000), OLD.[col], 0),
			CONVERT(nvarchar(4000), NEW.[col], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[col] <>
					OLD.[col]
				) Or
			
				(
					NEW.[col] Is Null And
					OLD.[col] Is Not Null
				) Or
				(
					NEW.[col] Is Not Null And
					OLD.[col] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([col_span])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'col_span',
			CONVERT(nvarchar(4000), OLD.[col_span], 0),
			CONVERT(nvarchar(4000), NEW.[col_span], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[col_span] <>
					OLD.[col_span]
				) Or
			
				(
					NEW.[col_span] Is Null And
					OLD.[col_span] Is Not Null
				) Or
				(
					NEW.[col_span] Is Not Null And
					OLD.[col_span] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([row_span])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'row_span',
			CONVERT(nvarchar(4000), OLD.[row_span], 0),
			CONVERT(nvarchar(4000), NEW.[row_span], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[row_span] <>
					OLD.[row_span]
				) Or
			
				(
					NEW.[row_span] Is Null And
					OLD.[row_span] Is Not Null
				) Or
				(
					NEW.[row_span] Is Not Null And
					OLD.[row_span] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([max_length])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'max_length',
			CONVERT(nvarchar(4000), OLD.[max_length], 0),
			CONVERT(nvarchar(4000), NEW.[max_length], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[max_length] <>
					OLD.[max_length]
				) Or
			
				(
					NEW.[max_length] Is Null And
					OLD.[max_length] Is Not Null
				) Or
				(
					NEW.[max_length] Is Not Null And
					OLD.[max_length] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([min_length])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'min_length',
			CONVERT(nvarchar(4000), OLD.[min_length], 0),
			CONVERT(nvarchar(4000), NEW.[min_length], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[min_length] <>
					OLD.[min_length]
				) Or
			
				(
					NEW.[min_length] Is Null And
					OLD.[min_length] Is Not Null
				) Or
				(
					NEW.[min_length] Is Not Null And
					OLD.[min_length] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([show_display_name])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'show_display_name',
			CONVERT(nvarchar(4000), OLD.[show_display_name], 0),
			CONVERT(nvarchar(4000), NEW.[show_display_name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[show_display_name] <>
					OLD.[show_display_name]
				) Or
			
				(
					NEW.[show_display_name] Is Null And
					OLD.[show_display_name] Is Not Null
				) Or
				(
					NEW.[show_display_name] Is Not Null And
					OLD.[show_display_name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([prefix_label])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'prefix_label',
			CONVERT(nvarchar(4000), OLD.[prefix_label], 0),
			CONVERT(nvarchar(4000), NEW.[prefix_label], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[prefix_label] <>
					OLD.[prefix_label]
				) Or
			
				(
					NEW.[prefix_label] Is Null And
					OLD.[prefix_label] Is Not Null
				) Or
				(
					NEW.[prefix_label] Is Not Null And
					OLD.[prefix_label] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([tab])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'tab',
			CONVERT(nvarchar(4000), OLD.[tab], 0),
			CONVERT(nvarchar(4000), NEW.[tab], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[tab] <>
					OLD.[tab]
				) Or
			
				(
					NEW.[tab] Is Null And
					OLD.[tab] Is Not Null
				) Or
				(
					NEW.[tab] Is Not Null And
					OLD.[tab] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_core_field_view_map]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_core_function]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_function]
ON [dbo].[core_function]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_function]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_function]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_function',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), OLD.[name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[name] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), OLD.[description], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[description] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_core_function]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_core_function]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_function]
ON [dbo].[core_function]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_function]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_function]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_function',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), NEW.[name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[name] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), NEW.[description], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[description] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_core_function]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_core_function]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_function]
ON [dbo].[core_function]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_function]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_function]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_function',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([name])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'name',
			CONVERT(nvarchar(4000), OLD.[name], 0),
			CONVERT(nvarchar(4000), NEW.[name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[name] <>
					OLD.[name]
				) Or
			
				(
					NEW.[name] Is Null And
					OLD.[name] Is Not Null
				) Or
				(
					NEW.[name] Is Not Null And
					OLD.[name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([description])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'description',
			CONVERT(nvarchar(4000), OLD.[description], 0),
			CONVERT(nvarchar(4000), NEW.[description], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[description] <>
					OLD.[description]
				) Or
			
				(
					NEW.[description] Is Null And
					OLD.[description] Is Not Null
				) Or
				(
					NEW.[description] Is Not Null And
					OLD.[description] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_core_function]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_core_incrementing_id]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_incrementing_id]
ON [dbo].[core_incrementing_id]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_incrementing_id]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_incrementing_id]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_incrementing_id',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), OLD.[applies_to], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[applies_to] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'current',
		CONVERT(nvarchar(4000), OLD.[current], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[current] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_core_incrementing_id]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_core_incrementing_id]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_incrementing_id]
ON [dbo].[core_incrementing_id]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_incrementing_id]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_incrementing_id]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_incrementing_id',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), NEW.[applies_to], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[applies_to] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'current',
		CONVERT(nvarchar(4000), NEW.[current], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[current] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_core_incrementing_id]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_core_incrementing_id]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_incrementing_id]
ON [dbo].[core_incrementing_id]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_incrementing_id]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_incrementing_id]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_incrementing_id',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([applies_to])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'applies_to',
			CONVERT(nvarchar(4000), OLD.[applies_to], 0),
			CONVERT(nvarchar(4000), NEW.[applies_to], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[applies_to] <>
					OLD.[applies_to]
				) Or
			
				(
					NEW.[applies_to] Is Null And
					OLD.[applies_to] Is Not Null
				) Or
				(
					NEW.[applies_to] Is Not Null And
					OLD.[applies_to] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([current])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'current',
			CONVERT(nvarchar(4000), OLD.[current], 0),
			CONVERT(nvarchar(4000), NEW.[current], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[current] <>
					OLD.[current]
				) Or
			
				(
					NEW.[current] Is Null And
					OLD.[current] Is Not Null
				) Or
				(
					NEW.[current] Is Not Null And
					OLD.[current] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_core_incrementing_id]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_core_incrementing_property_config]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_incrementing_property_config]
ON [dbo].[core_incrementing_property_config]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_incrementing_property_config]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_incrementing_property_config]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_incrementing_property_config',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), OLD.[applies_to], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[applies_to] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'property',
		CONVERT(nvarchar(4000), OLD.[property], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[property] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'format',
		CONVERT(nvarchar(4000), OLD.[format], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[format] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'id_length',
		CONVERT(nvarchar(4000), OLD.[id_length], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[id_length] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_core_incrementing_property_config]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_core_incrementing_property_config]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_incrementing_property_config]
ON [dbo].[core_incrementing_property_config]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_incrementing_property_config]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_incrementing_property_config]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_incrementing_property_config',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), NEW.[applies_to], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[applies_to] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'property',
		CONVERT(nvarchar(4000), NEW.[property], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[property] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'format',
		CONVERT(nvarchar(4000), NEW.[format], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[format] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'id_length',
		CONVERT(nvarchar(4000), NEW.[id_length], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[id_length] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_core_incrementing_property_config]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_core_incrementing_property_config]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_incrementing_property_config]
ON [dbo].[core_incrementing_property_config]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_incrementing_property_config]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:52
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_incrementing_property_config]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_incrementing_property_config',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([applies_to])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'applies_to',
			CONVERT(nvarchar(4000), OLD.[applies_to], 0),
			CONVERT(nvarchar(4000), NEW.[applies_to], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[applies_to] <>
					OLD.[applies_to]
				) Or
			
				(
					NEW.[applies_to] Is Null And
					OLD.[applies_to] Is Not Null
				) Or
				(
					NEW.[applies_to] Is Not Null And
					OLD.[applies_to] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([property])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'property',
			CONVERT(nvarchar(4000), OLD.[property], 0),
			CONVERT(nvarchar(4000), NEW.[property], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[property] <>
					OLD.[property]
				) Or
			
				(
					NEW.[property] Is Null And
					OLD.[property] Is Not Null
				) Or
				(
					NEW.[property] Is Not Null And
					OLD.[property] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([format])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'format',
			CONVERT(nvarchar(4000), OLD.[format], 0),
			CONVERT(nvarchar(4000), NEW.[format], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[format] <>
					OLD.[format]
				) Or
			
				(
					NEW.[format] Is Null And
					OLD.[format] Is Not Null
				) Or
				(
					NEW.[format] Is Not Null And
					OLD.[format] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([id_length])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'id_length',
			CONVERT(nvarchar(4000), OLD.[id_length], 0),
			CONVERT(nvarchar(4000), NEW.[id_length], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[id_length] <>
					OLD.[id_length]
				) Or
			
				(
					NEW.[id_length] Is Null And
					OLD.[id_length] Is Not Null
				) Or
				(
					NEW.[id_length] Is Not Null And
					OLD.[id_length] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_core_incrementing_property_config]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_core_incrementing_property_id]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_incrementing_property_id]
ON [dbo].[core_incrementing_property_id]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_incrementing_property_id]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_incrementing_property_id]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_incrementing_property_id',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), OLD.[applies_to], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[applies_to] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'current',
		CONVERT(nvarchar(4000), OLD.[current], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[current] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'property_config',
		CONVERT(nvarchar(4000), OLD.[property_config], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[property_config] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_core_incrementing_property_id]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_core_incrementing_property_id]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_incrementing_property_id]
ON [dbo].[core_incrementing_property_id]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_incrementing_property_id]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_incrementing_property_id]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_incrementing_property_id',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), NEW.[applies_to], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[applies_to] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'current',
		CONVERT(nvarchar(4000), NEW.[current], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[current] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'property_config',
		CONVERT(nvarchar(4000), NEW.[property_config], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[property_config] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_core_incrementing_property_id]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_core_incrementing_property_id]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_incrementing_property_id]
ON [dbo].[core_incrementing_property_id]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_incrementing_property_id]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_incrementing_property_id]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_incrementing_property_id',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([applies_to])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'applies_to',
			CONVERT(nvarchar(4000), OLD.[applies_to], 0),
			CONVERT(nvarchar(4000), NEW.[applies_to], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[applies_to] <>
					OLD.[applies_to]
				) Or
			
				(
					NEW.[applies_to] Is Null And
					OLD.[applies_to] Is Not Null
				) Or
				(
					NEW.[applies_to] Is Not Null And
					OLD.[applies_to] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([current])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'current',
			CONVERT(nvarchar(4000), OLD.[current], 0),
			CONVERT(nvarchar(4000), NEW.[current], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[current] <>
					OLD.[current]
				) Or
			
				(
					NEW.[current] Is Null And
					OLD.[current] Is Not Null
				) Or
				(
					NEW.[current] Is Not Null And
					OLD.[current] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([property_config])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'property_config',
			CONVERT(nvarchar(4000), OLD.[property_config], 0),
			CONVERT(nvarchar(4000), NEW.[property_config], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[property_config] <>
					OLD.[property_config]
				) Or
			
				(
					NEW.[property_config] Is Null And
					OLD.[property_config] Is Not Null
				) Or
				(
					NEW.[property_config] Is Not Null And
					OLD.[property_config] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_core_incrementing_property_id]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_core_incrementing_property_yearly_id]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_incrementing_property_yearly_id]
ON [dbo].[core_incrementing_property_yearly_id]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_incrementing_property_yearly_id]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_incrementing_property_yearly_id]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_incrementing_property_yearly_id',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'year',
		CONVERT(nvarchar(4000), OLD.[year], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[year] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'short_year',
		CONVERT(nvarchar(4000), OLD.[short_year], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[short_year] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), OLD.[applies_to], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[applies_to] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'current',
		CONVERT(nvarchar(4000), OLD.[current], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[current] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'property_config',
		CONVERT(nvarchar(4000), OLD.[property_config], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[property_config] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_core_incrementing_property_yearly_id]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_core_incrementing_property_yearly_id]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_incrementing_property_yearly_id]
ON [dbo].[core_incrementing_property_yearly_id]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_incrementing_property_yearly_id]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_incrementing_property_yearly_id]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_incrementing_property_yearly_id',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'year',
		CONVERT(nvarchar(4000), NEW.[year], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[year] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'short_year',
		CONVERT(nvarchar(4000), NEW.[short_year], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[short_year] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), NEW.[applies_to], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[applies_to] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'current',
		CONVERT(nvarchar(4000), NEW.[current], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[current] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'property_config',
		CONVERT(nvarchar(4000), NEW.[property_config], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[property_config] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_core_incrementing_property_yearly_id]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_core_incrementing_property_yearly_id]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_incrementing_property_yearly_id]
ON [dbo].[core_incrementing_property_yearly_id]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_incrementing_property_yearly_id]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_incrementing_property_yearly_id]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_incrementing_property_yearly_id',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([year])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'year',
			CONVERT(nvarchar(4000), OLD.[year], 0),
			CONVERT(nvarchar(4000), NEW.[year], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[year] <>
					OLD.[year]
				) Or
			
				(
					NEW.[year] Is Null And
					OLD.[year] Is Not Null
				) Or
				(
					NEW.[year] Is Not Null And
					OLD.[year] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([short_year])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'short_year',
			CONVERT(nvarchar(4000), OLD.[short_year], 0),
			CONVERT(nvarchar(4000), NEW.[short_year], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[short_year] <>
					OLD.[short_year]
				) Or
			
				(
					NEW.[short_year] Is Null And
					OLD.[short_year] Is Not Null
				) Or
				(
					NEW.[short_year] Is Not Null And
					OLD.[short_year] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([applies_to])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'applies_to',
			CONVERT(nvarchar(4000), OLD.[applies_to], 0),
			CONVERT(nvarchar(4000), NEW.[applies_to], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[applies_to] <>
					OLD.[applies_to]
				) Or
			
				(
					NEW.[applies_to] Is Null And
					OLD.[applies_to] Is Not Null
				) Or
				(
					NEW.[applies_to] Is Not Null And
					OLD.[applies_to] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([current])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'current',
			CONVERT(nvarchar(4000), OLD.[current], 0),
			CONVERT(nvarchar(4000), NEW.[current], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[current] <>
					OLD.[current]
				) Or
			
				(
					NEW.[current] Is Null And
					OLD.[current] Is Not Null
				) Or
				(
					NEW.[current] Is Not Null And
					OLD.[current] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([property_config])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'property_config',
			CONVERT(nvarchar(4000), OLD.[property_config], 0),
			CONVERT(nvarchar(4000), NEW.[property_config], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[property_config] <>
					OLD.[property_config]
				) Or
			
				(
					NEW.[property_config] Is Null And
					OLD.[property_config] Is Not Null
				) Or
				(
					NEW.[property_config] Is Not Null And
					OLD.[property_config] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_core_incrementing_property_yearly_id]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_core_incrementing_yearly_id]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_incrementing_yearly_id]
ON [dbo].[core_incrementing_yearly_id]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_incrementing_yearly_id]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_incrementing_yearly_id]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_incrementing_yearly_id',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'year',
		CONVERT(nvarchar(4000), OLD.[year], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[year] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'short_year',
		CONVERT(nvarchar(4000), OLD.[short_year], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[short_year] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), OLD.[applies_to], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[applies_to] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'current',
		CONVERT(nvarchar(4000), OLD.[current], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[current] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_core_incrementing_yearly_id]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_core_incrementing_yearly_id]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_incrementing_yearly_id]
ON [dbo].[core_incrementing_yearly_id]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_incrementing_yearly_id]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_incrementing_yearly_id]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_incrementing_yearly_id',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'year',
		CONVERT(nvarchar(4000), NEW.[year], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[year] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'short_year',
		CONVERT(nvarchar(4000), NEW.[short_year], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[short_year] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), NEW.[applies_to], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[applies_to] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'current',
		CONVERT(nvarchar(4000), NEW.[current], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[current] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_core_incrementing_yearly_id]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_core_incrementing_yearly_id]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_incrementing_yearly_id]
ON [dbo].[core_incrementing_yearly_id]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_incrementing_yearly_id]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_incrementing_yearly_id]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_incrementing_yearly_id',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([year])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'year',
			CONVERT(nvarchar(4000), OLD.[year], 0),
			CONVERT(nvarchar(4000), NEW.[year], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[year] <>
					OLD.[year]
				) Or
			
				(
					NEW.[year] Is Null And
					OLD.[year] Is Not Null
				) Or
				(
					NEW.[year] Is Not Null And
					OLD.[year] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([short_year])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'short_year',
			CONVERT(nvarchar(4000), OLD.[short_year], 0),
			CONVERT(nvarchar(4000), NEW.[short_year], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[short_year] <>
					OLD.[short_year]
				) Or
			
				(
					NEW.[short_year] Is Null And
					OLD.[short_year] Is Not Null
				) Or
				(
					NEW.[short_year] Is Not Null And
					OLD.[short_year] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([applies_to])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'applies_to',
			CONVERT(nvarchar(4000), OLD.[applies_to], 0),
			CONVERT(nvarchar(4000), NEW.[applies_to], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[applies_to] <>
					OLD.[applies_to]
				) Or
			
				(
					NEW.[applies_to] Is Null And
					OLD.[applies_to] Is Not Null
				) Or
				(
					NEW.[applies_to] Is Not Null And
					OLD.[applies_to] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([current])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'current',
			CONVERT(nvarchar(4000), OLD.[current], 0),
			CONVERT(nvarchar(4000), NEW.[current], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[current] <>
					OLD.[current]
				) Or
			
				(
					NEW.[current] Is Null And
					OLD.[current] Is Not Null
				) Or
				(
					NEW.[current] Is Not Null And
					OLD.[current] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_core_incrementing_yearly_id]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_core_log_entry]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_log_entry]
ON [dbo].[core_log_entry]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_log_entry]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_log_entry]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_log_entry',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'level',
		CONVERT(nvarchar(4000), OLD.[level], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[level] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'sub_system',
		CONVERT(nvarchar(4000), OLD.[sub_system], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[sub_system] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), OLD.[description], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[description] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'details',
		CONVERT(nvarchar(4000), OLD.[details], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[details] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'dismissed',
		CONVERT(nvarchar(4000), OLD.[dismissed], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[dismissed] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'date',
		CONVERT(nvarchar(4000), OLD.[date], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[date] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_core_log_entry]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_core_log_entry]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_log_entry]
ON [dbo].[core_log_entry]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_log_entry]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_log_entry]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_log_entry',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'level',
		CONVERT(nvarchar(4000), NEW.[level], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[level] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'sub_system',
		CONVERT(nvarchar(4000), NEW.[sub_system], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[sub_system] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), NEW.[description], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[description] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'details',
		CONVERT(nvarchar(4000), NEW.[details], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[details] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'dismissed',
		CONVERT(nvarchar(4000), NEW.[dismissed], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[dismissed] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'date',
		CONVERT(nvarchar(4000), NEW.[date], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[date] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_core_log_entry]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_core_log_entry]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_log_entry]
ON [dbo].[core_log_entry]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_log_entry]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_log_entry]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_log_entry',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([level])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'level',
			CONVERT(nvarchar(4000), OLD.[level], 0),
			CONVERT(nvarchar(4000), NEW.[level], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[level] <>
					OLD.[level]
				) Or
			
				(
					NEW.[level] Is Null And
					OLD.[level] Is Not Null
				) Or
				(
					NEW.[level] Is Not Null And
					OLD.[level] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([sub_system])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'sub_system',
			CONVERT(nvarchar(4000), OLD.[sub_system], 0),
			CONVERT(nvarchar(4000), NEW.[sub_system], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[sub_system] <>
					OLD.[sub_system]
				) Or
			
				(
					NEW.[sub_system] Is Null And
					OLD.[sub_system] Is Not Null
				) Or
				(
					NEW.[sub_system] Is Not Null And
					OLD.[sub_system] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([description])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'description',
			CONVERT(nvarchar(4000), OLD.[description], 0),
			CONVERT(nvarchar(4000), NEW.[description], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[description] <>
					OLD.[description]
				) Or
			
				(
					NEW.[description] Is Null And
					OLD.[description] Is Not Null
				) Or
				(
					NEW.[description] Is Not Null And
					OLD.[description] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([details])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'details',
			CONVERT(nvarchar(4000), OLD.[details], 0),
			CONVERT(nvarchar(4000), NEW.[details], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[details] <>
					OLD.[details]
				) Or
			
				(
					NEW.[details] Is Null And
					OLD.[details] Is Not Null
				) Or
				(
					NEW.[details] Is Not Null And
					OLD.[details] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([dismissed])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'dismissed',
			CONVERT(nvarchar(4000), OLD.[dismissed], 0),
			CONVERT(nvarchar(4000), NEW.[dismissed], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[dismissed] <>
					OLD.[dismissed]
				) Or
			
				(
					NEW.[dismissed] Is Null And
					OLD.[dismissed] Is Not Null
				) Or
				(
					NEW.[dismissed] Is Not Null And
					OLD.[dismissed] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([date])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'date',
			CONVERT(nvarchar(4000), OLD.[date], 121),
			CONVERT(nvarchar(4000), NEW.[date], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[date] <>
					OLD.[date]
				) Or
			
				(
					NEW.[date] Is Null And
					OLD.[date] Is Not Null
				) Or
				(
					NEW.[date] Is Not Null And
					OLD.[date] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_core_log_entry]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_core_log_entry_viewed_by]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_log_entry_viewed_by]
ON [dbo].[core_log_entry_viewed_by]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_log_entry_viewed_by]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_log_entry_viewed_by]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_log_entry_viewed_by',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[log_entry]=N'''+replace(CONVERT(nvarchar(4000), OLD.[log_entry], 0), '''', '''''')+'''', '[log_entry] Is Null') + ' AND ' + IsNull('[user]=N'''+replace(CONVERT(nvarchar(4000), OLD.[user], 0), '''', '''''')+'''', '[user] Is Null')),
		'log_entry',
		CONVERT(nvarchar(4000), OLD.[log_entry], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[log_entry], 0)),  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[user], 0))
	FROM deleted OLD
	WHERE
		OLD.[log_entry] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[log_entry]=N'''+replace(CONVERT(nvarchar(4000), OLD.[log_entry], 0), '''', '''''')+'''', '[log_entry] Is Null') + ' AND ' + IsNull('[user]=N'''+replace(CONVERT(nvarchar(4000), OLD.[user], 0), '''', '''''')+'''', '[user] Is Null')),
		'user',
		CONVERT(nvarchar(4000), OLD.[user], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[log_entry], 0)),  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[user], 0))
	FROM deleted OLD
	WHERE
		OLD.[user] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_core_log_entry_viewed_by]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_core_log_entry_viewed_by]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_log_entry_viewed_by]
ON [dbo].[core_log_entry_viewed_by]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_log_entry_viewed_by]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_log_entry_viewed_by]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_log_entry_viewed_by',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[log_entry]=N'''+replace(CONVERT(nvarchar(4000), NEW.[log_entry], 0), '''', '''''')+'''', '[log_entry] Is Null') + ' AND ' + IsNull('[user]=N'''+replace(CONVERT(nvarchar(4000), NEW.[user], 0), '''', '''''')+'''', '[user] Is Null')),
		'log_entry',
		CONVERT(nvarchar(4000), NEW.[log_entry], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[log_entry], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[user], 0))
	FROM inserted NEW
	WHERE NEW.[log_entry] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[log_entry]=N'''+replace(CONVERT(nvarchar(4000), NEW.[log_entry], 0), '''', '''''')+'''', '[log_entry] Is Null') + ' AND ' + IsNull('[user]=N'''+replace(CONVERT(nvarchar(4000), NEW.[user], 0), '''', '''''')+'''', '[user] Is Null')),
		'user',
		CONVERT(nvarchar(4000), NEW.[user], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[log_entry], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[user], 0))
	FROM inserted NEW
	WHERE NEW.[user] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_core_log_entry_viewed_by]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_core_log_entry_viewed_by]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_log_entry_viewed_by]
ON [dbo].[core_log_entry_viewed_by]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_log_entry_viewed_by]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_log_entry_viewed_by]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_log_entry_viewed_by',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([log_entry])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1, KEY2
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[log_entry]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[log_entry], NEW.[log_entry]), 0),'''' ,'''''')+'''', '[log_entry] Is Null')+' AND '+IsNull('[user]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[user], NEW.[user]), 0),'''' ,'''''')+'''', '[user] Is Null')),
		    'log_entry',
			CONVERT(nvarchar(4000), OLD.[log_entry], 0),
			CONVERT(nvarchar(4000), NEW.[log_entry], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[log_entry], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[log_entry], 0))), IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[user], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[user], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[log_entry], 0)=CONVERT(nvarchar(4000), OLD.[log_entry], 0) or (NEW.[log_entry] Is Null and OLD.[log_entry] Is Null)) AND (CONVERT(nvarchar(4000), NEW.[user], 0)=CONVERT(nvarchar(4000), OLD.[user], 0) or (NEW.[user] Is Null and OLD.[user] Is Null))
			WHERE (
			
			
				(
					NEW.[log_entry] <>
					OLD.[log_entry]
				) Or
			
				(
					NEW.[log_entry] Is Null And
					OLD.[log_entry] Is Not Null
				) Or
				(
					NEW.[log_entry] Is Not Null And
					OLD.[log_entry] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([user])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1, KEY2
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[log_entry]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[log_entry], NEW.[log_entry]), 0),'''' ,'''''')+'''', '[log_entry] Is Null')+' AND '+IsNull('[user]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[user], NEW.[user]), 0),'''' ,'''''')+'''', '[user] Is Null')),
		    'user',
			CONVERT(nvarchar(4000), OLD.[user], 0),
			CONVERT(nvarchar(4000), NEW.[user], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[log_entry], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[log_entry], 0))), IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[user], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[user], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[log_entry], 0)=CONVERT(nvarchar(4000), OLD.[log_entry], 0) or (NEW.[log_entry] Is Null and OLD.[log_entry] Is Null)) AND (CONVERT(nvarchar(4000), NEW.[user], 0)=CONVERT(nvarchar(4000), OLD.[user], 0) or (NEW.[user] Is Null and OLD.[user] Is Null))
			WHERE (
			
			
				(
					NEW.[user] <>
					OLD.[user]
				) Or
			
				(
					NEW.[user] Is Null And
					OLD.[user] Is Not Null
				) Or
				(
					NEW.[user] Is Not Null And
					OLD.[user] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_core_log_entry_viewed_by]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_core_profile]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_profile]
ON [dbo].[core_profile]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_profile]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_profile]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_profile',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'option',
		CONVERT(nvarchar(4000), OLD.[option], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[option] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'application',
		CONVERT(nvarchar(4000), OLD.[application], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[application] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'user',
		CONVERT(nvarchar(4000), OLD.[user], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[user] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_core_profile]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_core_profile]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_profile]
ON [dbo].[core_profile]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_profile]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_profile]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_profile',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'option',
		CONVERT(nvarchar(4000), NEW.[option], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[option] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'application',
		CONVERT(nvarchar(4000), NEW.[application], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[application] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'user',
		CONVERT(nvarchar(4000), NEW.[user], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[user] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_core_profile]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_core_profile]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_profile]
ON [dbo].[core_profile]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_profile]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_profile]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_profile',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([option])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'option',
			CONVERT(nvarchar(4000), OLD.[option], 0),
			CONVERT(nvarchar(4000), NEW.[option], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[option] <>
					OLD.[option]
				) Or
			
				(
					NEW.[option] Is Null And
					OLD.[option] Is Not Null
				) Or
				(
					NEW.[option] Is Not Null And
					OLD.[option] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([application])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'application',
			CONVERT(nvarchar(4000), OLD.[application], 0),
			CONVERT(nvarchar(4000), NEW.[application], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[application] <>
					OLD.[application]
				) Or
			
				(
					NEW.[application] Is Null And
					OLD.[application] Is Not Null
				) Or
				(
					NEW.[application] Is Not Null And
					OLD.[application] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([user])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'user',
			CONVERT(nvarchar(4000), OLD.[user], 0),
			CONVERT(nvarchar(4000), NEW.[user], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[user] <>
					OLD.[user]
				) Or
			
				(
					NEW.[user] Is Null And
					OLD.[user] Is Not Null
				) Or
				(
					NEW.[user] Is Not Null And
					OLD.[user] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_core_profile]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_core_profile_items]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_profile_items]
ON [dbo].[core_profile_items]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_profile_items]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_profile_items]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_profile_items',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[profile]=N'''+replace(CONVERT(nvarchar(4000), OLD.[profile], 0), '''', '''''')+'''', '[profile] Is Null') + ' AND ' + IsNull('[key]=N'''+replace(CONVERT(nvarchar(4000), OLD.[key], 0), '''', '''''')+'''', '[key] Is Null')),
		'profile',
		CONVERT(nvarchar(4000), OLD.[profile], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[profile], 0)),  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[key], 0))
	FROM deleted OLD
	WHERE
		OLD.[profile] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[profile]=N'''+replace(CONVERT(nvarchar(4000), OLD.[profile], 0), '''', '''''')+'''', '[profile] Is Null') + ' AND ' + IsNull('[key]=N'''+replace(CONVERT(nvarchar(4000), OLD.[key], 0), '''', '''''')+'''', '[key] Is Null')),
		'value',
		CONVERT(nvarchar(4000), OLD.[value], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[profile], 0)),  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[key], 0))
	FROM deleted OLD
	WHERE
		OLD.[value] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[profile]=N'''+replace(CONVERT(nvarchar(4000), OLD.[profile], 0), '''', '''''')+'''', '[profile] Is Null') + ' AND ' + IsNull('[key]=N'''+replace(CONVERT(nvarchar(4000), OLD.[key], 0), '''', '''''')+'''', '[key] Is Null')),
		'key',
		CONVERT(nvarchar(4000), OLD.[key], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[profile], 0)),  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[key], 0))
	FROM deleted OLD
	WHERE
		OLD.[key] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_core_profile_items]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_core_profile_items]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_profile_items]
ON [dbo].[core_profile_items]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_profile_items]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_profile_items]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_profile_items',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[profile]=N'''+replace(CONVERT(nvarchar(4000), NEW.[profile], 0), '''', '''''')+'''', '[profile] Is Null') + ' AND ' + IsNull('[key]=N'''+replace(CONVERT(nvarchar(4000), NEW.[key], 0), '''', '''''')+'''', '[key] Is Null')),
		'profile',
		CONVERT(nvarchar(4000), NEW.[profile], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[profile], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[key], 0))
	FROM inserted NEW
	WHERE NEW.[profile] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[profile]=N'''+replace(CONVERT(nvarchar(4000), NEW.[profile], 0), '''', '''''')+'''', '[profile] Is Null') + ' AND ' + IsNull('[key]=N'''+replace(CONVERT(nvarchar(4000), NEW.[key], 0), '''', '''''')+'''', '[key] Is Null')),
		'value',
		CONVERT(nvarchar(4000), NEW.[value], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[profile], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[key], 0))
	FROM inserted NEW
	WHERE NEW.[value] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[profile]=N'''+replace(CONVERT(nvarchar(4000), NEW.[profile], 0), '''', '''''')+'''', '[profile] Is Null') + ' AND ' + IsNull('[key]=N'''+replace(CONVERT(nvarchar(4000), NEW.[key], 0), '''', '''''')+'''', '[key] Is Null')),
		'key',
		CONVERT(nvarchar(4000), NEW.[key], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[profile], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[key], 0))
	FROM inserted NEW
	WHERE NEW.[key] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_core_profile_items]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_core_profile_items]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_profile_items]
ON [dbo].[core_profile_items]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_profile_items]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_profile_items]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_profile_items',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([profile])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1, KEY2
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[profile]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[profile], NEW.[profile]), 0),'''' ,'''''')+'''', '[profile] Is Null')+' AND '+IsNull('[key]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[key], NEW.[key]), 0),'''' ,'''''')+'''', '[key] Is Null')),
		    'profile',
			CONVERT(nvarchar(4000), OLD.[profile], 0),
			CONVERT(nvarchar(4000), NEW.[profile], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[profile], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[profile], 0))), IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[key], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[key], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[profile], 0)=CONVERT(nvarchar(4000), OLD.[profile], 0) or (NEW.[profile] Is Null and OLD.[profile] Is Null)) AND (CONVERT(nvarchar(4000), NEW.[key], 0)=CONVERT(nvarchar(4000), OLD.[key], 0) or (NEW.[key] Is Null and OLD.[key] Is Null))
			WHERE (
			
			
				(
					NEW.[profile] <>
					OLD.[profile]
				) Or
			
				(
					NEW.[profile] Is Null And
					OLD.[profile] Is Not Null
				) Or
				(
					NEW.[profile] Is Not Null And
					OLD.[profile] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([value])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1, KEY2
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[profile]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[profile], NEW.[profile]), 0),'''' ,'''''')+'''', '[profile] Is Null')+' AND '+IsNull('[key]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[key], NEW.[key]), 0),'''' ,'''''')+'''', '[key] Is Null')),
		    'value',
			CONVERT(nvarchar(4000), OLD.[value], 0),
			CONVERT(nvarchar(4000), NEW.[value], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[profile], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[profile], 0))), IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[key], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[key], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[profile], 0)=CONVERT(nvarchar(4000), OLD.[profile], 0) or (NEW.[profile] Is Null and OLD.[profile] Is Null)) AND (CONVERT(nvarchar(4000), NEW.[key], 0)=CONVERT(nvarchar(4000), OLD.[key], 0) or (NEW.[key] Is Null and OLD.[key] Is Null))
			where (
			
			
				(
					NEW.[value] <>
					OLD.[value]
				) Or
			
				(
					NEW.[value] Is Null And
					OLD.[value] Is Not Null
				) Or
				(
					NEW.[value] Is Not Null And
					OLD.[value] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([key])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1, KEY2
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[profile]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[profile], NEW.[profile]), 0),'''' ,'''''')+'''', '[profile] Is Null')+' AND '+IsNull('[key]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[key], NEW.[key]), 0),'''' ,'''''')+'''', '[key] Is Null')),
		    'key',
			CONVERT(nvarchar(4000), OLD.[key], 0),
			CONVERT(nvarchar(4000), NEW.[key], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[profile], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[profile], 0))), IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[key], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[key], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[profile], 0)=CONVERT(nvarchar(4000), OLD.[profile], 0) or (NEW.[profile] Is Null and OLD.[profile] Is Null)) AND (CONVERT(nvarchar(4000), NEW.[key], 0)=CONVERT(nvarchar(4000), OLD.[key], 0) or (NEW.[key] Is Null and OLD.[key] Is Null))
			WHERE (
			
			
				(
					NEW.[key] <>
					OLD.[key]
				) Or
			
				(
					NEW.[key] Is Null And
					OLD.[key] Is Not Null
				) Or
				(
					NEW.[key] Is Not Null And
					OLD.[key] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_core_profile_items]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_core_property_description]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_property_description]
ON [dbo].[core_property_description]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_property_description]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_property_description]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_property_description',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'class_type',
		CONVERT(nvarchar(4000), OLD.[class_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[class_type] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'property',
		CONVERT(nvarchar(4000), OLD.[property], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[property] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), OLD.[description], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[description] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_core_property_description]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_core_property_description]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_property_description]
ON [dbo].[core_property_description]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_property_description]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_property_description]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_property_description',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'class_type',
		CONVERT(nvarchar(4000), NEW.[class_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[class_type] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'property',
		CONVERT(nvarchar(4000), NEW.[property], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[property] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), NEW.[description], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[description] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_core_property_description]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_core_property_description]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_property_description]
ON [dbo].[core_property_description]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_property_description]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_property_description]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_property_description',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([class_type])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'class_type',
			CONVERT(nvarchar(4000), OLD.[class_type], 0),
			CONVERT(nvarchar(4000), NEW.[class_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[class_type] <>
					OLD.[class_type]
				) Or
			
				(
					NEW.[class_type] Is Null And
					OLD.[class_type] Is Not Null
				) Or
				(
					NEW.[class_type] Is Not Null And
					OLD.[class_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([property])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'property',
			CONVERT(nvarchar(4000), OLD.[property], 0),
			CONVERT(nvarchar(4000), NEW.[property], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[property] <>
					OLD.[property]
				) Or
			
				(
					NEW.[property] Is Null And
					OLD.[property] Is Not Null
				) Or
				(
					NEW.[property] Is Not Null And
					OLD.[property] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([description])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'description',
			CONVERT(nvarchar(4000), OLD.[description], 0),
			CONVERT(nvarchar(4000), NEW.[description], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[description] <>
					OLD.[description]
				) Or
			
				(
					NEW.[description] Is Null And
					OLD.[description] Is Not Null
				) Or
				(
					NEW.[description] Is Not Null And
					OLD.[description] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_core_property_description]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_core_role]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_role]
ON [dbo].[core_role]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_role]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_role]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_role',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), OLD.[name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[name] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), OLD.[active], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[active] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), OLD.[description], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[description] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'default_access',
		CONVERT(nvarchar(4000), OLD.[default_access], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[default_access] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_core_role]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_core_role]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_role]
ON [dbo].[core_role]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_role]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_role]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_role',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), NEW.[name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[name] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'active',
		CONVERT(nvarchar(4000), NEW.[active], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[active] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), NEW.[description], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[description] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'default_access',
		CONVERT(nvarchar(4000), NEW.[default_access], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[default_access] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_core_role]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_core_role]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_role]
ON [dbo].[core_role]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_role]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_role]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_role',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([name])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'name',
			CONVERT(nvarchar(4000), OLD.[name], 0),
			CONVERT(nvarchar(4000), NEW.[name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[name] <>
					OLD.[name]
				) Or
			
				(
					NEW.[name] Is Null And
					OLD.[name] Is Not Null
				) Or
				(
					NEW.[name] Is Not Null And
					OLD.[name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([active])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'active',
			CONVERT(nvarchar(4000), OLD.[active], 0),
			CONVERT(nvarchar(4000), NEW.[active], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[active] <>
					OLD.[active]
				) Or
			
				(
					NEW.[active] Is Null And
					OLD.[active] Is Not Null
				) Or
				(
					NEW.[active] Is Not Null And
					OLD.[active] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([description])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'description',
			CONVERT(nvarchar(4000), OLD.[description], 0),
			CONVERT(nvarchar(4000), NEW.[description], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[description] <>
					OLD.[description]
				) Or
			
				(
					NEW.[description] Is Null And
					OLD.[description] Is Not Null
				) Or
				(
					NEW.[description] Is Not Null And
					OLD.[description] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([default_access])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'default_access',
			CONVERT(nvarchar(4000), OLD.[default_access], 0),
			CONVERT(nvarchar(4000), NEW.[default_access], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[default_access] <>
					OLD.[default_access]
				) Or
			
				(
					NEW.[default_access] Is Null And
					OLD.[default_access] Is Not Null
				) Or
				(
					NEW.[default_access] Is Not Null And
					OLD.[default_access] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_core_role]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_core_role_function_access]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_role_function_access]
ON [dbo].[core_role_function_access]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_role_function_access]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_role_function_access]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_role_function_access',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), OLD.[role], 0), '''', '''''')+'''', '[role] Is Null') + ' AND ' + IsNull('[function]=N'''+replace(CONVERT(nvarchar(4000), OLD.[function], 0), '''', '''''')+'''', '[function] Is Null')),
		'role',
		CONVERT(nvarchar(4000), OLD.[role], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[role], 0)),  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[function], 0))
	FROM deleted OLD
	WHERE
		OLD.[role] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), OLD.[role], 0), '''', '''''')+'''', '[role] Is Null') + ' AND ' + IsNull('[function]=N'''+replace(CONVERT(nvarchar(4000), OLD.[function], 0), '''', '''''')+'''', '[function] Is Null')),
		'function',
		CONVERT(nvarchar(4000), OLD.[function], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[role], 0)),  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[function], 0))
	FROM deleted OLD
	WHERE
		OLD.[function] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_core_role_function_access]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_core_role_function_access]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_role_function_access]
ON [dbo].[core_role_function_access]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_role_function_access]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_role_function_access]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_role_function_access',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), NEW.[role], 0), '''', '''''')+'''', '[role] Is Null') + ' AND ' + IsNull('[function]=N'''+replace(CONVERT(nvarchar(4000), NEW.[function], 0), '''', '''''')+'''', '[function] Is Null')),
		'role',
		CONVERT(nvarchar(4000), NEW.[role], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[role], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[function], 0))
	FROM inserted NEW
	WHERE NEW.[role] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), NEW.[role], 0), '''', '''''')+'''', '[role] Is Null') + ' AND ' + IsNull('[function]=N'''+replace(CONVERT(nvarchar(4000), NEW.[function], 0), '''', '''''')+'''', '[function] Is Null')),
		'function',
		CONVERT(nvarchar(4000), NEW.[function], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[role], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[function], 0))
	FROM inserted NEW
	WHERE NEW.[function] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_core_role_function_access]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_core_role_function_access]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_role_function_access]
ON [dbo].[core_role_function_access]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_role_function_access]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_role_function_access]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_role_function_access',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([role])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1, KEY2
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[role], NEW.[role]), 0),'''' ,'''''')+'''', '[role] Is Null')+' AND '+IsNull('[function]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[function], NEW.[function]), 0),'''' ,'''''')+'''', '[function] Is Null')),
		    'role',
			CONVERT(nvarchar(4000), OLD.[role], 0),
			CONVERT(nvarchar(4000), NEW.[role], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[role], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[role], 0))), IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[function], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[function], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[role], 0)=CONVERT(nvarchar(4000), OLD.[role], 0) or (NEW.[role] Is Null and OLD.[role] Is Null)) AND (CONVERT(nvarchar(4000), NEW.[function], 0)=CONVERT(nvarchar(4000), OLD.[function], 0) or (NEW.[function] Is Null and OLD.[function] Is Null))
			WHERE (
			
			
				(
					NEW.[role] <>
					OLD.[role]
				) Or
			
				(
					NEW.[role] Is Null And
					OLD.[role] Is Not Null
				) Or
				(
					NEW.[role] Is Not Null And
					OLD.[role] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([function])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1, KEY2
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[role], NEW.[role]), 0),'''' ,'''''')+'''', '[role] Is Null')+' AND '+IsNull('[function]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[function], NEW.[function]), 0),'''' ,'''''')+'''', '[function] Is Null')),
		    'function',
			CONVERT(nvarchar(4000), OLD.[function], 0),
			CONVERT(nvarchar(4000), NEW.[function], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[role], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[role], 0))), IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[function], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[function], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[role], 0)=CONVERT(nvarchar(4000), OLD.[role], 0) or (NEW.[role] Is Null and OLD.[role] Is Null)) AND (CONVERT(nvarchar(4000), NEW.[function], 0)=CONVERT(nvarchar(4000), OLD.[function], 0) or (NEW.[function] Is Null and OLD.[function] Is Null))
			WHERE (
			
			
				(
					NEW.[function] <>
					OLD.[function]
				) Or
			
				(
					NEW.[function] Is Null And
					OLD.[function] Is Not Null
				) Or
				(
					NEW.[function] Is Not Null And
					OLD.[function] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_core_role_function_access]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_core_role_start_page_commands]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_role_start_page_commands]
ON [dbo].[core_role_start_page_commands]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_role_start_page_commands]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_role_start_page_commands]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_role_start_page_commands',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), OLD.[role], 0), '''', '''''')+'''', '[role] Is Null') + ' AND ' + IsNull('[order]='+CONVERT(nvarchar(4000), OLD.[order], 0), '[order] Is Null')),
		'role',
		CONVERT(nvarchar(4000), OLD.[role], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[role], 0)),  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[order], 0))
	FROM deleted OLD
	WHERE
		OLD.[role] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), OLD.[role], 0), '''', '''''')+'''', '[role] Is Null') + ' AND ' + IsNull('[order]='+CONVERT(nvarchar(4000), OLD.[order], 0), '[order] Is Null')),
		'command',
		CONVERT(nvarchar(4000), OLD.[command], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[role], 0)),  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[order], 0))
	FROM deleted OLD
	WHERE
		OLD.[command] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), OLD.[role], 0), '''', '''''')+'''', '[role] Is Null') + ' AND ' + IsNull('[order]='+CONVERT(nvarchar(4000), OLD.[order], 0), '[order] Is Null')),
		'order',
		CONVERT(nvarchar(4000), OLD.[order], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[role], 0)),  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[order], 0))
	FROM deleted OLD
	WHERE
		OLD.[order] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_core_role_start_page_commands]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_core_role_start_page_commands]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_role_start_page_commands]
ON [dbo].[core_role_start_page_commands]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_role_start_page_commands]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_role_start_page_commands]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_role_start_page_commands',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), NEW.[role], 0), '''', '''''')+'''', '[role] Is Null') + ' AND ' + IsNull('[order]='+CONVERT(nvarchar(4000), NEW.[order], 0), '[order] Is Null')),
		'role',
		CONVERT(nvarchar(4000), NEW.[role], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[role], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[order], 0))
	FROM inserted NEW
	WHERE NEW.[role] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), NEW.[role], 0), '''', '''''')+'''', '[role] Is Null') + ' AND ' + IsNull('[order]='+CONVERT(nvarchar(4000), NEW.[order], 0), '[order] Is Null')),
		'command',
		CONVERT(nvarchar(4000), NEW.[command], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[role], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[order], 0))
	FROM inserted NEW
	WHERE NEW.[command] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), NEW.[role], 0), '''', '''''')+'''', '[role] Is Null') + ' AND ' + IsNull('[order]='+CONVERT(nvarchar(4000), NEW.[order], 0), '[order] Is Null')),
		'order',
		CONVERT(nvarchar(4000), NEW.[order], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[role], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[order], 0))
	FROM inserted NEW
	WHERE NEW.[order] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_core_role_start_page_commands]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_core_role_start_page_commands]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_role_start_page_commands]
ON [dbo].[core_role_start_page_commands]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_role_start_page_commands]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_role_start_page_commands]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_role_start_page_commands',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([role])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1, KEY2
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[role], NEW.[role]), 0),'''' ,'''''')+'''', '[role] Is Null')+' AND '+IsNull('[order]='+CONVERT(nvarchar(4000), IsNull(OLD.[order], NEW.[order]), 0), '[order] Is Null')),
		    'role',
			CONVERT(nvarchar(4000), OLD.[role], 0),
			CONVERT(nvarchar(4000), NEW.[role], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[role], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[role], 0))), IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[order], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[order], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[role], 0)=CONVERT(nvarchar(4000), OLD.[role], 0) or (NEW.[role] Is Null and OLD.[role] Is Null)) AND (CONVERT(nvarchar(4000), NEW.[order], 0)=CONVERT(nvarchar(4000), OLD.[order], 0) or (NEW.[order] Is Null and OLD.[order] Is Null))
			WHERE (
			
			
				(
					NEW.[role] <>
					OLD.[role]
				) Or
			
				(
					NEW.[role] Is Null And
					OLD.[role] Is Not Null
				) Or
				(
					NEW.[role] Is Not Null And
					OLD.[role] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([command])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1, KEY2
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[role], NEW.[role]), 0),'''' ,'''''')+'''', '[role] Is Null')+' AND '+IsNull('[order]='+CONVERT(nvarchar(4000), IsNull(OLD.[order], NEW.[order]), 0), '[order] Is Null')),
		    'command',
			CONVERT(nvarchar(4000), OLD.[command], 0),
			CONVERT(nvarchar(4000), NEW.[command], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[role], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[role], 0))), IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[order], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[order], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[role], 0)=CONVERT(nvarchar(4000), OLD.[role], 0) or (NEW.[role] Is Null and OLD.[role] Is Null)) AND (CONVERT(nvarchar(4000), NEW.[order], 0)=CONVERT(nvarchar(4000), OLD.[order], 0) or (NEW.[order] Is Null and OLD.[order] Is Null))
			where (
			
			
				(
					NEW.[command] <>
					OLD.[command]
				) Or
			
				(
					NEW.[command] Is Null And
					OLD.[command] Is Not Null
				) Or
				(
					NEW.[command] Is Not Null And
					OLD.[command] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([order])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1, KEY2
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[role]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[role], NEW.[role]), 0),'''' ,'''''')+'''', '[role] Is Null')+' AND '+IsNull('[order]='+CONVERT(nvarchar(4000), IsNull(OLD.[order], NEW.[order]), 0), '[order] Is Null')),
		    'order',
			CONVERT(nvarchar(4000), OLD.[order], 0),
			CONVERT(nvarchar(4000), NEW.[order], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[role], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[role], 0))), IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[order], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[order], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[role], 0)=CONVERT(nvarchar(4000), OLD.[role], 0) or (NEW.[role] Is Null and OLD.[role] Is Null)) AND (CONVERT(nvarchar(4000), NEW.[order], 0)=CONVERT(nvarchar(4000), OLD.[order], 0) or (NEW.[order] Is Null and OLD.[order] Is Null))
			WHERE (
			
			
				(
					NEW.[order] <>
					OLD.[order]
				) Or
			
				(
					NEW.[order] Is Null And
					OLD.[order] Is Not Null
				) Or
				(
					NEW.[order] Is Not Null And
					OLD.[order] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_core_role_start_page_commands]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_core_search_spec]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_search_spec]
ON [dbo].[core_search_spec]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_search_spec]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_search_spec]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_search_spec',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'header_fields',
		CONVERT(nvarchar(4000), OLD.[header_fields], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[header_fields] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'command_class',
		CONVERT(nvarchar(4000), OLD.[command_class], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[command_class] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), OLD.[description], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[description] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), OLD.[applies_to], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[applies_to] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'display_index',
		CONVERT(nvarchar(4000), OLD.[display_index], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[display_index] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_core_search_spec]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_core_search_spec]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_search_spec]
ON [dbo].[core_search_spec]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_search_spec]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_search_spec]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_search_spec',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'header_fields',
		CONVERT(nvarchar(4000), NEW.[header_fields], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[header_fields] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'command_class',
		CONVERT(nvarchar(4000), NEW.[command_class], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[command_class] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'description',
		CONVERT(nvarchar(4000), NEW.[description], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[description] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), NEW.[applies_to], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[applies_to] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'display_index',
		CONVERT(nvarchar(4000), NEW.[display_index], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[display_index] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_core_search_spec]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_core_search_spec]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_search_spec]
ON [dbo].[core_search_spec]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_search_spec]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_search_spec]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_search_spec',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([header_fields])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'header_fields',
			CONVERT(nvarchar(4000), OLD.[header_fields], 0),
			CONVERT(nvarchar(4000), NEW.[header_fields], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[header_fields] <>
					OLD.[header_fields]
				) Or
			
				(
					NEW.[header_fields] Is Null And
					OLD.[header_fields] Is Not Null
				) Or
				(
					NEW.[header_fields] Is Not Null And
					OLD.[header_fields] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([command_class])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'command_class',
			CONVERT(nvarchar(4000), OLD.[command_class], 0),
			CONVERT(nvarchar(4000), NEW.[command_class], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[command_class] <>
					OLD.[command_class]
				) Or
			
				(
					NEW.[command_class] Is Null And
					OLD.[command_class] Is Not Null
				) Or
				(
					NEW.[command_class] Is Not Null And
					OLD.[command_class] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([description])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'description',
			CONVERT(nvarchar(4000), OLD.[description], 0),
			CONVERT(nvarchar(4000), NEW.[description], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[description] <>
					OLD.[description]
				) Or
			
				(
					NEW.[description] Is Null And
					OLD.[description] Is Not Null
				) Or
				(
					NEW.[description] Is Not Null And
					OLD.[description] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([applies_to])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'applies_to',
			CONVERT(nvarchar(4000), OLD.[applies_to], 0),
			CONVERT(nvarchar(4000), NEW.[applies_to], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[applies_to] <>
					OLD.[applies_to]
				) Or
			
				(
					NEW.[applies_to] Is Null And
					OLD.[applies_to] Is Not Null
				) Or
				(
					NEW.[applies_to] Is Not Null And
					OLD.[applies_to] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([display_index])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'display_index',
			CONVERT(nvarchar(4000), OLD.[display_index], 0),
			CONVERT(nvarchar(4000), NEW.[display_index], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[display_index] <>
					OLD.[display_index]
				) Or
			
				(
					NEW.[display_index] Is Null And
					OLD.[display_index] Is Not Null
				) Or
				(
					NEW.[display_index] Is Not Null And
					OLD.[display_index] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_core_search_spec]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_core_system_info]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_system_info]
ON [dbo].[core_system_info]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_system_info]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_system_info]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_system_info',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'application_name',
		CONVERT(nvarchar(4000), OLD.[application_name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[application_name] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'customer_name',
		CONVERT(nvarchar(4000), OLD.[customer_name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[customer_name] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'ver_major',
		CONVERT(nvarchar(4000), OLD.[ver_major], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[ver_major] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'ver_minor',
		CONVERT(nvarchar(4000), OLD.[ver_minor], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[ver_minor] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'ver_schema',
		CONVERT(nvarchar(4000), OLD.[ver_schema], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[ver_schema] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'ver_build',
		CONVERT(nvarchar(4000), OLD.[ver_build], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[ver_build] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_core_system_info]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_core_system_info]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_system_info]
ON [dbo].[core_system_info]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_system_info]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_system_info]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_system_info',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'application_name',
		CONVERT(nvarchar(4000), NEW.[application_name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[application_name] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'customer_name',
		CONVERT(nvarchar(4000), NEW.[customer_name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[customer_name] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'ver_major',
		CONVERT(nvarchar(4000), NEW.[ver_major], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[ver_major] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'ver_minor',
		CONVERT(nvarchar(4000), NEW.[ver_minor], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[ver_minor] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'ver_schema',
		CONVERT(nvarchar(4000), NEW.[ver_schema], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[ver_schema] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'ver_build',
		CONVERT(nvarchar(4000), NEW.[ver_build], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[ver_build] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_core_system_info]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_core_system_info]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_system_info]
ON [dbo].[core_system_info]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_system_info]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_system_info]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_system_info',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([application_name])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'application_name',
			CONVERT(nvarchar(4000), OLD.[application_name], 0),
			CONVERT(nvarchar(4000), NEW.[application_name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[application_name] <>
					OLD.[application_name]
				) Or
			
				(
					NEW.[application_name] Is Null And
					OLD.[application_name] Is Not Null
				) Or
				(
					NEW.[application_name] Is Not Null And
					OLD.[application_name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([customer_name])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'customer_name',
			CONVERT(nvarchar(4000), OLD.[customer_name], 0),
			CONVERT(nvarchar(4000), NEW.[customer_name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[customer_name] <>
					OLD.[customer_name]
				) Or
			
				(
					NEW.[customer_name] Is Null And
					OLD.[customer_name] Is Not Null
				) Or
				(
					NEW.[customer_name] Is Not Null And
					OLD.[customer_name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([ver_major])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'ver_major',
			CONVERT(nvarchar(4000), OLD.[ver_major], 0),
			CONVERT(nvarchar(4000), NEW.[ver_major], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[ver_major] <>
					OLD.[ver_major]
				) Or
			
				(
					NEW.[ver_major] Is Null And
					OLD.[ver_major] Is Not Null
				) Or
				(
					NEW.[ver_major] Is Not Null And
					OLD.[ver_major] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([ver_minor])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'ver_minor',
			CONVERT(nvarchar(4000), OLD.[ver_minor], 0),
			CONVERT(nvarchar(4000), NEW.[ver_minor], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[ver_minor] <>
					OLD.[ver_minor]
				) Or
			
				(
					NEW.[ver_minor] Is Null And
					OLD.[ver_minor] Is Not Null
				) Or
				(
					NEW.[ver_minor] Is Not Null And
					OLD.[ver_minor] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([ver_schema])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'ver_schema',
			CONVERT(nvarchar(4000), OLD.[ver_schema], 0),
			CONVERT(nvarchar(4000), NEW.[ver_schema], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[ver_schema] <>
					OLD.[ver_schema]
				) Or
			
				(
					NEW.[ver_schema] Is Null And
					OLD.[ver_schema] Is Not Null
				) Or
				(
					NEW.[ver_schema] Is Not Null And
					OLD.[ver_schema] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([ver_build])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'ver_build',
			CONVERT(nvarchar(4000), OLD.[ver_build], 0),
			CONVERT(nvarchar(4000), NEW.[ver_build], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[ver_build] <>
					OLD.[ver_build]
				) Or
			
				(
					NEW.[ver_build] Is Null And
					OLD.[ver_build] Is Not Null
				) Or
				(
					NEW.[ver_build] Is Not Null And
					OLD.[ver_build] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_core_system_info]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_core_user]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_user]
ON [dbo].[core_user]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_user]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:54
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_user]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_user',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'login',
		CONVERT(nvarchar(4000), OLD.[login], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[login] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'password',
		CONVERT(nvarchar(4000), OLD.[password], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[password] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'full_name',
		CONVERT(nvarchar(4000), OLD.[full_name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[full_name] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'email',
		CONVERT(nvarchar(4000), OLD.[email], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[email] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'title',
		CONVERT(nvarchar(4000), OLD.[title], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[title] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no_of_failed_logins',
		CONVERT(nvarchar(4000), OLD.[no_of_failed_logins], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[no_of_failed_logins] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'account_locked',
		CONVERT(nvarchar(4000), OLD.[account_locked], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[account_locked] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'is_active',
		CONVERT(nvarchar(4000), OLD.[is_active], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[is_active] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_core_user]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_core_user]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_user]
ON [dbo].[core_user]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_user]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_user]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_user',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'login',
		CONVERT(nvarchar(4000), NEW.[login], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[login] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'password',
		CONVERT(nvarchar(4000), NEW.[password], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[password] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'full_name',
		CONVERT(nvarchar(4000), NEW.[full_name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[full_name] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'email',
		CONVERT(nvarchar(4000), NEW.[email], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[email] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'title',
		CONVERT(nvarchar(4000), NEW.[title], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[title] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'no_of_failed_logins',
		CONVERT(nvarchar(4000), NEW.[no_of_failed_logins], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[no_of_failed_logins] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'account_locked',
		CONVERT(nvarchar(4000), NEW.[account_locked], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[account_locked] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'is_active',
		CONVERT(nvarchar(4000), NEW.[is_active], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[is_active] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_core_user]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_core_user]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_user]
ON [dbo].[core_user]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_user]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:53
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_user]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_user',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([login])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'login',
			CONVERT(nvarchar(4000), OLD.[login], 0),
			CONVERT(nvarchar(4000), NEW.[login], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[login] <>
					OLD.[login]
				) Or
			
				(
					NEW.[login] Is Null And
					OLD.[login] Is Not Null
				) Or
				(
					NEW.[login] Is Not Null And
					OLD.[login] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([password])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'password',
			CONVERT(nvarchar(4000), OLD.[password], 0),
			CONVERT(nvarchar(4000), NEW.[password], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[password] <>
					OLD.[password]
				) Or
			
				(
					NEW.[password] Is Null And
					OLD.[password] Is Not Null
				) Or
				(
					NEW.[password] Is Not Null And
					OLD.[password] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([full_name])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'full_name',
			CONVERT(nvarchar(4000), OLD.[full_name], 0),
			CONVERT(nvarchar(4000), NEW.[full_name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[full_name] <>
					OLD.[full_name]
				) Or
			
				(
					NEW.[full_name] Is Null And
					OLD.[full_name] Is Not Null
				) Or
				(
					NEW.[full_name] Is Not Null And
					OLD.[full_name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([email])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'email',
			CONVERT(nvarchar(4000), OLD.[email], 0),
			CONVERT(nvarchar(4000), NEW.[email], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[email] <>
					OLD.[email]
				) Or
			
				(
					NEW.[email] Is Null And
					OLD.[email] Is Not Null
				) Or
				(
					NEW.[email] Is Not Null And
					OLD.[email] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([title])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'title',
			CONVERT(nvarchar(4000), OLD.[title], 0),
			CONVERT(nvarchar(4000), NEW.[title], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[title] <>
					OLD.[title]
				) Or
			
				(
					NEW.[title] Is Null And
					OLD.[title] Is Not Null
				) Or
				(
					NEW.[title] Is Not Null And
					OLD.[title] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([no_of_failed_logins])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'no_of_failed_logins',
			CONVERT(nvarchar(4000), OLD.[no_of_failed_logins], 0),
			CONVERT(nvarchar(4000), NEW.[no_of_failed_logins], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[no_of_failed_logins] <>
					OLD.[no_of_failed_logins]
				) Or
			
				(
					NEW.[no_of_failed_logins] Is Null And
					OLD.[no_of_failed_logins] Is Not Null
				) Or
				(
					NEW.[no_of_failed_logins] Is Not Null And
					OLD.[no_of_failed_logins] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([account_locked])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'account_locked',
			CONVERT(nvarchar(4000), OLD.[account_locked], 0),
			CONVERT(nvarchar(4000), NEW.[account_locked], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[account_locked] <>
					OLD.[account_locked]
				) Or
			
				(
					NEW.[account_locked] Is Null And
					OLD.[account_locked] Is Not Null
				) Or
				(
					NEW.[account_locked] Is Not Null And
					OLD.[account_locked] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([is_active])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'is_active',
			CONVERT(nvarchar(4000), OLD.[is_active], 0),
			CONVERT(nvarchar(4000), NEW.[is_active], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[is_active] <>
					OLD.[is_active]
				) Or
			
				(
					NEW.[is_active] Is Null And
					OLD.[is_active] Is Not Null
				) Or
				(
					NEW.[is_active] Is Not Null And
					OLD.[is_active] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_core_user]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_core_user_roles]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_user_roles]
ON [dbo].[core_user_roles]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_user_roles]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:54
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_user_roles]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_user_roles',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[user]=N'''+replace(CONVERT(nvarchar(4000), OLD.[user], 0), '''', '''''')+'''', '[user] Is Null') + ' AND ' + IsNull('[order]='+CONVERT(nvarchar(4000), OLD.[order], 0), '[order] Is Null')),
		'user',
		CONVERT(nvarchar(4000), OLD.[user], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[user], 0)),  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[order], 0))
	FROM deleted OLD
	WHERE
		OLD.[user] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[user]=N'''+replace(CONVERT(nvarchar(4000), OLD.[user], 0), '''', '''''')+'''', '[user] Is Null') + ' AND ' + IsNull('[order]='+CONVERT(nvarchar(4000), OLD.[order], 0), '[order] Is Null')),
		'role',
		CONVERT(nvarchar(4000), OLD.[role], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[user], 0)),  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[order], 0))
	FROM deleted OLD
	WHERE
		OLD.[role] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[user]=N'''+replace(CONVERT(nvarchar(4000), OLD.[user], 0), '''', '''''')+'''', '[user] Is Null') + ' AND ' + IsNull('[order]='+CONVERT(nvarchar(4000), OLD.[order], 0), '[order] Is Null')),
		'order',
		CONVERT(nvarchar(4000), OLD.[order], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[user], 0)),  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[order], 0))
	FROM deleted OLD
	WHERE
		OLD.[order] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_core_user_roles]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_core_user_roles]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_user_roles]
ON [dbo].[core_user_roles]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_user_roles]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:54
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_user_roles]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_user_roles',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[user]=N'''+replace(CONVERT(nvarchar(4000), NEW.[user], 0), '''', '''''')+'''', '[user] Is Null') + ' AND ' + IsNull('[order]='+CONVERT(nvarchar(4000), NEW.[order], 0), '[order] Is Null')),
		'user',
		CONVERT(nvarchar(4000), NEW.[user], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[user], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[order], 0))
	FROM inserted NEW
	WHERE NEW.[user] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[user]=N'''+replace(CONVERT(nvarchar(4000), NEW.[user], 0), '''', '''''')+'''', '[user] Is Null') + ' AND ' + IsNull('[order]='+CONVERT(nvarchar(4000), NEW.[order], 0), '[order] Is Null')),
		'role',
		CONVERT(nvarchar(4000), NEW.[role], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[user], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[order], 0))
	FROM inserted NEW
	WHERE NEW.[role] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1, KEY2
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[user]=N'''+replace(CONVERT(nvarchar(4000), NEW.[user], 0), '''', '''''')+'''', '[user] Is Null') + ' AND ' + IsNull('[order]='+CONVERT(nvarchar(4000), NEW.[order], 0), '[order] Is Null')),
		'order',
		CONVERT(nvarchar(4000), NEW.[order], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[user], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[order], 0))
	FROM inserted NEW
	WHERE NEW.[order] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_core_user_roles]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_core_user_roles]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_user_roles]
ON [dbo].[core_user_roles]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_user_roles]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:54
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_user_roles]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_user_roles',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([user])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1, KEY2
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[user]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[user], NEW.[user]), 0),'''' ,'''''')+'''', '[user] Is Null')+' AND '+IsNull('[order]='+CONVERT(nvarchar(4000), IsNull(OLD.[order], NEW.[order]), 0), '[order] Is Null')),
		    'user',
			CONVERT(nvarchar(4000), OLD.[user], 0),
			CONVERT(nvarchar(4000), NEW.[user], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[user], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[user], 0))), IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[order], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[order], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[user], 0)=CONVERT(nvarchar(4000), OLD.[user], 0) or (NEW.[user] Is Null and OLD.[user] Is Null)) AND (CONVERT(nvarchar(4000), NEW.[order], 0)=CONVERT(nvarchar(4000), OLD.[order], 0) or (NEW.[order] Is Null and OLD.[order] Is Null))
			WHERE (
			
			
				(
					NEW.[user] <>
					OLD.[user]
				) Or
			
				(
					NEW.[user] Is Null And
					OLD.[user] Is Not Null
				) Or
				(
					NEW.[user] Is Not Null And
					OLD.[user] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([role])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1, KEY2
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[user]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[user], NEW.[user]), 0),'''' ,'''''')+'''', '[user] Is Null')+' AND '+IsNull('[order]='+CONVERT(nvarchar(4000), IsNull(OLD.[order], NEW.[order]), 0), '[order] Is Null')),
		    'role',
			CONVERT(nvarchar(4000), OLD.[role], 0),
			CONVERT(nvarchar(4000), NEW.[role], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[user], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[user], 0))), IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[order], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[order], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[user], 0)=CONVERT(nvarchar(4000), OLD.[user], 0) or (NEW.[user] Is Null and OLD.[user] Is Null)) AND (CONVERT(nvarchar(4000), NEW.[order], 0)=CONVERT(nvarchar(4000), OLD.[order], 0) or (NEW.[order] Is Null and OLD.[order] Is Null))
			where (
			
			
				(
					NEW.[role] <>
					OLD.[role]
				) Or
			
				(
					NEW.[role] Is Null And
					OLD.[role] Is Not Null
				) Or
				(
					NEW.[role] Is Not Null And
					OLD.[role] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([order])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1, KEY2
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[user]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[user], NEW.[user]), 0),'''' ,'''''')+'''', '[user] Is Null')+' AND '+IsNull('[order]='+CONVERT(nvarchar(4000), IsNull(OLD.[order], NEW.[order]), 0), '[order] Is Null')),
		    'order',
			CONVERT(nvarchar(4000), OLD.[order], 0),
			CONVERT(nvarchar(4000), NEW.[order], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[user], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[user], 0))), IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[order], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[order], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[user], 0)=CONVERT(nvarchar(4000), OLD.[user], 0) or (NEW.[user] Is Null and OLD.[user] Is Null)) AND (CONVERT(nvarchar(4000), NEW.[order], 0)=CONVERT(nvarchar(4000), OLD.[order], 0) or (NEW.[order] Is Null and OLD.[order] Is Null))
			WHERE (
			
			
				(
					NEW.[order] <>
					OLD.[order]
				) Or
			
				(
					NEW.[order] Is Null And
					OLD.[order] Is Not Null
				) Or
				(
					NEW.[order] Is Not Null And
					OLD.[order] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_core_user_roles]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_core_version_info]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_core_version_info]
ON [dbo].[core_version_info]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[core_version_info]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:54
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_version_info]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_version_info',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'database_version',
		CONVERT(nvarchar(4000), OLD.[database_version], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[database_version] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'software_version',
		CONVERT(nvarchar(4000), OLD.[software_version], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[software_version] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_core_version_info]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_core_version_info]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_core_version_info]
ON [dbo].[core_version_info]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[core_version_info]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:54
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_version_info]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_version_info',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'database_version',
		CONVERT(nvarchar(4000), NEW.[database_version], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[database_version] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'software_version',
		CONVERT(nvarchar(4000), NEW.[software_version], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[software_version] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_core_version_info]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_core_version_info]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_core_version_info]
ON [dbo].[core_version_info]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[core_version_info]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:54
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[core_version_info]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'core_version_info',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([database_version])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'database_version',
			CONVERT(nvarchar(4000), OLD.[database_version], 0),
			CONVERT(nvarchar(4000), NEW.[database_version], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[database_version] <>
					OLD.[database_version]
				) Or
			
				(
					NEW.[database_version] Is Null And
					OLD.[database_version] Is Not Null
				) Or
				(
					NEW.[database_version] Is Not Null And
					OLD.[database_version] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([software_version])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'software_version',
			CONVERT(nvarchar(4000), OLD.[software_version], 0),
			CONVERT(nvarchar(4000), NEW.[software_version], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[software_version] <>
					OLD.[software_version]
				) Or
			
				(
					NEW.[software_version] Is Null And
					OLD.[software_version] Is Not Null
				) Or
				(
					NEW.[software_version] Is Not Null And
					OLD.[software_version] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_core_version_info]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_documents_attached_document]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_documents_attached_document]
ON [dbo].[documents_attached_document]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[documents_attached_document]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:54
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[documents_attached_document]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'documents_attached_document',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), OLD.[applies_to], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[applies_to] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to_oid',
		CONVERT(nvarchar(4000), OLD.[applies_to_oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[applies_to_oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'record_type_oid',
		CONVERT(nvarchar(4000), OLD.[record_type_oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[record_type_oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'date_added',
		CONVERT(nvarchar(4000), OLD.[date_added], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[date_added] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'file',
		CONVERT(nvarchar(4000), OLD.[file], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[file] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_documents_attached_document]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_documents_attached_document]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_documents_attached_document]
ON [dbo].[documents_attached_document]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[documents_attached_document]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:54
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[documents_attached_document]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'documents_attached_document',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), NEW.[applies_to], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[applies_to] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to_oid',
		CONVERT(nvarchar(4000), NEW.[applies_to_oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[applies_to_oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'record_type_oid',
		CONVERT(nvarchar(4000), NEW.[record_type_oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[record_type_oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'date_added',
		CONVERT(nvarchar(4000), NEW.[date_added], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[date_added] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'file',
		CONVERT(nvarchar(4000), NEW.[file], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[file] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_documents_attached_document]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_documents_attached_document]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_documents_attached_document]
ON [dbo].[documents_attached_document]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[documents_attached_document]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:54
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[documents_attached_document]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'documents_attached_document',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([applies_to])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'applies_to',
			CONVERT(nvarchar(4000), OLD.[applies_to], 0),
			CONVERT(nvarchar(4000), NEW.[applies_to], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[applies_to] <>
					OLD.[applies_to]
				) Or
			
				(
					NEW.[applies_to] Is Null And
					OLD.[applies_to] Is Not Null
				) Or
				(
					NEW.[applies_to] Is Not Null And
					OLD.[applies_to] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([applies_to_oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'applies_to_oid',
			CONVERT(nvarchar(4000), OLD.[applies_to_oid], 0),
			CONVERT(nvarchar(4000), NEW.[applies_to_oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[applies_to_oid] <>
					OLD.[applies_to_oid]
				) Or
			
				(
					NEW.[applies_to_oid] Is Null And
					OLD.[applies_to_oid] Is Not Null
				) Or
				(
					NEW.[applies_to_oid] Is Not Null And
					OLD.[applies_to_oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([record_type_oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'record_type_oid',
			CONVERT(nvarchar(4000), OLD.[record_type_oid], 0),
			CONVERT(nvarchar(4000), NEW.[record_type_oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[record_type_oid] <>
					OLD.[record_type_oid]
				) Or
			
				(
					NEW.[record_type_oid] Is Null And
					OLD.[record_type_oid] Is Not Null
				) Or
				(
					NEW.[record_type_oid] Is Not Null And
					OLD.[record_type_oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([date_added])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'date_added',
			CONVERT(nvarchar(4000), OLD.[date_added], 121),
			CONVERT(nvarchar(4000), NEW.[date_added], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[date_added] <>
					OLD.[date_added]
				) Or
			
				(
					NEW.[date_added] Is Null And
					OLD.[date_added] Is Not Null
				) Or
				(
					NEW.[date_added] Is Not Null And
					OLD.[date_added] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([file])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'file',
			CONVERT(nvarchar(4000), OLD.[file], 0),
			CONVERT(nvarchar(4000), NEW.[file], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[file] <>
					OLD.[file]
				) Or
			
				(
					NEW.[file] Is Null And
					OLD.[file] Is Not Null
				) Or
				(
					NEW.[file] Is Not Null And
					OLD.[file] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_documents_attached_document]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_documents_scanned_document]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_documents_scanned_document]
ON [dbo].[documents_scanned_document]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[documents_scanned_document]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:54
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[documents_scanned_document]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'documents_scanned_document',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), OLD.[applies_to], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[applies_to] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to_oid',
		CONVERT(nvarchar(4000), OLD.[applies_to_oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[applies_to_oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'date_added',
		CONVERT(nvarchar(4000), OLD.[date_added], 121),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[date_added] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'reference',
		CONVERT(nvarchar(4000), OLD.[reference], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[reference] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'sub_path',
		CONVERT(nvarchar(4000), OLD.[sub_path], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[sub_path] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'document_type',
		CONVERT(nvarchar(4000), OLD.[document_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[document_type] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'module',
		CONVERT(nvarchar(4000), OLD.[module], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[module] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'module_description',
		CONVERT(nvarchar(4000), OLD.[module_description], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[module_description] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_documents_scanned_document]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_documents_scanned_document]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_documents_scanned_document]
ON [dbo].[documents_scanned_document]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[documents_scanned_document]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:54
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[documents_scanned_document]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'documents_scanned_document',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), NEW.[applies_to], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[applies_to] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to_oid',
		CONVERT(nvarchar(4000), NEW.[applies_to_oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[applies_to_oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'date_added',
		CONVERT(nvarchar(4000), NEW.[date_added], 121),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[date_added] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'reference',
		CONVERT(nvarchar(4000), NEW.[reference], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[reference] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'sub_path',
		CONVERT(nvarchar(4000), NEW.[sub_path], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[sub_path] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'document_type',
		CONVERT(nvarchar(4000), NEW.[document_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[document_type] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'module',
		CONVERT(nvarchar(4000), NEW.[module], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[module] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'module_description',
		CONVERT(nvarchar(4000), NEW.[module_description], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[module_description] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_documents_scanned_document]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_documents_scanned_document]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_documents_scanned_document]
ON [dbo].[documents_scanned_document]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[documents_scanned_document]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:54
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[documents_scanned_document]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'documents_scanned_document',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([applies_to])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'applies_to',
			CONVERT(nvarchar(4000), OLD.[applies_to], 0),
			CONVERT(nvarchar(4000), NEW.[applies_to], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[applies_to] <>
					OLD.[applies_to]
				) Or
			
				(
					NEW.[applies_to] Is Null And
					OLD.[applies_to] Is Not Null
				) Or
				(
					NEW.[applies_to] Is Not Null And
					OLD.[applies_to] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([applies_to_oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'applies_to_oid',
			CONVERT(nvarchar(4000), OLD.[applies_to_oid], 0),
			CONVERT(nvarchar(4000), NEW.[applies_to_oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[applies_to_oid] <>
					OLD.[applies_to_oid]
				) Or
			
				(
					NEW.[applies_to_oid] Is Null And
					OLD.[applies_to_oid] Is Not Null
				) Or
				(
					NEW.[applies_to_oid] Is Not Null And
					OLD.[applies_to_oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([date_added])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'date_added',
			CONVERT(nvarchar(4000), OLD.[date_added], 121),
			CONVERT(nvarchar(4000), NEW.[date_added], 121),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[date_added] <>
					OLD.[date_added]
				) Or
			
				(
					NEW.[date_added] Is Null And
					OLD.[date_added] Is Not Null
				) Or
				(
					NEW.[date_added] Is Not Null And
					OLD.[date_added] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([reference])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'reference',
			CONVERT(nvarchar(4000), OLD.[reference], 0),
			CONVERT(nvarchar(4000), NEW.[reference], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[reference] <>
					OLD.[reference]
				) Or
			
				(
					NEW.[reference] Is Null And
					OLD.[reference] Is Not Null
				) Or
				(
					NEW.[reference] Is Not Null And
					OLD.[reference] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([sub_path])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'sub_path',
			CONVERT(nvarchar(4000), OLD.[sub_path], 0),
			CONVERT(nvarchar(4000), NEW.[sub_path], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[sub_path] <>
					OLD.[sub_path]
				) Or
			
				(
					NEW.[sub_path] Is Null And
					OLD.[sub_path] Is Not Null
				) Or
				(
					NEW.[sub_path] Is Not Null And
					OLD.[sub_path] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([document_type])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'document_type',
			CONVERT(nvarchar(4000), OLD.[document_type], 0),
			CONVERT(nvarchar(4000), NEW.[document_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[document_type] <>
					OLD.[document_type]
				) Or
			
				(
					NEW.[document_type] Is Null And
					OLD.[document_type] Is Not Null
				) Or
				(
					NEW.[document_type] Is Not Null And
					OLD.[document_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([module])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'module',
			CONVERT(nvarchar(4000), OLD.[module], 0),
			CONVERT(nvarchar(4000), NEW.[module], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[module] <>
					OLD.[module]
				) Or
			
				(
					NEW.[module] Is Null And
					OLD.[module] Is Not Null
				) Or
				(
					NEW.[module] Is Not Null And
					OLD.[module] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([module_description])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'module_description',
			CONVERT(nvarchar(4000), OLD.[module_description], 0),
			CONVERT(nvarchar(4000), NEW.[module_description], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[module_description] <>
					OLD.[module_description]
				) Or
			
				(
					NEW.[module_description] Is Null And
					OLD.[module_description] Is Not Null
				) Or
				(
					NEW.[module_description] Is Not Null And
					OLD.[module_description] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_documents_scanned_document]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_documents_stored_file]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_documents_stored_file]
ON [dbo].[documents_stored_file]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[documents_stored_file]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:54
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[documents_stored_file]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'documents_stored_file',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'type',
		CONVERT(nvarchar(4000), OLD.[type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[type] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'mime_type',
		CONVERT(nvarchar(4000), OLD.[mime_type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[mime_type] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), OLD.[name], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[name] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'data',
		dbo.AUDIT_fn_HexToStr(OLD.[data]),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[data] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'sub_path',
		CONVERT(nvarchar(4000), OLD.[sub_path], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[sub_path] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'type_path_configuration',
		CONVERT(nvarchar(4000), OLD.[type_path_configuration], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[type_path_configuration] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'key',
		CONVERT(nvarchar(4000), OLD.[key], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[key] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_documents_stored_file]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_documents_stored_file]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_documents_stored_file]
ON [dbo].[documents_stored_file]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[documents_stored_file]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:54
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[documents_stored_file]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'documents_stored_file',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'type',
		CONVERT(nvarchar(4000), NEW.[type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[type] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'mime_type',
		CONVERT(nvarchar(4000), NEW.[mime_type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[mime_type] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'name',
		CONVERT(nvarchar(4000), NEW.[name], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[name] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'data',
		dbo.AUDIT_fn_HexToStr(NEW.[data]),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[data] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'sub_path',
		CONVERT(nvarchar(4000), NEW.[sub_path], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[sub_path] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'type_path_configuration',
		CONVERT(nvarchar(4000), NEW.[type_path_configuration], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[type_path_configuration] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'key',
		CONVERT(nvarchar(4000), NEW.[key], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[key] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_documents_stored_file]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_documents_stored_file]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_documents_stored_file]
ON [dbo].[documents_stored_file]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[documents_stored_file]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:54
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[documents_stored_file]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'documents_stored_file',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([type])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'type',
			CONVERT(nvarchar(4000), OLD.[type], 0),
			CONVERT(nvarchar(4000), NEW.[type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[type] <>
					OLD.[type]
				) Or
			
				(
					NEW.[type] Is Null And
					OLD.[type] Is Not Null
				) Or
				(
					NEW.[type] Is Not Null And
					OLD.[type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([mime_type])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'mime_type',
			CONVERT(nvarchar(4000), OLD.[mime_type], 0),
			CONVERT(nvarchar(4000), NEW.[mime_type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[mime_type] <>
					OLD.[mime_type]
				) Or
			
				(
					NEW.[mime_type] Is Null And
					OLD.[mime_type] Is Not Null
				) Or
				(
					NEW.[mime_type] Is Not Null And
					OLD.[mime_type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([name])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'name',
			CONVERT(nvarchar(4000), OLD.[name], 0),
			CONVERT(nvarchar(4000), NEW.[name], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[name] <>
					OLD.[name]
				) Or
			
				(
					NEW.[name] Is Null And
					OLD.[name] Is Not Null
				) Or
				(
					NEW.[name] Is Not Null And
					OLD.[name] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([data])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'data',
			dbo.AUDIT_fn_HexToStr(OLD.[data]),
			dbo.AUDIT_fn_HexToStr(NEW.[data]),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[data] <>
					OLD.[data]
				) Or
			
				(
					NEW.[data] Is Null And
					OLD.[data] Is Not Null
				) Or
				(
					NEW.[data] Is Not Null And
					OLD.[data] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([sub_path])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'sub_path',
			CONVERT(nvarchar(4000), OLD.[sub_path], 0),
			CONVERT(nvarchar(4000), NEW.[sub_path], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[sub_path] <>
					OLD.[sub_path]
				) Or
			
				(
					NEW.[sub_path] Is Null And
					OLD.[sub_path] Is Not Null
				) Or
				(
					NEW.[sub_path] Is Not Null And
					OLD.[sub_path] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([type_path_configuration])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'type_path_configuration',
			CONVERT(nvarchar(4000), OLD.[type_path_configuration], 0),
			CONVERT(nvarchar(4000), NEW.[type_path_configuration], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[type_path_configuration] <>
					OLD.[type_path_configuration]
				) Or
			
				(
					NEW.[type_path_configuration] Is Null And
					OLD.[type_path_configuration] Is Not Null
				) Or
				(
					NEW.[type_path_configuration] Is Not Null And
					OLD.[type_path_configuration] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([key])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'key',
			CONVERT(nvarchar(4000), OLD.[key], 0),
			CONVERT(nvarchar(4000), NEW.[key], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[key] <>
					OLD.[key]
				) Or
			
				(
					NEW.[key] Is Null And
					OLD.[key] Is Not Null
				) Or
				(
					NEW.[key] Is Not Null And
					OLD.[key] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_documents_stored_file]', @order=N'Last', @stmttype=N'UPDATE'
GO
/****** Object:  Trigger [dbo].[tr_d_AUDIT_documents_type_path_configuration]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_d_AUDIT_documents_type_path_configuration]
ON [dbo].[documents_type_path_configuration]
FOR DELETE

	NOT FOR REPLICATION

AS
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  DELETE TRIGGER for Table:  [dbo].[documents_type_path_configuration]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:54
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[documents_type_path_configuration]'
	Select @ROWS_COUNT=count(*) from deleted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'documents_type_path_configuration',
		'dbo',
		3,	--	ACTION ID For DELETE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	


	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), OLD.[oid], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[oid] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'type',
		CONVERT(nvarchar(4000), OLD.[type], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[type] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), OLD.[orev], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[orev] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), OLD.[applies_to], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[applies_to] Is Not Null

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		OLD_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), OLD.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'path_config',
		CONVERT(nvarchar(4000), OLD.[path_config], 0),
		'A'
		,  CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0))
	FROM deleted OLD
	WHERE
		OLD.[path_config] Is Not Null

	-- Lookup
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

END

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_d_AUDIT_documents_type_path_configuration]', @order=N'Last', @stmttype=N'DELETE'
GO
/****** Object:  Trigger [dbo].[tr_i_AUDIT_documents_type_path_configuration]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_i_AUDIT_documents_type_path_configuration]
ON [dbo].[documents_type_path_configuration]
FOR INSERT


	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  INSERT TRIGGER for Table:  [dbo].[documents_type_path_configuration]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:54
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE				varchar(50),
		@AUDIT_LOG_TRANSACTION_ID		Int,
		@PRIM_KEY				nvarchar(4000),
		--@TABLE_NAME				nvarchar(4000),
		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[documents_type_path_configuration]'
	Select @ROWS_COUNT=count(*) from inserted
	Set @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'documents_type_path_configuration',
		'dbo',
		2,	--	ACTION ID For INSERT
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'oid',
		CONVERT(nvarchar(4000), NEW.[oid], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[oid] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'type',
		CONVERT(nvarchar(4000), NEW.[type], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[type] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'orev',
		CONVERT(nvarchar(4000), NEW.[orev], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[orev] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'applies_to',
		CONVERT(nvarchar(4000), NEW.[applies_to], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[applies_to] Is Not Null
    
	INSERT INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
	(
		AUDIT_LOG_TRANSACTION_ID,
		PRIMARY_KEY_DATA,
		COL_NAME,
		NEW_VALUE_LONG,
		DATA_TYPE
		, KEY1
	)
	SELECT
		@AUDIT_LOG_TRANSACTION_ID,
		convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), NEW.[oid], 0), '''', '''''')+'''', '[oid] Is Null')),
		'path_config',
		CONVERT(nvarchar(4000), NEW.[path_config], 0),
		'A'
		, CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0))
	FROM inserted NEW
	WHERE NEW.[path_config] Is Not Null
    

	-- Lookup 
	

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  

End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_i_AUDIT_documents_type_path_configuration]', @order=N'Last', @stmttype=N'INSERT'
GO
/****** Object:  Trigger [dbo].[tr_u_AUDIT_documents_type_path_configuration]    Script Date: 13/02/2017 08:56:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[tr_u_AUDIT_documents_type_path_configuration]
ON [dbo].[documents_type_path_configuration]
FOR UPDATE

	NOT FOR REPLICATION

As
-- "<TAG>SQLAUDIT GENERATED - DO NOT REMOVE</TAG>"
-- --------------------------------------------------------------------------------------------------------------
-- Legal:        You may freely edit and modify this template and make copies of it.
-- Description:  UPDATE TRIGGER for Table:  [dbo].[documents_type_path_configuration]
-- Author:       ApexSQL Software
-- Date:		 12/02/2017 18:28:54
-- --------------------------------------------------------------------------------------------------------------
BEGIN
	DECLARE 
		@IDENTITY_SAVE			varchar(50),
		@AUDIT_LOG_TRANSACTION_ID	Int,
		@PRIM_KEY			nvarchar(4000),
		@Inserted	    		bit,
		--@TABLE_NAME				nvarchar(4000),
 		@ROWS_COUNT				int

	SET NOCOUNT ON

	--Set @TABLE_NAME = '[dbo].[documents_type_path_configuration]'
	Select @ROWS_COUNT=count(*) from inserted
	SET @IDENTITY_SAVE = CAST(IsNull(@@IDENTITY,1) AS varchar(50))

	INSERT
	INTO [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS
	(
		TABLE_NAME,
		TABLE_SCHEMA,
		AUDIT_ACTION_ID,
		HOST_NAME,
		APP_NAME,
		MODIFIED_BY,
		MODIFIED_DATE,
		AFFECTED_ROWS,
		[DATABASE]
	)
	values(
		'documents_type_path_configuration',
		'dbo',
		1,	--	ACTION ID For UPDATE
		CASE 
		  WHEN LEN(HOST_NAME()) < 1 THEN ' '
		  ELSE HOST_NAME()
		END,
		CASE 
		  WHEN LEN(APP_NAME()) < 1 THEN ' '
		  ELSE APP_NAME()
		END,
		SUSER_SNAME(),
		GETDATE(),
		@ROWS_COUNT,
		'ClubFrRocks'
	)

	
	Set @AUDIT_LOG_TRANSACTION_ID = SCOPE_IDENTITY()
	

	SET @Inserted = 0
	
	If UPDATE([oid])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'oid',
			CONVERT(nvarchar(4000), OLD.[oid], 0),
			CONVERT(nvarchar(4000), NEW.[oid], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Full Outer Join inserted NEW On
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			WHERE (
			
			
				(
					NEW.[oid] <>
					OLD.[oid]
				) Or
			
				(
					NEW.[oid] Is Null And
					OLD.[oid] Is Not Null
				) Or
				(
					NEW.[oid] Is Not Null And
					OLD.[oid] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([type])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'type',
			CONVERT(nvarchar(4000), OLD.[type], 0),
			CONVERT(nvarchar(4000), NEW.[type], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[type] <>
					OLD.[type]
				) Or
			
				(
					NEW.[type] Is Null And
					OLD.[type] Is Not Null
				) Or
				(
					NEW.[type] Is Not Null And
					OLD.[type] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([orev])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'orev',
			CONVERT(nvarchar(4000), OLD.[orev], 0),
			CONVERT(nvarchar(4000), NEW.[orev], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[orev] <>
					OLD.[orev]
				) Or
			
				(
					NEW.[orev] Is Null And
					OLD.[orev] Is Not Null
				) Or
				(
					NEW.[orev] Is Not Null And
					OLD.[orev] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([applies_to])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'applies_to',
			CONVERT(nvarchar(4000), OLD.[applies_to], 0),
			CONVERT(nvarchar(4000), NEW.[applies_to], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[applies_to] <>
					OLD.[applies_to]
				) Or
			
				(
					NEW.[applies_to] Is Null And
					OLD.[applies_to] Is Not Null
				) Or
				(
					NEW.[applies_to] Is Not Null And
					OLD.[applies_to] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	If UPDATE([path_config])
	BEGIN
    
		INSERT
		INTO [ClubFrRocks].dbo.AUDIT_LOG_DATA
		(
			AUDIT_LOG_TRANSACTION_ID,
			PRIMARY_KEY_DATA,
			COL_NAME,
			OLD_VALUE_LONG,
			NEW_VALUE_LONG,
			DATA_TYPE
			, KEY1
		)
		SELECT
			@AUDIT_LOG_TRANSACTION_ID,
		    convert(nvarchar(1500), IsNull('[oid]=N'''+replace(CONVERT(nvarchar(4000), IsNull(OLD.[oid], NEW.[oid]), 0),'''' ,'''''')+'''', '[oid] Is Null')),
		    'path_config',
			CONVERT(nvarchar(4000), OLD.[path_config], 0),
			CONVERT(nvarchar(4000), NEW.[path_config], 0),
			'A'
			, IsNULL( CONVERT(nvarchar(500), CONVERT(nvarchar(4000), OLD.[oid], 0)), CONVERT(nvarchar(500), CONVERT(nvarchar(4000), NEW.[oid], 0)))
			
		FROM deleted OLD Inner Join inserted NEW On 
			(CONVERT(nvarchar(4000), NEW.[oid], 0)=CONVERT(nvarchar(4000), OLD.[oid], 0) or (NEW.[oid] Is Null and OLD.[oid] Is Null))
			where (
			
			
				(
					NEW.[path_config] <>
					OLD.[path_config]
				) Or
			
				(
					NEW.[path_config] Is Null And
					OLD.[path_config] Is Not Null
				) Or
				(
					NEW.[path_config] Is Not Null And
					OLD.[path_config] Is Null
				)
				)
        
		SET @Inserted = CASE WHEN @@ROWCOUNT > 0 Then 1 Else @Inserted End
	END
	
	-- Watch
	
	-- Lookup
	
	IF @Inserted = 0
	BEGIN
		DELETE FROM [ClubFrRocks].dbo.AUDIT_LOG_TRANSACTIONS WHERE AUDIT_LOG_TRANSACTION_ID = @AUDIT_LOG_TRANSACTION_ID
	END

  -- Restore @@IDENTITY Value
  
    DECLARE @maxprec AS varchar(2)
    SET @maxprec=CAST(@@MAX_PRECISION as varchar(2))
    EXEC('SELECT IDENTITY(decimal('+@maxprec+',0),'+@IDENTITY_SAVE+',1) id INTO #tmp')
  
End

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[tr_u_AUDIT_documents_type_path_configuration]', @order=N'Last', @stmttype=N'UPDATE'
GO
