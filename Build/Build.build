<?xml version="1.0" ?>
<!--
   ======================================================================================================
  RELEASE PROCESS EXPLAINED
  CommandLine= NAnt -buildfile:"C:\development\FootballClub\Build\Build.build" createLiveRelease -D:build.type=Release -D:org.default=trunk -logfile:BuildOutput.txt
  Does the following:
      
  checkLiveArguments: validate passed arguments
  clean: cleans source code folders
  assemblyInfoUpdate: iterates through all assemblies in 'solution.Projects' array and updates assembly info with version number and other properties.
  sqlCreateScripts: updates the 'C:\development\FootballClub\db\staticdata\99_ReleaseUpdate.sql' script.
  buildCode: builds all code in solution.
  publishWebsite: publishes the website using the specified Publish profile i.e. 'build.publishProfile'=Publish_Live_Release


  NAnt -buildfile:"C:\development\FootballClub\Build\Build.build" createLiveRelease -D:setupVer.default=0.0.0.0 -D:build.type=Release -D:org.default=trunk -logfile:BuildOutput.txt


  NAnt -buildfile:"C:\development\FootballClub\Build\Build.build" sqlCreateScripts -D:setupVer.default=0.0.0.0 -D:build.type=Release -D:org.default=trunk -logfile:BuildOutput.txt


  UPDATING PROPERTIES IN SCRIPT - CHECK LINK BELOW: Basically if property is set from command line using -D switch you cant update it in the script.
  To get around this we create 2 properties for any property we want to be able to set from the command line and update in the scr  http://stackoverflow.com/questions/36620111/nant-update-property-in-a-script
   ======================================================================================================
   -->
<project name="FootballClub" default="help" xmlns="http://nant.sf.net/release/0.92/nant.xsd" >
  <echo message="Loading tasks: 'NAnt.Contrib.Tasks.dll'..."/>
  <loadtasks assembly="..\..\BuildTools\NAnt-0.92\bin\tasks\net\NAntContrib\NAnt.Contrib.Tasks.dll" failonerror="true" />

  <echo message="Loading tasks: 'NAnt.Mallons.Tasks.dll'..."/>
  <loadtasks assembly="..\..\BuildTools\NAnt-0.92\bin\tasks\net\CustomTasks\NAnt.Mallons.Tasks.dll" failonerror="true" />

  <!--
   Argument: 'project.name'
   The name of the project
   -->
  <property name="project.name" value="Club Admin" unless="${property::exists('project.name')}" />

  <!--
   Argument: 'customerName'
   The name of the customer deafult is Cookstown
   -->
  <property name="customerName" value="Cookstown" unless="${property::exists('customerName')}" />
	
  <!--
   Argument: 'build.type'
   This file should be run with a value of 'Debug' or 'Release' for property 'build.type'.
      1. Debug results in no versioning set (0.0.0.0)."/>
      2. Release increments the version in the Build.number file (1.0.x.0)."/>
      Example: NAnt -buildfile:"C:\development\FootballClub\Build\Build.build" go -D:build.type=Release
   -->
  <property name="build.type" value="Debug" unless="${property::exists('build.type')}" />

  <!--
   Argument: 'build.platform'
   This is required for msbuild to build the solution sucessfully. By default this should be 'Any CPU'. 'x86' is also valid but havnt needed this yet.
   -->
  <property name="build.platform" value="Any CPU" unless="${property::exists('build.platform')}" />

  <!--
   Argument: 'build.publishProfile'
   If creating a Live release then this should be set to the web site Publish profile e.g. Publish_Live_Release.
   -->
  <property name="build.publishProfile" value="ClubAdmin-PublishFiles" unless="${property::exists('build.publishProfile')}" />

	
  <!--
   Argument: 'setupVer.default'
   This is the current version of the software - this version number is used to Version the Assemblys and label the SourceCode.
   The versioning logic is as follows:
      1. build.type==Debug - default version of '0.0.0.0' is always used for debug builds.
      2. build.type==Release AND setupVer=='0.0.0.0' 
         a. if setupVer equals default i.e.setupVer=='0.0.0.0' then version number in Build.number file is incremented and used
            to build a release.
      3. ***TODO*** build.type==Release AND setupVer!='0.0.0.0' 
         a. This is used to build previous versions of the software. If setupVer was set in commmand line and does NOT equal 
            the default i.e.setupVer!='0.0.0.0' then build a previous of the code
   -->
  <property name="setupVer.default" value="0.0.0.0" unless="${property::exists('setupVer.default')}" />
	
  <!--
   Argument: 'org.default'
   This is the source code to build valid values are:
      1. none: source code comes from the the local repos on the users PC (for testing purposes). This option
         does NOT tag\label the source code with the version number.
      2. trunk: source code comes from the the trunk repos. i.e. \\mt-repo1\Mercurial\Repos\trunk
         This option tag\label the source code with the version number.
      3. mallons: source code comes from the the mallons repos. i.e. \\mt-repo1\Mercurial\Repos\mallons
   -->
  <property name="org.default" value="Brendan Sheehy" unless="${property::exists('org.default')}"/>
  <property name="changed.assemblyinfo.default" value="false" unless="${property::exists('changed.assemblyinfo.default')}" />


  <!-- STATIC PROPERTIES - these Properties are editable\updateable in script -->
  <property name="makeMSBuild" value="C:\Windows\Microsoft.NET\Framework\v4.0.30319\msbuild.exe" />
  <!--<property name="makeMSBuild" value="C:\Windows\Microsoft.NET\Framework64\v4.0.30319\msbuild.exe" />-->
  <property name="build.file.directory" value ="${path::get-directory-name(project::get-buildfile-path())}"/>
  <property name="solution.root.folder" value ="${directory::get-parent-directory(build.file.directory)}"/>
  <property name="nant.onfailure" value="fail"/>
  <property name="publishDir" value="dist" unless="${property::exists('publishDir')}" />
  <property name="changed.versionnumber" value="false" unless="${property::exists('changed.versionnumber')}" />
  <property name="org" value="${org.default}"/>
  <property name="changed.assemblyinfo" value="${changed.assemblyinfo.default}" />
  <property name="setupVer" value="${setupVer.default}" />

  <!--
   Argument: 'release.root.folder.default'
      This is the root folder used in 'publish' target to push releases too. The final release folder will have the following format:
      \[release.root.folder.default]\[org]\[project.name]\[setupVer]
      Example: \\mt-repo1\Mercurial\releases\mallons\DiamondFireWeb\1.3.2.0
   -->
  <property name="release.root.folder.default" value="${solution.root.folder + '\Customer.Info\Releases\' + setupVer}" unless="${property::exists('release.root.folder.default')}" />

  <!--Location where the publishProfile puts website files-->
  <property name="publishedFiles.folder" value="${solution.root.folder + '\Customer.Info\LatestPublish'}" />
  
  <!--This is a list of all comma delimited projects in the solution-->
  <property name="solution.Projects" value="Club.Domain\,Club.Services\" />
  <property name="release.root.folder" value="${release.root.folder.default}" />
  <property name="release.root.folder.Website" value="${release.root.folder  + '\Website\'}" />
  <property name="release.root.folder.DatabaseCreateDatabase" value="${release.root.folder + '\Database\00_CreateDatabase\'}" />
  <property name="release.root.folder.DatabaseUpdateDatabase" value="${release.root.folder + '\Database\00_UpdateDatabase\'}" />
  <property name="release.root.folder.DatabaseUpdateScripts" value="${release.root.folder + '\Database\01_StaticScripts\'}" />

  <!-- TARGETS -->
  
	<target name="createLiveRelease" description="The main target for creating a full live release build process execution." >
    <trycatch>
      <try>
        <echo message="++++++++++++++++++++++++++++++++++++++++++++++++++++" />
        <echo message="Target Start: createLiveRelease" />
        <echo message="++++++++++++++++++++++++++++++++++++++++++++++++++++" />
        
        <call target="checkLiveArguments" />
        <echo level="Debug" message="PASSED EXECUTION OF: checkLiveArguments"/>
        
        <call target="clean" />
        <echo level="Debug" message="PASSED EXECUTION OF: clean"/>
        
        <call target="createReleaseFolders" />
        <echo level="Debug" message="PASSED EXECUTION OF: createReleaseFolders"/>

        <call target="assemblyInfoUpdate" />
        <echo level="Debug" message="PASSED EXECUTION OF: assemblyInfoUpdate"/>

        <call target="sqlCreateScripts" />
        <echo level="Debug" message="PASSED EXECUTION OF: sqlCreateScripts"/>
        
        <call target="buildCode" />
        <echo level="Debug" message="PASSED EXECUTION OF: buildCode"/>
        
        <call target="publishWebsite" />
        <echo level="Debug" message="PASSED EXECUTION OF: publishWebsite"/>
        
				<echo message="createLiveRelease:Success" />
				<echo message="++++++++++++++++++++++++++++++++++++++++++++++++++++" />
				<echo message="Target End: createLiveRelease" />
				<echo message="++++++++++++++++++++++++++++++++++++++++++++++++++++" />
      </try>
      <catch>
				<echo level="Error" message="createLiveRelease:FAILED" />
        <call target="fail" />
        <echo level="Error" message="+++ FAILURE: ERROR OCCURED +++"/>
      </catch>
      <finally>
        <!-- execute everything that doesn't depend on success or failure -->
      </finally>
    </trycatch>
  </target>

  <target name="checkLiveArguments" description="Checks that the mandatory arguments have been provided for a Release.">
    <echo message="checkLiveArguments: build.type=${build.type}"/>
    <if test="${not property::exists('build.type')}">
      <fail message="Please provide the 'build.type' argument to run this file." />
    </if>

    <if test="${property::get-value('build.type') !='Release'}">
      <fail message="The 'build.type' argument for a Live Release must be 'Release'. Currently its: ${build.type}" />
    </if>

    <echo message="checkLiveArguments: org=${org}"/>
    <if test="${not property::exists('org')}">
      <fail message="Please provide the 'org' argument to run this file." />
    </if>
    <if test="${property::get-value('org')!= 'trunk' and property::get-value('org')!= 'mallons'}">
      <fail message="The 'org' argument value must be one of the following: mallons, trunk." />
    </if>

    <echo message="checkLiveArguments: Arguments all valid." />
  </target>

  <target name="checkArguments" description="Checks that the mandatory arguments have been provided.">
    <echo message="checkArguments: build.type=${build.type}"/>
    <if test="${not property::exists('build.type')}">
      <fail message="Please provide the 'build.type' argument to run this file." />
    </if>

    <!--<if test="${build.type !='Debug' or build.type != 'Release'}">-->
    <if test="${property::get-value('build.type') !='Debug' and property::get-value('build.type') != 'Release'}">
      <fail message="The 'build.type' argument must be either 'Debug' or 'Release'. Currently its: ${build.type}" />
    </if>

    <echo message="checkArguments: org=${org}"/>
    <if test="${not property::exists('org')}">
      <fail message="Please provide the 'org' argument to run this file." />
    </if>
    <if test="${property::get-value('org')!='none' and property::get-value('org')!= 'trunk' and property::get-value('org')!= 'mallons'}">
      <fail message="The 'org' argument value must be one of the following: none, mallons, trunk." />
    </if>

    <echo message="checkArguments: Arguments all valid." />
  </target>

  <target name="clean" description="Clean up the build environment.">
    <echo message="Target Start: clean" />

    <foreach item="String" in="${solution.Projects}" delim="," property="projectDir">
      <echo message="Cleaning bin and obj folders for: ${projectDir}" />
      <delete failonerror="false">
        <fileset basedir="${solution.root.folder}">
          <include name="${projectDir + 'bin\**'}"/>
          <include name="${projectDir + 'obj\**'}"/>
        </fileset>
      </delete>
    </foreach>

    <echo message="Target End: clean" />
  </target>


  <!--
  To test this target run:
  NAnt -buildfile:"C:\development\FootballClub\Build\Build.build" assemblyInfoUpdate -D:build.type=Release -D:org.default=trunk
  -->
  <target name="assemblyInfoUpdate" description="Set the AssemblyInfo details for the source code.">
    <property name="thisYear" value="${datetime::get-year(datetime::now())}" />

    <!--Get the Absolute path from the relaive path-->
    <if test="${property::get-value('build.type') == 'Release'}">
			<echo message="Target Start: assemblyInfoUpdate" />
      <foreach item="String" in="${solution.Projects}" delim="," property="projectDir">
        <property name="asminfo.file" value="${path::get-full-path(solution.root.folder + '\' + projectDir + 'Properties\AssemblyInfo.cs')}" />

        <!--Check if AssemblyInfo.cs exists - some assemblies have this file in their root directory rather than ...Properties\AssemblyInfo.cs-->
        <if test="${not file::exists(asminfo.file)}">
          <property name="asminfo.file" value="${path::get-full-path(solution.root.folder + '\' + projectDir + 'AssemblyInfo.cs')}" />
        </if>

        <choose>
          <when test="${not file::exists(asminfo.file)}">
            <echo message="XXX WARNING XXX assemblyInfoUpdate: WARNING File does not exist: ${asminfo.file}" />
          </when>
          <otherwise>
            <echo message="*******************************************************************************"/>
            <echo message="assemblyInfoUpdate: Attempting to update assemblyinfo's for: ${asminfo.file}"/>
            <attrib file="${asminfo.file}" readonly="false" />
            <taskUpdateAssemblyInfo
              AssemblyInfoFile="${asminfo.file}"
              Version="${setupVer}"
              AssemblyDescription="Assembly required for ${project.name}"
              AssemblyCompany="Mallon Technology Ltd."
              AssemblyCopyright="Copyright © Mallon Technology ${thisYear}. All Rights Reserved."
                      />
            <!--<attrib file="${asminfo.file}" readonly="true" />-->
            <property name="changed.assemblyinfo" value="true"/>
            <echo message="*******************************************************************************"/>
            <echo message=""/>
          </otherwise>
        </choose>
      </foreach>
			<echo message="Target End: assemblyInfoUpdate" />
    </if>
  </target>

  <!--
  This target builds the code in theClub Admin web solution using the buildconfiguration specified in the 'build.type' argument.
  To test this target run:
  NAnt -buildfile:"C:\development\FootballClub\Build\Build.build" buildCode -D:build.type=Release -D:org.default=trunk
  -->
  <target name="buildCode" description="Compile the solution code.">
    <echo message="Target Start: buildCode" />
    <echo message="buildCode: Attempting to build the '${build.type}' solution code..."/>
    <exec program="${makeMSBuild}" failonerror="true">
      <arg value="${solution.root.folder}\FootballClub.sln"/>
      <arg value="/target:Rebuild" />
      <arg value="/nologo" />
      <arg value="/property:Configuration=${build.type}"/>
      <arg value="/property:DefineSolutionProperties=false"/>
      <arg value="/property:Platform=${build.platform}"/>
	  <arg value="/property:VisualStudioVersion=12.0"/>
      <!-- Ignore following project extensions when building solution -->
      <!--<arg value="/ignoreprojectextensions:.wix,.wixproj"/>-->
      <!--q[uiet], m[inimal], n[ormal], d[etailed], diag[nostic]-->
      <arg value="/verbosity:m"/>
      <!--Outputs entire log to msbuild.log -->
      <arg value="/fileLogger"/>
      <!--Generates separate log files for errors. -->
      <arg value="/flp1:logfile=errors_buildCode.txt;errorsonly"/>
      <!--Generates separate log files for warnings. -->
      <arg value="/flp2:logfile=warnings_buildCode.txt;warningsonly"/>
    </exec>
    <echo message="Target End: buildCode" />
  </target>

  <!--
  This target Publishes theClub Admin website - first it builds the project code then publishes it using the 'build.publishProfile' argument then the Published Files are moved to the Customer.Info project.
  To test this target run:
  NAnt -buildfile:"C:\development\FootballClub\Build\Build.build" publishWebsite -D:build.type=Release -D:org.default=trunk
  -->
  <target name="publishWebsite" depends="createReleaseFolders" description="Publish theClub Admin website using the 'build.publishProfile' argument: $(build.publishProfile).">
    <echo message="Target Start: publishWebsite" />

    <exec program="${makeMSBuild}" failonerror="true">
      <arg value="${solution.root.folder}\FrRocks\FrRocks.csproj"/>
      <arg value="/nologo" />

      <!-- When building the project dont do any post build events because they result in errors - next 2 lines do this.-->
      <arg value="/property:PostBuildEventUseInBuild=false"/>
      <arg value="/property:PostBuildEvent="/>

      <!-- Publish the website after building using the publish profile. Check out link below:
      http://sedodream.com/2013/01/06/CommandLineWebProjectPublishing.aspx
      -->
      <arg value="/property:VisualStudioVersion=12.0"/>
      <arg value="/property:DeployOnBuild=true"/>
      <arg value="/property:PublishProfile=${build.publishProfile}"/>
      <arg value="/property:Configuration=${build.type}"/>
      <arg value="/property:Platform=AnyCPU"/>

      <!--Publish the website to specific directory-->
      <!--<arg value="/property:OutDir=${release.root.folder}" />-->
      <!--<arg value="/property:WebProjectOutputDir=${release.root.folder}" />-->
      <!--<arg value="/property:OutDir=${release.root.folder}" />-->

      <!--<arg value="/t:ResolveReferences;_WPPCopyWebApplication" />
      <arg value="/t:TransformWebConfig" />-->

      <!-- Ignore following project extensions when building solution -->
      <!--<arg value="/ignoreprojectextensions:.wix,.wixproj"/>-->
      <!--q[uiet], m[inimal], n[ormal], d[etailed], diag[nostic]-->
      <arg value="/verbosity:m"/>
      <!--Outputs entire log to msbuild.log -->
      <arg value="/fileLogger"/>
      <!--Generates separate log files for errors. -->
      <arg value="/flp1:logfile=errors_publishWebsite.txt;errorsonly"/>
      <!--Generates separate log files for warnings. -->
      <arg value="/flp2:logfile=warnings_publishWebsite.txt;warningsonly"/>

      <!--<arg value="/property:DefineSolutionProperties=false"/>-->
    </exec>

    <!--Copy the Published Web Deploy folder to ..\Web Deploy-->
    <copy todir="${release.root.folder.Website}">
      <fileset basedir="${publishedFiles.folder}">
        <include name="**/*" />
      </fileset>
    </copy>
    
    <echo message="Target End: publishWebsite" />
  </target>


  <target name="createReleaseFolders" description="Creates the release folder structure.">
    <mkdir dir="${release.root.folder}"/>
    <mkdir dir="${release.root.folder.Website}"/>
    <mkdir dir="${release.root.folder.DatabaseUpdateScripts}"/>
    <mkdir dir="${release.root.folder.DatabaseCreateDatabase}"/>
    <mkdir dir="${release.root.folder.DatabaseUpdateDatabase}"/>
  </target>
  
  <!--
  This target does the following:
    1. Updates the '90_ReleaseUpdate.sql' script with the relevant properties.
    2. Concatones sql scripts are creates 01_sqlStoredProcedures.sql, 02_sqlTriggers.sql and 03_sqlStaticData.sql and sends to release folder.
  NAnt -buildfile:"C:\development\FootballClub\Build\Build.build" sqlCreateScripts -D:setupVer.default=1.0.0.0 -D:build.type=Release -D:org.default=trunk
  -->
  <target name="sqlCreateScripts" depends="createReleaseFolders" description="Update sql scripts for this release.">
    <echo message="Target Start: sqlCreateScripts" />
    <echo message="sqlCreateScripts: Version is ${setupVer}" />
    <property name="version.Major" value="${version::get-major(version::parse(setupVer))}" />
    <property name="version.Minor" value="${version::get-minor(version::parse(setupVer))}" />
    <property name="version.Revision" value="${version::get-revision(version::parse(setupVer))}" />
    <property name="version.Build" value="${version::get-build(version::parse(setupVer))}" />

    <echo file="${solution.root.folder}\db\staticdata\90_ReleaseUpdate.sql">
      /*
      ===============================================================================================================
      This file was auto generated by theClub Admin Nant build file target: 'sqlCreateScripts' for version: ${setupVer}
      ===============================================================================================================
      */
      IF NOT EXISTS(SELECT * FROM [core_system_info] WHERE [Oid] = N'48c42625-eace-4728-aa6f-2ab11b6712ec')
      BEGIN
      INSERT [dbo].[core_system_info] ([oid], [orev], [application_name], [customer_name], [ver_major], [ver_minor], [ver_schema], [ver_build]) VALUES (N'48c42625-eace-4728-aa6f-2ab11b6712ec', 1, N'Diamond Fire', N'${customerName}', ${version.Major}, ${version.Minor}, ${version.Revision}, ${version.Build})
      END
      ELSE
      BEGIN
      UPDATE [dbo].[core_system_info]
      SET [ver_major] = ${version.Major}, [ver_minor] = ${version.Minor}, [ver_schema] = ${version.Revision}, [ver_build] = ${version.Build}
      END

      IF NOT EXISTS(SELECT * FROM [core_version_info] WHERE [Oid] = N'c19df5be-79c7-4ffc-8699-c2cfac4be2bd')
      BEGIN
      INSERT [dbo].[core_version_info] ([oid], [orev], [database_version], [software_version], [cdc_userid]) VALUES (N'c19df5be-79c7-4ffc-8699-c2cfac4be2bd', 1, N'${setupVer}', N'${setupVer}', N'MALLON-DL-DOM\Brendan.Sheehy')
      END
      ELSE
      BEGIN
      UPDATE [core_version_info] SET [database_version] = N'${setupVer}', [software_version] = N'${setupVer}'
      END

    </echo>

    <!--
    Create the Release SQL scripts. 
    1. Creates following folders:
      ..\1.8.0.0\Database\01_StaticScripts\
      ..\1.8.0.0\Database\00_CreateDatabase\
      ..\1.8.0.0\Database\00_UpdateDatabase\
    
    This creates the following scripts by concatonating various files:
    1. 01_sqlStoredProcedures.sql: = Concatonate following scripts:
          a. C:\development\FootballClub\db\audit\tables\00_fnc_Audit_UserGetCurrent.sql
          b. All sql files from C:\development\FootballClub\db\storedprocs\
    2. 02_sqlTriggers.sql = Concatonate following scripts:
          a. C:\development\FootballClub\db\triggers\
          b. C:\development\FootballClub\db\audit\triggers\00_ApexSQLAuditTriggers.sql          
    3. 03_sqlStaticData.sql:
          a. All sql files from C:\development\FootballClub\db\staticdata\
          b. C:\development\FootballClub\db\staticdata\90_ReleaseUpdate.sql"
    3. 04_sqlIndexes.sql:
          a. All sql files from C:\development\FootballClub\db\indexes\
    -->

    <echo message="sqlCreateDatabaseScripts: Creating '00_DatabaseCreate.sql' file..." />
    <concat destfile="${release.root.folder.DatabaseCreateDatabase}\00_DatabaseCreate.sql">
      <fileset>
        <include name="${solution.root.folder}\db\schema.sql" />
        <!--Need this fuction here-->
        <include name="${solution.root.folder}\db\audit\00_fnc_Audit_UserGetCurrent.sql" />
        <include name="${solution.root.folder}\db\elmah\tables\elmah_table.sql" />
      </fileset>
    </concat>

    <echo message="sqlCreateDatabaseScripts: Creating '01_ApexAuditLogCreate.sql' file..." />
    <concat destfile="${release.root.folder.DatabaseCreateDatabase}\01_ApexAuditLogCreate.sql">
      <fileset>
        <include name="${solution.root.folder}..\..\AuditApexSql\db\ApexSchema\*.sql" />
      </fileset>
    </concat>

    <echo message="sqlCreateScripts: Creating '01_sqlStoredProcedures.sql' file..." />
    <concat destfile="${release.root.folder.DatabaseUpdateScripts}\01_sqlStoredProcedures.sql">
      <fileset>
        <!--<include name="${solution.root.folder}..\..\DynamicApps\DynamicApps.Schema\db\storedprocs\*.sql" />-->
        <include name="${solution.root.folder}\db\storedprocs\*.sql" />
        <include name="${solution.root.folder}\db\elmah\storedprocs\*.sql" />
      </fileset>
    </concat>

    <echo message="sqlCreateScripts: Creating '02_sqlTriggers.sql' file..." />
    <concat destfile="${release.root.folder.DatabaseUpdateScripts}\02_sqlTriggers.sql">
      <fileset>
        <include name="${solution.root.folder}\db\triggers\*.sql" />
      </fileset>
    </concat>

    <echo message="sqlCreateScripts: Creating '03_sqlStaticData.sql' file..." />
    <concat destfile="${release.root.folder.DatabaseUpdateScripts}\03_sqlStaticData.sql">
      <fileset>
        <include name="${solution.root.folder}\db\staticdata\*.sql" />
      </fileset>
    </concat>

    <!--<echo message="sqlCreateScripts: Creating '04_sqlIndexes.sql' file..." />
    <concat destfile="${release.root.folder.DatabaseUpdateScripts}\04_sqlIndexes.sql">
      <fileset>
        <include name="${solution.root.folder}\db\indexes\*.sql" />
      </fileset>
    </concat>-->

    <!--<echo message="sqlCreateScripts: Creating '05_sqlViews.sql' file..." />
    <concat destfile="${release.root.folder.DatabaseUpdateScripts}\05_sqlViews.sql">
      <fileset>
        <include name="${solution.root.folder}\db\views\*.sql" />
      </fileset>
    </concat>-->

    <echo message="sqlCreateScripts: Creating '06_sqlFunctions.sql' file..." />
    <concat destfile="${release.root.folder.DatabaseUpdateScripts}\06_sqlFunctions.sql">
      <fileset>
        <include name="${solution.root.folder}\db\functions\*.sql" />
      </fileset>
    </concat>
    <echo message="Target End: sqlCreateScripts" />
  </target>

  <target name="notify" description="Tell everyone of the success or failure.">
    <!--Enter tasks for notify target-->
  </target>

  <target name="fail">
    <!--Enter tasks for fail target-->
  </target>

  <target name="help">
    <!--Enter tasks for help target-->
    <echo message="The skeleton file for the build process is designed to execute the following targets in turn:"/>
    <echo message="-- clean"/>
    <echo message="-- assemblyInfoUpdate"/>
    <echo message="-- version"/>
    <echo message="-- buildCode"/>
    <echo message="-- buildInstallers"/>
    <echo message="-- publish"/>
    <echo message="-- cleanUpAfter"/>
    <echo message="-- notify"/>

    <echo message="-- MANDATORY ARGUMENTS --"/>
    <echo message="Argument: 'build.type'"/>
    <echo message="   This file should be run with a value of 'Debug' or 'Release' for property 'build.type'."/>
    <echo message="   -- Debug results in no versioning set (0.0.0.0)."/>
    <echo message="   -- Release increments the version in the Build.number file (1.0.x.0)."/>
    <echo message="   -- Example: -D:build.type=Release"/>
  </target>

</project>